version: 2.1

# -------------------------
#        REFERENCES
# -------------------------
references:
  defaults: &defaults
    working_directory: ~/react-native
    environment:
      - GIT_COMMIT_DESC: git log --format=oneline -n 1 $CIRCLE_SHA1
      # The public github tokens are publicly visible by design
      - PUBLIC_PULLBOT_GITHUB_TOKEN_A: &github_pullbot_token_a "a6edf8e8d40ce4e8b11a"
      - PUBLIC_PULLBOT_GITHUB_TOKEN_B: &github_pullbot_token_b "150e1341f4dd9c944d2a"
      - PUBLIC_ANALYSISBOT_GITHUB_TOKEN_A: &github_analysisbot_token_a "312d354b5c36f082cfe9"
      - PUBLIC_ANALYSISBOT_GITHUB_TOKEN_B: &github_analysisbot_token_b "07973d757026bdd9f196"
      # Homebrew currently breaks while updating:
      # https://discuss.circleci.com/t/brew-install-fails-while-updating/32992
      - HOMEBREW_NO_AUTO_UPDATE: 1

  hermes_workspace_root: &hermes_workspace_root
    /tmp/hermes
  attach_hermes_workspace: &attach_hermes_workspace
    attach_workspace:
      at: *hermes_workspace_root

  # -------------------------
  #        Dependency Anchors
  # -------------------------
  dependency_versions:
    xcode_version: &xcode_version "13.3.1"
    nodelts_image: &nodelts_image "cimg/node:16.14"
    nodeprevlts_image: &nodeprevlts_image "cimg/node:14.19"

  # -------------------------
  #        Cache Key Anchors
  # -------------------------
  # Anchors for the cache keys

  cache_keys:
    checkout_cache_key: &checkout_cache_key v1-checkout
    gems_cache_key: &gems_cache_key v1-gems-{{ checksum "Gemfile.lock" }}
    gradle_cache_key: &gradle_cache_key v1-gradle-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "ReactAndroid/gradle.properties" }}
    hermes_workspace_cache_key: &hermes_workspace_cache_key v4-hermes-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/hermes/hermesversion" }}
    hermes_workspace_debug_cache_key: &hermes_workspace_debug_cache_key v1-hermes-{{ .Environment.CIRCLE_JOB }}-debug-{{ checksum "/tmp/hermes/hermesversion" }}
    hermes_workspace_release_cache_key: &hermes_workspace_release_cache_key v1-hermes-{{ .Environment.CIRCLE_JOB }}-release-{{ checksum "/tmp/hermes/hermesversion" }}
    hermes_windows_cache_key: &hermes_windows_cache_key v3-hermes-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tmp/hermes/hermesversion" }}
    hermes_tarball_debug_cache_key: &hermes_tarball_debug_cache_key v2-hermes-tarball-debug-{{ checksum "/tmp/hermes/hermesversion" }}
    hermes_tarball_release_cache_key: &hermes_tarball_release_cache_key v1-hermes-tarball-release-{{ checksum "/tmp/hermes/hermesversion" }}
    pods_cache_key: &pods_cache_key v8-pods-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/rn-tester/Podfile.lock.bak" }}-{{ checksum "packages/rn-tester/Podfile" }}
    windows_yarn_cache_key: &windows_yarn_cache_key v1-win-yarn-cache-{{ arch }}-{{ checksum "yarn.lock" }}
    yarn_cache_key: &yarn_cache_key v5-yarn-cache-{{ .Environment.CIRCLE_JOB }}

  cache_paths:
    hermes_workspace_macos_cache_paths: &hermes_workspace_macos_cache_paths
      - ~/react-native/sdks/hermes/build_host_hermesc
      - ~/react-native/sdks/hermes/build_iphoneos
      - ~/react-native/sdks/hermes/build_catalyst
      - ~/react-native/sdks/hermes/build_iphonesimulator
      - ~/react-native/sdks/hermes/build_macosx
      - ~/react-native/sdks/hermes/destroot
    hermes_tarball_cache_paths: &hermes_tarball_cache_paths
      - /tmp/hermes/hermes-runtime-darwin/

# -------------------------
#        EXECUTORS
# -------------------------
executors:
  nodelts:
    <<: *defaults
    docker:
      # Note: Version set separately for Windows builds, see below.
      - image: *nodelts_image
    resource_class: "xlarge"
  nodeprevlts:
    <<: *defaults
    docker:
      - image: *nodeprevlts_image
    resource_class: "xlarge"
  reactnativeandroid:
    <<: *defaults
    docker:
      - image: reactnativecommunity/react-native-android:5.4
    resource_class: "xlarge"
    environment:
      - TERM: "dumb"
      - ADB_INSTALL_TIMEOUT: 10
      - GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError"'
      - BUILD_THREADS: 2
      # Repeated here, as the environment key in this executor will overwrite the one in defaults
      - PUBLIC_ANALYSISBOT_GITHUB_TOKEN_A: *github_analysisbot_token_a
      - PUBLIC_ANALYSISBOT_GITHUB_TOKEN_B: *github_analysisbot_token_b
      - PUBLIC_PULLBOT_GITHUB_TOKEN_A: *github_pullbot_token_a
      - PUBLIC_PULLBOT_GITHUB_TOKEN_B: *github_pullbot_token_b
  reactnativeios:
    <<: *defaults
    macos:
      xcode: *xcode_version
    resource_class: macos.x86.medium.gen2

# -------------------------
#        COMMANDS
# -------------------------
commands:
  # Checkout with cache, on machines that are using Docker the cache is ignored
  checkout_code_with_cache:
    parameters:
      checkout_base_cache_key:
        default: *checkout_cache_key
        type: string
    steps:
      - restore_cache:
            keys:
              - << parameters.checkout_base_cache_key >>-{{ .Branch }}-{{ .Revision }}
              - << parameters.checkout_base_cache_key >>-{{ .Branch }}-
              - << parameters.checkout_base_cache_key >>
      - checkout
      - save_cache:
          key: << parameters.checkout_base_cache_key >>-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

  run_yarn:
    parameters:
      yarn_base_cache_key:
        default: *yarn_cache_key
        type: string
    steps:
      - restore_cache:
          keys:
            - << parameters.yarn_base_cache_key >>-{{ arch }}-{{ checksum "yarn.lock" }}
            - << parameters.yarn_base_cache_key >>-{{ arch }}
            - << parameters.yarn_base_cache_key >>
      - run:
          name: "Yarn: Install Dependencies"
          command: |
            # Skip yarn install on metro bump commits as the package is not yet
            # available on npm
            if [[ $(echo "$GIT_COMMIT_DESC" | grep -c "Bump metro@") -eq 0 ]]; then
              yarn install --non-interactive --cache-folder ~/.cache/yarn
            fi
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: << parameters.yarn_base_cache_key >>-{{ arch }}-{{ checksum "yarn.lock" }}

  brew_install:
    parameters:
      package:
        description: Homebrew package to install
        type: string
    steps:
      - run:
          name: "Brew: Install << parameters.package >>"
          command: brew install << parameters.package >> >/dev/null

  with_hermes_tarball_cache_span:
    parameters:
      steps:
        type: steps
      set_tarball_path:
        type: boolean
        default: False
      flavor:
        type: string
        default: "Debug"
    steps:
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Debug"]
          steps:
            - restore_cache:
                keys:
                  - *hermes_tarball_debug_cache_key
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Release"]
          steps:
            - restore_cache:
                keys:
                  - *hermes_tarball_release_cache_key
      - when:
          condition: << parameters.set_tarball_path >>
          steps:
            - run:
                name: Set HERMES_ENGINE_TARBALL_PATH if present
                command: |
                  BASE_PATH=/tmp/hermes/hermes-runtime-darwin/
                  if [ ! -d $BASE_PATH ]; then
                    echo "Hermes tarball base path not present ($BASE_PATH). Build it from source."
                    exit 0
                  fi
                  if [[ << parameters.flavor >> == "Debug" ]]; then
                    TARBALL_FILENAME=hermes-runtime-darwin-debug-*.tar.gz
                  elif [[ << parameters.flavor >> == "Release" ]]; then
                    TARBALL_FILENAME=hermes-runtime-darwin-release-*.tar.gz
                  else
                    echo "Unsupported build type << parameters.flavor >>."
                    exit 0
                  fi
                  # /tmp/hermes/hermes-runtime-darwin/hermes-runtime-darwin-release-v0.70.0.tar.gz
                  # /tmp/hermes/hermes-runtime-darwin/hermes-runtime-darwin-debug-v0.70.0.tar.gz
                  TARBALL_PATH=$(ls $BASE_PATH$TARBALL_FILENAME)
                  if [ ! -f $TARBALL_PATH ]; then
                    echo "Hermes tarball not present ($TARBALL_PATH). Build it from source."
                    exit 0
                  fi

                  echo "Found Hermes tarball at $TARBALL_PATH"
                  echo "export HERMES_ENGINE_TARBALL_PATH=$TARBALL_PATH" >> $BASH_ENV
      - steps: << parameters.steps >>
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Debug"]
          steps:
            - save_cache:
                key: *hermes_tarball_debug_cache_key
                paths: *hermes_tarball_cache_paths
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Release"]
          steps:
            - save_cache:
                key: *hermes_tarball_release_cache_key
                paths: *hermes_tarball_cache_paths

# -------------------------
#          JOBS
# -------------------------
jobs:
  # -------------------------
  #      JOBS: Build hermesc
  # -------------------------
  prepare_hermes_workspace:
    docker:
      - image: debian:11
    environment:
      - HERMES_WS_DIR: *hermes_workspace_root
      - HERMES_VERSION_FILE: "sdks/.hermesversion"
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y wget git curl
            curl -sL https://deb.nodesource.com/setup_16.x | bash -
            apt install -y nodejs
            npm install --global yarn
      - checkout
      - run_yarn
      - run:
          name: Set up Hermes workspace and caching
          command: |
            mkdir -p "/tmp/hermes" "/tmp/hermes/download" "/tmp/hermes/hermes"

            if [ -f "$HERMES_VERSION_FILE" ]; then
              cat $HERMES_VERSION_FILE > /tmp/hermes/hermesversion
            else
              HERMES_TAG_SHA=$(git ls-remote https://github.com/facebook/hermes main | cut -f 1 | tr -d '[:space:]')
              echo $HERMES_TAG_SHA > /tmp/hermes/hermesversion
            fi
            cat /tmp/hermes/hermesversion
      - restore_cache:
          key: *hermes_workspace_cache_key
      - run:
          name: Download Hermes tarball
          command: |
            node scripts/hermes/prepare-hermes-for-build $CIRCLE_PULL_REQUEST
            cp sdks/download/* $HERMES_WS_DIR/download/.
            cp -r sdks/hermes/* $HERMES_WS_DIR/hermes/.

            cat /tmp/hermes/hermesversion
      - save_cache:
          key: *hermes_workspace_cache_key
          paths:
            - /tmp/hermes/download/
            - /tmp/hermes/hermes/
      - persist_to_workspace:
          root: *hermes_workspace_root
          paths:
            - download
            - hermes
            - hermesversion

  build_hermes_macos:
    parameters:
      flavor:
        type: string
        default: "Debug"
    executor: reactnativeios
    environment:
      - HERMES_WS_DIR: *hermes_workspace_root
    steps:
      - checkout_code_with_cache
      - *attach_hermes_workspace
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Debug"]
          steps:
            - restore_cache:
                keys:
                  - *hermes_workspace_debug_cache_key
      - when:
          condition:
            equal: [ << parameters.flavor >>, "Release"]
          steps:
            - restore_cache:
                keys:
                  - *hermes_workspace_release_cache_key
      - run:
          name: Set up workspace
          command: |
            mkdir -p /tmp/hermes/osx-bin
            mkdir -p ~/react-native/sdks/hermes
            cp -r $HERMES_WS_DIR/hermes/* ~/react-native/sdks/hermes/.
      - brew_install:
          package: cmake
      - with_hermes_tarball_cache_span:
          flavor: << parameters.flavor >>
          steps:
            - run:
                name: Build the Hermes iOS frameworks
                command: |
                  cd ~/react-native/sdks/hermes
                  BUILD_TYPE="<< parameters.flavor >>" ./utils/build-ios-framework.sh
            - run:
                name: Build the Hermes Mac frameworks
                command: |
                  cd ~/react-native/sdks/hermes
                  BUILD_TYPE="<< parameters.flavor >>" ./utils/build-mac-framework.sh
                  cp build_macosx/bin/hermesc /tmp/hermes/osx-bin/.
            - run:
                name: Package the Hermes Apple frameworks
                command: |
                  echo "Packaging Hermes Apple frameworks for << parameters.flavor >> build type"

                  cd ~/react-native/sdks/hermes
                  BUILD_TYPE="<< parameters.flavor >>" source ./utils/build-apple-framework.sh

                  mkdir -p /tmp/cocoapods-package-root/destroot
                  mkdir -p /tmp/hermes/output
                  cp -R ./destroot /tmp/cocoapods-package-root
                  cp LICENSE /tmp/cocoapods-package-root

                  if [[ << parameters.flavor >> == "Debug" ]]; then
                    TARBALL_FILENAME=hermes-runtime-darwin-debug-v$(get_release_version).tar.gz
                  elif [[ << parameters.flavor >> == "Release" ]]; then
                    TARBALL_FILENAME=hermes-runtime-darwin-release-v$(get_release_version).tar.gz
                  else
                    echo "Unsupported build type << parameters.flavor >>."
                    exit 0
                  fi

                  tar -C /tmp/cocoapods-package-root/ -czvf /tmp/hermes/output/$TARBALL_FILENAME .

                  mkdir -p /tmp/hermes/hermes-runtime-darwin
                  cp /tmp/hermes/output/$TARBALL_FILENAME /tmp/hermes/hermes-runtime-darwin/.

                  # TODO: Remove this once the client side is aware of -release and -debug tarballs
                  if [[ << parameters.flavor >> == "Debug" ]]; then
                    cp /tmp/hermes/hermes-runtime-darwin/hermes-runtime-darwin-debug-v$(get_release_version).tar.gz /tmp/hermes/hermes-runtime-darwin/hermes-runtime-darwin-v$(get_release_version).tar.gz
                  fi
                  ls /tmp/hermes/hermes-runtime-darwin/
            - when:
                condition:
                  equal: [ << parameters.flavor >>, "Debug"]
                steps:
                  - save_cache:
                      key: *hermes_workspace_debug_cache_key
                      paths: *hermes_workspace_macos_cache_paths
            - when:
                condition:
                  equal: [ << parameters.flavor >>, "Release"]
                steps:
                  - save_cache:
                      key: *hermes_workspace_release_cache_key
                      paths: *hermes_workspace_macos_cache_paths
            - store_artifacts:
                path: /tmp/hermes/hermes-runtime-darwin/
            - store_artifacts:
                path: /tmp/hermes/osx-bin/
            # Debug/Release has no effect on osx-bin/hermesc, but Circle CI will not allow persisting duplicate osx-bin/hermesc binaries to the workspace
            - when:
                condition:
                  equal: [ << parameters.flavor >>, "Debug"]
                steps:
                  - persist_to_workspace:
                      root: /tmp/hermes/
                      paths:
                        - hermes-runtime-darwin
                        - osx-bin
            - when:
                condition:
                  equal: [ << parameters.flavor >>, "Release"]
                steps:
                  - persist_to_workspace:
                      root: /tmp/hermes/
                      paths:
                        - hermes-runtime-darwin

  # -------------------------
  #      JOBS: Releases
  # -------------------------
  prepare_package_for_release:
    parameters:
      version:
        type: string
      latest:
        type: boolean
        default: false
    executor: reactnativeios
    steps:
      - checkout_code_with_cache
      - run_yarn
      - add_ssh_keys:
          fingerprints:
            - "1c:98:e0:3a:52:79:95:29:12:cd:b4:87:5b:41:e2:bb"
      - run:
          name: "Set new react-native version and commit changes"
          command: |
            node ./scripts/prepare-package-for-release.js -v << parameters.version >> -l << parameters.latest >>

  build_npm_package:
    parameters:
      publish_npm_args:
        type: string
        default: --dry-run
    executor: reactnativeandroid
    environment:
      - HERMES_WS_DIR: *hermes_workspace_root
    steps:
      - run:
          name: Add github.com to SSH known hosts
          command: |
            mkdir -p ~/.ssh
            echo '|1|If6MU203eXTaaWL678YEfWkVMrw=|kqLeIAyTy8pzpj8x8Ae4Fr8Mtlc= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - checkout
      - *attach_hermes_workspace
      - run:
          name: Copy HermesC binaries
          command: |
            mkdir -p ./sdks/hermesc ./sdks/hermesc/osx-bin ./sdks/hermesc/win64-bin ./sdks/hermesc/linux64-bin
            cp -r $HERMES_WS_DIR/osx-bin/* ./sdks/hermesc/osx-bin/.

      - run:
          name: Create draft GitHub Release and upload Hermes binaries
          command: |
            ARTIFACTS=("$HERMES_WS_DIR/hermes-runtime-darwin/hermes-runtime-darwin-release-$CIRCLE_TAG.tar.gz" "$HERMES_WS_DIR/hermes-runtime-darwin/hermes-runtime-darwin-debug-$CIRCLE_TAG.tar.gz")
            ./scripts/circleci/create_github_release.sh "${ARTIFACTS[@]}"

  # -------------------------
  #    JOBS: Nightly
  # -------------------------
  nightly_job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
          name: Nightly
          command: |
            echo "Nightly build run"


# -------------------------
#        PIPELINE PARAMETERS
# -------------------------
parameters:
  run_package_release_workflow_only:
    default: false
    type: boolean

  release_latest:
    default: false
    type: boolean

  release_version:
    default: "9999"
    type: string

# -------------------------
#        WORK FLOWS
#
#  When creating a new workflow, make sure to include condition `unless: << pipeline.parameters.run_package_release_workflow_only >>`
#  It's setup this way so we can trigger a release via a POST
#  See limitations: https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2
# -------------------------
workflows:
  version: 2

  test_release:
    jobs:
      - prepare_hermes_workspace
      - build_hermes_macos:
          requires:
            - prepare_hermes_workspace
          matrix:
            parameters:
              flavor: ["Debug", "Release"]
      - build_npm_package:
          name: build_and_publish_npm_package
          context: react-native-bot
          publish_npm_args: --release
          requires:
            - build_hermes_macos
