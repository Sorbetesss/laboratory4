/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 */

'use strict';

import type {SchemaType} from '../../CodegenSchema';

// File path -> contents
type FilesOutput = Map<string, string>;

const FileTemplate = ({
  collectedComponents,
  libraryName,
}: {
  collectedComponents: Array<string>,
  libraryName: string,
}) => `
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * ${'@'}generated by codegen project: GenerateComponentDescriptorH.js
 */

#pragma once

#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
#include <react/renderer/components/${libraryName}/ShadowNodes.h>
#include <react/renderer/core/ConcreteComponentDescriptor.h>

namespace facebook {
namespace react {

${collectedComponents
  .map(componentName => ComponentTemplate({componentName}))
  .join('\n')}

inline void ${libraryName}_registerComponentDescriptors(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
  ${collectedComponents
    .map(componentName => ComponentRegistrationTemplate({componentName}))
    .join('\n  ')}
}

} // namespace react
} // namespace facebook
`;

const ComponentTemplate = ({componentName}: {componentName: string}) =>
  `
using ${componentName}ComponentDescriptor = ConcreteComponentDescriptor<${componentName}ShadowNode>;
`.trim();

const ComponentRegistrationTemplate = ({
  componentName,
}: {
  componentName: string,
}) =>
  `
providerRegistry->add(concreteComponentDescriptorProvider<${componentName}ComponentDescriptor>());
`.trim();

module.exports = {
  generate(
    libraryName: string,
    schema: SchemaType,
    packageName?: string,
    assumeNonnull: boolean = false,
  ): FilesOutput {
    const fileName = 'ComponentDescriptors.h';

    const collectedComponents = [];
    Object.keys(schema.modules).map(moduleName => {
      const module = schema.modules[moduleName];
      if (module.type !== 'Component') {
        return;
      }

      const {components} = module;
      // No components in this module
      if (components == null) {
        return;
      }

      Object.keys(components).map(componentName => {
        if (components[componentName].interfaceOnly === true) {
          return;
        }
        collectedComponents.push(componentName);
      });
    });

    const replacedTemplate = FileTemplate({
      collectedComponents,
      libraryName,
    });

    return new Map([[fileName, replacedTemplate]]);
  },
};
