{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "react-native!",
  "docComment": "",
  "name": "react-native",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "react-native!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "react-native!_Image:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_Image: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "Image",
              "canonicalReference": "react-native!Image:class"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Animated.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "_Image",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!_ScrollView:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_ScrollView: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollView",
              "canonicalReference": "react-native!ScrollView:class"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Animated.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "_ScrollView",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!_Text:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_Text: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "Text",
              "canonicalReference": "react-native!Text_2:class"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Animated.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "_Text",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!_View:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_View: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "View",
              "canonicalReference": "react-native!View:class"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Animated.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "_View",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityActionEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityActionEvent = "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<\n  "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    actionName: string;\n  }>\n>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityActionEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityActionInfo:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityActionInfo = "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n  name: "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityActionName",
              "canonicalReference": "react-native!AccessibilityActionName:type"
            },
            {
              "kind": "Content",
              "text": " | string;\n  label?: string | undefined;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityActionInfo",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityActionName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityActionName =\n  /**\n   * Generated when a screen reader user double taps the component.\n   */\n  "
            },
            {
              "kind": "Content",
              "text": "| 'activate'\n  /**\n   * Generated when a screen reader user increments an adjustable component.\n   */\n  | 'increment'\n  /**\n   * Generated when a screen reader user decrements an adjustable component.\n   */\n  | 'decrement'\n  /**\n   * Generated when a TalkBack user places accessibility focus on the component and double taps and holds one finger on the screen.\n   * @platform android\n   */\n  | 'longpress'\n  /**\n   * Generated when a VoiceOver user places focus on or inside the component and double taps with two fingers.\n   * @platform ios\n   * */\n  | 'magicTap'\n  /**\n   * Generated when a VoiceOver user places focus on or inside the component and performs a two finger scrub gesture (left, right, left).\n   * @platform ios\n   * */\n  | 'escape'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityActionName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityAnnouncementEventName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityAnnouncementEventName = "
            },
            {
              "kind": "Content",
              "text": "'announcementFinished'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityAnnouncementEventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityAnnouncementFinishedEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityAnnouncementFinishedEvent = "
            },
            {
              "kind": "Content",
              "text": "{\n  announcement: string;\n  success: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityAnnouncementFinishedEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityAnnouncementFinishedEventHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityAnnouncementFinishedEventHandler = "
            },
            {
              "kind": "Content",
              "text": "(\n  event: "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityAnnouncementFinishedEvent",
              "canonicalReference": "react-native!AccessibilityAnnouncementFinishedEvent:type"
            },
            {
              "kind": "Content",
              "text": ",\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityAnnouncementFinishedEventHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityChangeEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityChangeEvent = "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityChangeEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityChangeEventHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityChangeEventHandler = "
            },
            {
              "kind": "Content",
              "text": "(\n  event: "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityChangeEvent",
              "canonicalReference": "react-native!AccessibilityChangeEvent:type"
            },
            {
              "kind": "Content",
              "text": ",\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityChangeEventHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityChangeEventName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityChangeEventName =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'change' // deprecated, maps to screenReaderChanged\n  | 'boldTextChanged' // iOS-only Event\n  | 'grayscaleChanged' // iOS-only Event\n  | 'invertColorsChanged' // iOS-only Event\n  | 'reduceMotionChanged'\n  | 'screenReaderChanged'\n  | 'reduceTransparencyChanged'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityChangeEventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityEventTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AccessibilityEventTypes = "
            },
            {
              "kind": "Content",
              "text": "'click' | 'focus' | 'viewHoverEnter'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityEventTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityInfo:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityInfo = "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityInfoStatic",
              "canonicalReference": "react-native!AccessibilityInfoStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityInfo",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!AccessibilityInfo:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AccessibilityInfo: "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityInfoStatic",
              "canonicalReference": "react-native!AccessibilityInfoStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AccessibilityInfo",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityInfoStatic:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/accessibilityinfo\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityInfoStatic "
            }
          ],
          "fileUrlPath": "Libraries/Components/AccessibilityInfo/AccessibilityInfo.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityInfoStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#addEventListener:member(1)",
              "docComment": "/**\n * Add an event handler. Supported events: - announcementFinished: iOS-only event. Fires when the screen reader has finished making an announcement. The argument to the event handler is a dictionary with these keys: - announcement: The string announced by the screen reader. - success: A boolean indicating whether the announcement was successfully made. - AccessibilityEventName constants other than announcementFinished: Fires on accessibility feature change. The argument to the event handler is a boolean. The boolean is true when the related event's feature is enabled and false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityChangeEventName",
                  "canonicalReference": "react-native!AccessibilityChangeEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityChangeEventHandler",
                  "canonicalReference": "react-native!AccessibilityChangeEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#addEventListener:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityAnnouncementEventName",
                  "canonicalReference": "react-native!AccessibilityAnnouncementEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityAnnouncementFinishedEventHandler",
                  "canonicalReference": "react-native!AccessibilityAnnouncementFinishedEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#announceForAccessibility:member",
              "docComment": "/**\n * Post a string to be announced by the screen reader.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "announceForAccessibility: "
                },
                {
                  "kind": "Content",
                  "text": "(announcement: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "announceForAccessibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#announceForAccessibilityWithOptions:member(1)",
              "docComment": "/**\n * Post a string to be announced by the screen reader. - `announcement`: The string announced by the screen reader. - `options`: An object that configures the reading options. - `queue`: The announcement will be queued behind existing announcements. iOS only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "announceForAccessibilityWithOptions(\n    announcement: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    options: "
                },
                {
                  "kind": "Content",
                  "text": "{queue?: boolean | undefined}"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "announcement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "announceForAccessibilityWithOptions"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#getRecommendedTimeoutMillis:member",
              "docComment": "/**\n * Gets the timeout in millisecond that the user needs. This value is set in \"Time to take action (Accessibility timeout)\" of \"Accessibility\" settings.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRecommendedTimeoutMillis: "
                },
                {
                  "kind": "Content",
                  "text": "(originalTimeout: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getRecommendedTimeoutMillis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isAccessibilityServiceEnabled:member(1)",
              "docComment": "/**\n * Query whether Accessibility Service is currently enabled.\n *\n * Returns a promise which resolves to a boolean. The result is `true` when any service is enabled and `false` otherwise.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAccessibilityServiceEnabled(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isAccessibilityServiceEnabled"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isBoldTextEnabled:member",
              "docComment": "/**\n * Query whether bold text is currently enabled.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBoldTextEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isBoldTextEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isGrayscaleEnabled:member",
              "docComment": "/**\n * Query whether grayscale is currently enabled.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGrayscaleEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isGrayscaleEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isInvertColorsEnabled:member",
              "docComment": "/**\n * Query whether invert colors is currently enabled.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isInvertColorsEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isInvertColorsEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isReduceMotionEnabled:member",
              "docComment": "/**\n * Query whether reduce motion is currently enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isReduceMotionEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isReduceMotionEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isReduceTransparencyEnabled:member",
              "docComment": "/**\n * Query whether reduce transparency is currently enabled.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isReduceTransparencyEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isReduceTransparencyEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#isScreenReaderEnabled:member",
              "docComment": "/**\n * Query whether a screen reader is currently enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isScreenReaderEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isScreenReaderEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#prefersCrossFadeTransitions:member(1)",
              "docComment": "/**\n * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.\n *\n * Returns a promise which resolves to a boolean. The result is `true` when prefer cross-fade transitions is enabled and `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefersCrossFadeTransitions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "prefersCrossFadeTransitions"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#sendAccessibilityEvent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendAccessibilityEvent: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    handle: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>,\n    eventType: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityEventTypes",
                  "canonicalReference": "react-native!AccessibilityEventTypes:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendAccessibilityEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityInfoStatic#setAccessibilityFocus:member",
              "docComment": "/**\n * Set accessibility focus to a react component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAccessibilityFocus: "
                },
                {
                  "kind": "Content",
                  "text": "(reactTag: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setAccessibilityFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use AccessibilityProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityProperties = "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use AccessibilityPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityPropsAndroid",
              "canonicalReference": "react-native!AccessibilityPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use AccessibilityPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityPropsIOS",
              "canonicalReference": "react-native!AccessibilityPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/accessibility#accessibility-properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityPropsAndroid",
              "canonicalReference": "react-native!AccessibilityPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityPropsIOS",
              "canonicalReference": "react-native!AccessibilityPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-busy\":member",
              "docComment": "/**\n * alias for accessibilityState\n *\n * see https://reactnative.dev/docs/accessibility#accessibilitystate\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-busy'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-busy\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-checked\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-checked'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | 'mixed' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-checked\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-disabled\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-disabled'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-disabled\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-expanded\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-expanded'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-expanded\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-hidden\":member",
              "docComment": "/**\n * A value indicating whether the accessibility elements contained within this accessibility element are hidden.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-hidden'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-hidden\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-label\":member",
              "docComment": "/**\n * Alias for accessibilityLabel https://reactnative.dev/docs/view#accessibilitylabel https://github.com/facebook/react-native/issues/34424\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-label'?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-label\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-modal\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-modal'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-modal\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-selected\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-selected'?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-selected\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-valuemax\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-valuemax'?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityValue",
                  "canonicalReference": "react-native!AccessibilityValue:interface"
                },
                {
                  "kind": "Content",
                  "text": "['max'] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-valuemax\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-valuemin\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-valuemin'?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityValue",
                  "canonicalReference": "react-native!AccessibilityValue:interface"
                },
                {
                  "kind": "Content",
                  "text": "['min'] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-valuemin\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-valuenow\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-valuenow'?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityValue",
                  "canonicalReference": "react-native!AccessibilityValue:interface"
                },
                {
                  "kind": "Content",
                  "text": "['now'] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-valuenow\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#\"aria-valuetext\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-valuetext'?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityValue",
                  "canonicalReference": "react-native!AccessibilityValue:interface"
                },
                {
                  "kind": "Content",
                  "text": "['text'] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-valuetext\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityActions:member",
              "docComment": "/**\n * Provides an array of custom actions available for accessibility.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityActions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityActionInfo",
                  "canonicalReference": "react-native!AccessibilityActionInfo:type"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityActions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityHint:member",
              "docComment": "/**\n * An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityHint?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityLabel:member",
              "docComment": "/**\n * Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityRole:member",
              "docComment": "/**\n * Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityRole?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityRole",
                  "canonicalReference": "react-native!AccessibilityRole:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityRole",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityState:member",
              "docComment": "/**\n * Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityState?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityState",
                  "canonicalReference": "react-native!AccessibilityState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessibilityValue:member",
              "docComment": "/**\n * Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars, it contains range information (minimum, current, and maximum).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityValue?: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityValue",
                  "canonicalReference": "react-native!AccessibilityValue:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#accessible:member",
              "docComment": "/**\n * When true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#importantForAccessibility:member",
              "docComment": "/**\n * [Android] Controlling if a view fires accessibility events and if it is reported to accessibility services.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "importantForAccessibility?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ('auto' | 'yes' | 'no' | 'no-hide-descendants')\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "importantForAccessibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#onAccessibilityAction:member",
              "docComment": "/**\n * When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAccessibilityAction?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "AccessibilityActionEvent",
                  "canonicalReference": "react-native!AccessibilityActionEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onAccessibilityAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityProps#role:member",
              "docComment": "/**\n * Indicates to accessibility services to treat UI component like a specific role.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Reference",
                  "text": "Role",
                  "canonicalReference": "react-native!Role:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsAndroid#\"aria-labelledby\":member",
              "docComment": "/**\n * Identifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-labelledby'?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-labelledby\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsAndroid#\"aria-live\":member",
              "docComment": "/**\n * Indicates to accessibility services whether the user should be notified when this view changes. Works for Android API >= 19 only.\n *\n * @platform android\n *\n * See https://reactnative.dev/docs/view#accessibilityliveregion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-live'?: "
                },
                {
                  "kind": "Content",
                  "text": "('polite' | 'assertive' | 'off') | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"aria-live\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsAndroid#accessibilityLabelledBy:member",
              "docComment": "/**\n * Identifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsAndroid#accessibilityLiveRegion:member",
              "docComment": "/**\n * Indicates to accessibility services whether the user should be notified when this view changes. Works for Android API >= 19 only.\n *\n * @platform android\n *\n * See https://reactnative.dev/docs/view#accessibilityliveregion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityLiveRegion?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'polite' | 'assertive' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityLiveRegion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsAndroid#importantForAccessibility:member",
              "docComment": "/**\n * Controls how view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n *\n * Possible values: 'auto' - The system determines whether the view is important for accessibility - default (recommended). 'yes' - The view is important for accessibility. 'no' - The view is not important for accessibility. 'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "importantForAccessibility?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'auto'\n    | 'yes'\n    | 'no'\n    | 'no-hide-descendants'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "importantForAccessibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#accessibilityElementsHidden:member",
              "docComment": "/**\n * A Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden to the screen reader.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityElementsHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityElementsHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#accessibilityIgnoresInvertColors:member",
              "docComment": "/**\n * https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityIgnoresInvertColors?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityIgnoresInvertColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#accessibilityLanguage:member",
              "docComment": "/**\n * By using the accessibilityLanguage property, the screen reader will understand which language to use while reading the element's label, value and hint. The provided string value must follow the BCP 47 specification (https://www.rfc-editor.org/info/bcp47). https://reactnative.dev/docs/accessibility#accessibilitylanguage-ios  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityLanguage?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityLanguage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#accessibilityViewIsModal:member",
              "docComment": "/**\n * A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityViewIsModal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessibilityViewIsModal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#onAccessibilityEscape:member",
              "docComment": "/**\n * When accessible is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAccessibilityEscape?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onAccessibilityEscape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#onAccessibilityTap:member",
              "docComment": "/**\n * When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAccessibilityTap?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onAccessibilityTap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityPropsIOS#onMagicTap:member",
              "docComment": "/**\n * When accessible is true, the system will invoke this function when the user performs the magic tap gesture.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMagicTap?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMagicTap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AccessibilityRole:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AccessibilityRole =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'none'\n  | 'button'\n  | 'togglebutton'\n  | 'link'\n  | 'search'\n  | 'image'\n  | 'keyboardkey'\n  | 'text'\n  | 'adjustable'\n  | 'imagebutton'\n  | 'header'\n  | 'summary'\n  | 'alert'\n  | 'checkbox'\n  | 'combobox'\n  | 'menu'\n  | 'menubar'\n  | 'menuitem'\n  | 'progressbar'\n  | 'radio'\n  | 'radiogroup'\n  | 'scrollbar'\n  | 'spinbutton'\n  | 'switch'\n  | 'tab'\n  | 'tabbar'\n  | 'tablist'\n  | 'timer'\n  | 'list'\n  | 'toolbar'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityRole",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityState "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityState#busy:member",
              "docComment": "/**\n * When present, informs accessible tools if the element is busy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "busy?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "busy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityState#checked:member",
              "docComment": "/**\n * For items like Checkboxes and Toggle switches, reports their state to accessible tools\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | 'mixed' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityState#disabled:member",
              "docComment": "/**\n * When true, informs accessible tools if the element is disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityState#expanded:member",
              "docComment": "/**\n * When present, informs accessible tools the element is expanded or collapsed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityState#selected:member",
              "docComment": "/**\n * When true, informs accessible tools if the element is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AccessibilityValue:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AccessibilityValue "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "AccessibilityValue",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityValue#max:member",
              "docComment": "/**\n * The maximum value of this component's range. (should be an integer)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityValue#min:member",
              "docComment": "/**\n * The minimum value of this component's range. (should be an integer)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityValue#now:member",
              "docComment": "/**\n * The current value of this component's range. (should be an integer)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "now?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "now",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AccessibilityValue#text:member",
              "docComment": "/**\n * A textual description of this component's value. (will override minimum, current, and maximum if set)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ActionSheetIOS:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ActionSheetIOS = "
            },
            {
              "kind": "Reference",
              "text": "ActionSheetIOSStatic",
              "canonicalReference": "react-native!ActionSheetIOSStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ActionSheetIOS/ActionSheetIOS.d.ts",
          "releaseTag": "Public",
          "name": "ActionSheetIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ActionSheetIOS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ActionSheetIOS: "
            },
            {
              "kind": "Reference",
              "text": "ActionSheetIOSStatic",
              "canonicalReference": "react-native!ActionSheetIOSStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/ActionSheetIOS/ActionSheetIOS.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ActionSheetIOS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ActionSheetIOSOptions:interface",
          "docComment": "/**\n * @see: https://reactnative.dev/docs/actionsheetios#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActionSheetIOSOptions "
            }
          ],
          "fileUrlPath": "Libraries/ActionSheetIOS/ActionSheetIOS.d.ts",
          "releaseTag": "Public",
          "name": "ActionSheetIOSOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#anchor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anchor?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anchor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#cancelButtonIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelButtonIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cancelButtonIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#cancelButtonTintColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelButtonTintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ProcessedColorValue",
                  "canonicalReference": "react-native!ProcessedColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cancelButtonTintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#destructiveButtonIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destructiveButtonIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number | number[] | undefined | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "destructiveButtonIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#disabledButtonIndices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabledButtonIndices?: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabledButtonIndices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#tintColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ProcessedColorValue",
                  "canonicalReference": "react-native!ProcessedColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSOptions#userInterfaceStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userInterfaceStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'light' | 'dark' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userInterfaceStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ActionSheetIOSStatic:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/actionsheetios#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActionSheetIOSStatic "
            }
          ],
          "fileUrlPath": "Libraries/ActionSheetIOS/ActionSheetIOS.d.ts",
          "releaseTag": "Public",
          "name": "ActionSheetIOSStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSStatic#dismissActionSheet:member",
              "docComment": "/**\n * Dismisses the most upper iOS action sheet presented, if no action sheet is present a warning is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissActionSheet: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dismissActionSheet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSStatic#showActionSheetWithOptions:member",
              "docComment": "/**\n * Display an iOS action sheet. The `options` object must contain one or more of: - `options` (array of strings) - a list of button titles (required) - `cancelButtonIndex` (int) - index of cancel button in `options` - `destructiveButtonIndex` (int) - index of destructive button in `options` - `title` (string) - a title to show above the action sheet - `message` (string) - a message to show below the title\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showActionSheetWithOptions: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    options: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionSheetIOSOptions",
                  "canonicalReference": "react-native!ActionSheetIOSOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    callback: (buttonIndex: number) => void,\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "showActionSheetWithOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActionSheetIOSStatic#showShareActionSheetWithOptions:member",
              "docComment": "/**\n * Display the iOS share sheet. The `options` object should contain one or both of `message` and `url` and can additionally have a `subject` or `excludedActivityTypes`:\n *\n * - `url` (string) - a URL to share - `message` (string) - a message to share - `subject` (string) - a subject for the message - `excludedActivityTypes` (array) - the activities to exclude from the ActionSheet\n *\n * NOTE: if `url` points to a local file, or is a base64-encoded uri, the file it points to will be loaded and shared directly. In this way, you can share images, videos, PDF files, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showShareActionSheetWithOptions: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    options: "
                },
                {
                  "kind": "Reference",
                  "text": "ShareActionSheetIOSOptions",
                  "canonicalReference": "react-native!ShareActionSheetIOSOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    failureCallback: (error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void,\n    successCallback: (success: boolean, method: string) => void,\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "showShareActionSheetWithOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ActivityIndicator:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class ActivityIndicator extends "
            },
            {
              "kind": "Reference",
              "text": "ActivityIndicatorBase",
              "canonicalReference": "react-native!ActivityIndicatorBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ActivityIndicator/ActivityIndicator.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ActivityIndicator",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ActivityIndicatorBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ActivityIndicatorBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "ActivityIndicatorComponent",
              "canonicalReference": "react-native!ActivityIndicatorComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/ActivityIndicator/ActivityIndicator.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ActivityIndicatorBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ActivityIndicatorComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ActivityIndicatorComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ActivityIndicatorProps",
              "canonicalReference": "react-native!ActivityIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ActivityIndicator/ActivityIndicator.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ActivityIndicatorComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ActivityIndicatorIOSProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ActivityIndicatorIOSProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ActivityIndicatorIOSProperties = "
            },
            {
              "kind": "Reference",
              "text": "ActivityIndicatorIOSProps",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ActivityIndicatorIOSProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ActivityIndicatorIOSProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/activityindicatorios#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActivityIndicatorIOSProps extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ActivityIndicator/ActivityIndicator.d.ts",
          "releaseTag": "Public",
          "name": "ActivityIndicatorIOSProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#animating:member",
              "docComment": "/**\n * Whether to show the indicator (true, the default) or hide it (false).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animating?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#color:member",
              "docComment": "/**\n * The foreground color of the spinner (default is gray).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#hidesWhenStopped:member",
              "docComment": "/**\n * Whether the indicator should hide when not animating (true by default).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidesWhenStopped?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hidesWhenStopped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#onLayout:member",
              "docComment": "/**\n * Invoked on mount and layout changes with\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayout?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutChangeEvent",
                  "canonicalReference": "react-native!LayoutChangeEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#size:member",
              "docComment": "/**\n * Size of the indicator. Small has a height of 20, large has a height of 36.\n *\n * enum('small', 'large')\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "'small' | 'large' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorIOSProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ActivityIndicatorProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ActivityIndicatorProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ActivityIndicatorProperties = "
            },
            {
              "kind": "Reference",
              "text": "ActivityIndicatorProps",
              "canonicalReference": "react-native!ActivityIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ActivityIndicatorProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ActivityIndicatorProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/activityindicator#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActivityIndicatorProps extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ActivityIndicator/ActivityIndicator.d.ts",
          "releaseTag": "Public",
          "name": "ActivityIndicatorProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorProps#animating:member",
              "docComment": "/**\n * Whether to show the indicator (true, the default) or hide it (false).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animating?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorProps#color:member",
              "docComment": "/**\n * The foreground color of the spinner (default is gray).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorProps#hidesWhenStopped:member",
              "docComment": "/**\n * Whether the indicator should hide when not animating (true by default).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidesWhenStopped?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hidesWhenStopped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorProps#size:member",
              "docComment": "/**\n * Size of the indicator. Small has a height of 20, large has a height of 36.\n *\n * enum('small', 'large')\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number | 'small' | 'large' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ActivityIndicatorProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Alert:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Alert = "
            },
            {
              "kind": "Reference",
              "text": "AlertStatic",
              "canonicalReference": "react-native!AlertStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "releaseTag": "Public",
          "name": "Alert",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Alert:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Alert: "
            },
            {
              "kind": "Reference",
              "text": "AlertStatic",
              "canonicalReference": "react-native!AlertStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Alert",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AlertButton:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/alert#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AlertButton "
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "releaseTag": "Public",
          "name": "AlertButton",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertButton#isPreferred:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPreferred?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isPreferred",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertButton#onPress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((value?: string) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertButton#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Content",
                  "text": "'default' | 'cancel' | 'destructive' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertButton#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AlertOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface AlertOptions "
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "releaseTag": "Public",
          "name": "AlertOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertOptions#cancelable:member",
              "docComment": "/**\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cancelable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertOptions#onDismiss:member",
              "docComment": "/**\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertOptions#userInterfaceStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userInterfaceStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'unspecified' | 'light' | 'dark' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userInterfaceStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AlertStatic:interface",
          "docComment": "/**\n * Launches an alert dialog with the specified title and message.\n *\n * Optionally provide a list of buttons. Tapping any button will fire the respective onPress callback and dismiss the alert. By default, the only button will be an 'OK' button.\n *\n * This is an API that works both on iOS and Android and can show static alerts. On iOS, you can show an alert that prompts the user to enter some information.\n *\n * ## iOS\n *\n * On iOS you can specify any number of buttons. Each button can optionally specify a style, which is one of 'default', 'cancel' or 'destructive'.\n *\n * ## Android\n *\n * On Android at most three buttons can be specified. Android has a concept of a neutral, negative and a positive button:\n *\n * - If you specify one button, it will be the 'positive' one (such as 'OK') - Two buttons mean 'negative', 'positive' (such as 'Cancel', 'OK') - Three buttons mean 'neutral', 'negative', 'positive' (such as 'Later', 'Cancel', 'OK')\n * ```\n * // Works on both iOS and Android\n * Alert.alert(\n *   'Alert Title',\n *   'My Alert Msg',\n *   [\n *     {text: 'Ask me later', onPress: () => console.log('Ask me later pressed')},\n *     {text: 'Cancel', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},\n *     {text: 'OK', onPress: () => console.log('OK Pressed')},\n *   ]\n * )\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AlertStatic "
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "releaseTag": "Public",
          "name": "AlertStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertStatic#alert:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alert: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    title: string,\n    message?: string,\n    buttons?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlertButton",
                  "canonicalReference": "react-native!AlertButton:interface"
                },
                {
                  "kind": "Content",
                  "text": "[],\n    options?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlertOptions",
                  "canonicalReference": "react-native!AlertOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "alert",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AlertStatic#prompt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prompt: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    title: string,\n    message?: string,\n    callbackOrButtons?: ((text: string) => void) | "
                },
                {
                  "kind": "Reference",
                  "text": "AlertButton",
                  "canonicalReference": "react-native!AlertButton:interface"
                },
                {
                  "kind": "Content",
                  "text": "[],\n    type?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlertType",
                  "canonicalReference": "react-native!AlertType:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    defaultValue?: string,\n    keyboardType?: string,\n    options?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlertOptions",
                  "canonicalReference": "react-native!AlertOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prompt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AlertType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AlertType =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Alert/Alert.d.ts",
          "releaseTag": "Public",
          "name": "AlertType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AnimatableNumericValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AnimatableNumericValue = "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "Animated.AnimatedNode",
              "canonicalReference": "react-native!Animated.AnimatedNode:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "AnimatableNumericValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AnimatableStringValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type AnimatableStringValue = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Animated.AnimatedNode",
              "canonicalReference": "react-native!Animated.AnimatedNode:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "AnimatableStringValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!Animated:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export namespace Animated "
            }
          ],
          "fileUrlPath": "Libraries/Animated/Animated.d.ts",
          "releaseTag": "Public",
          "name": "Animated",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.add:function(1)",
              "docComment": "/**\n * Creates a new Animated value composed from two Animated values added together.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function add<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    b: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedAddition",
                  "canonicalReference": "react-native!Animated.AnimatedAddition:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.Animated:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class Animated "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "Animated",
              "preserveMemberOrder": false,
              "members": [],
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedAddition:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedAddition<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedAddition",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedColor:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedColor extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedWithChildren",
                  "canonicalReference": "react-native!Animated.AnimatedWithChildren:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnimatedColor",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "react-native!Animated.AnimatedColor:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnimatedColor` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(\n      valueIn?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "RgbaValue",
                      "canonicalReference": "react-native!Animated.RgbaValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | "
                    },
                    {
                      "kind": "Reference",
                      "text": "RgbaAnimatedValue",
                      "canonicalReference": "react-native!Animated.RgbaAnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | "
                    },
                    {
                      "kind": "Reference",
                      "text": "ColorValue",
                      "canonicalReference": "react-native!ColorValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | null"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n      config?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedConfig",
                      "canonicalReference": "react-native!Animated.AnimatedConfig:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | null"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n    );"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "valueIn",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 7
                      },
                      "isOptional": true
                    },
                    {
                      "parameterName": "config",
                      "parameterTypeTokenRange": {
                        "startIndex": 8,
                        "endIndex": 10
                      },
                      "isOptional": true
                    }
                  ]
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#a:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "a: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "a",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#addListener:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "addListener: "
                    },
                    {
                      "kind": "Content",
                      "text": "(callback: (value: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ColorValue",
                      "canonicalReference": "react-native!ColorValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => unknown) => string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "addListener",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#b:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "b: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "b",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#extractOffset:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extractOffset: "
                    },
                    {
                      "kind": "Content",
                      "text": "() => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "extractOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#flattenOffset:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "flattenOffset: "
                    },
                    {
                      "kind": "Content",
                      "text": "() => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "flattenOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#g:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "g: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "g",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#nativeColor:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "nativeColor: "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "nativeColor",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#r:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "r: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "r",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#removeAllListeners:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeAllListeners: "
                    },
                    {
                      "kind": "Content",
                      "text": "() => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "removeAllListeners",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#removeListener:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeListener: "
                    },
                    {
                      "kind": "Content",
                      "text": "(id: string) => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "removeListener",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#resetAnimation:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "resetAnimation: "
                    },
                    {
                      "kind": "Content",
                      "text": "(callback: (value: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ColorValue",
                      "canonicalReference": "react-native!ColorValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => unknown) => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "resetAnimation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#setOffset:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setOffset: "
                    },
                    {
                      "kind": "Content",
                      "text": "(offset: "
                    },
                    {
                      "kind": "Reference",
                      "text": "RgbaValue",
                      "canonicalReference": "react-native!Animated.RgbaValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "setOffset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#setValue:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setValue: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: "
                    },
                    {
                      "kind": "Reference",
                      "text": "RgbaValue",
                      "canonicalReference": "react-native!Animated.RgbaValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | "
                    },
                    {
                      "kind": "Reference",
                      "text": "ColorValue",
                      "canonicalReference": "react-native!ColorValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "setValue",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.AnimatedColor#stopAnimation:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stopAnimation: "
                    },
                    {
                      "kind": "Content",
                      "text": "(callback: (value: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ColorValue",
                      "canonicalReference": "react-native!ColorValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => unknown) => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "stopAnimation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.AnimatedComponent:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface AnimatedComponent<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ">\n    extends "
                },
                {
                  "kind": "Reference",
                  "text": "React.FC",
                  "canonicalReference": "@types/react!React.FC:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedProps",
                  "canonicalReference": "react-native!Animated.AnimatedProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentPropsWithRef",
                  "canonicalReference": "@types/react!React.ComponentPropsWithRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "AnimatedComponent",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRanges": [
                {
                  "startIndex": 4,
                  "endIndex": 10
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.AnimatedComponentOptions:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type AnimatedComponentOptions = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    collapsable?: boolean | undefined;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimatedComponentOptions",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.AnimatedConfig:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AnimatedConfig = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    readonly useNativeDriver: boolean;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimatedConfig",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedDiffClamp:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedDiffClamp<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedDiffClamp",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedDivision:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedDivision<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedDivision",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedInterpolation:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedInterpolation<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedWithChildren",
                  "canonicalReference": "react-native!Animated.AnimatedWithChildren:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedInterpolation",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation#interpolate:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "interpolate(\n      config: "
                    },
                    {
                      "kind": "Reference",
                      "text": "InterpolationConfigType",
                      "canonicalReference": "react-native!Animated.InterpolationConfigType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n    ): "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedInterpolation",
                      "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                    },
                    {
                      "kind": "Content",
                      "text": "<OutputT>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "config",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "interpolate"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedModulo:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedModulo<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedModulo",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedMultiplication:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedMultiplication<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedMultiplication",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedNode:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedNode "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnimatedNode",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.AnimatedNode#addListener:member(1)",
                  "docComment": "/**\n * Adds an asynchronous listener to the value so you can observe updates from animations. This is useful because there is no way to synchronously read the value because it might be driven natively.\n *\n * See https://reactnative.dev/docs/animatedvalue.html#addlistener\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "addListener(callback: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: any) => any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "addListener"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.AnimatedNode#hasListeners:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "hasListeners(): "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "hasListeners"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.AnimatedNode#removeAllListeners:member(1)",
                  "docComment": "/**\n * Remove all registered listeners.\n *\n * See https://reactnative.dev/docs/animatedvalue.html#removealllisteners\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeAllListeners(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "removeAllListeners"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.AnimatedNode#removeListener:member(1)",
                  "docComment": "/**\n * Unregister a listener. The `id` param shall match the identifier previously returned by `addListener()`.\n *\n * See https://reactnative.dev/docs/animatedvalue.html#removelistener\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeListener(id: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "id",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "removeListener"
                }
              ],
              "implementsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.AnimatedProps:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type AnimatedProps<T> = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    [key in keyof T]: key extends "
                },
                {
                  "kind": "Reference",
                  "text": "NonAnimatedProps",
                  "canonicalReference": "react-native!Animated.NonAnimatedProps:type"
                },
                {
                  "kind": "Content",
                  "text": "\n      ? key extends 'ref'\n        ? "
                },
                {
                  "kind": "Reference",
                  "text": "TAugmentRef",
                  "canonicalReference": "react-native!Animated.TAugmentRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<T[key]>\n        : T[key]\n      : "
                },
                {
                  "kind": "Reference",
                  "text": "WithAnimatedValue",
                  "canonicalReference": "react-native!Animated.WithAnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": "<T[key]>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimatedProps",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedSubtraction:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedSubtraction<\n    OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isAbstract": false,
              "name": "AnimatedSubtraction",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.AnimatedValue:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AnimatedValue = "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "react-native!Animated.Value:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimatedValue",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.AnimatedValueXY:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AnimatedValueXY = "
                },
                {
                  "kind": "Reference",
                  "text": "ValueXY",
                  "canonicalReference": "react-native!Animated.ValueXY:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AnimatedValueXY",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.AnimatedWithChildren:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class AnimatedWithChildren extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedNode",
                  "canonicalReference": "react-native!Animated.AnimatedNode:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnimatedWithChildren",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.Animation:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Animation = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    start(\n      fromValue: number,\n      onUpdate: (value: number) => void,\n      onEnd: "
                },
                {
                  "kind": "Reference",
                  "text": "EndCallback",
                  "canonicalReference": "react-native!Animated.EndCallback:type"
                },
                {
                  "kind": "Content",
                  "text": " | null,\n      previousAnimation: "
                },
                {
                  "kind": "Reference",
                  "text": "Animation",
                  "canonicalReference": "react-native!Animated.Animation:type"
                },
                {
                  "kind": "Content",
                  "text": " | null,\n      animatedValue: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    ): void;\n    stop(): void;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Animation",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.AnimationConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface AnimationConfig "
                }
              ],
              "releaseTag": "Public",
              "name": "AnimationConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.AnimationConfig#isInteraction:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "isInteraction?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "isInteraction",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.AnimationConfig#useNativeDriver:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "useNativeDriver: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "useNativeDriver",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.Builtin:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Builtin = "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Builtin",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.ComponentProps:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type ComponentProps<T> = "
                },
                {
                  "kind": "Content",
                  "text": "T extends\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<infer P>\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.Component",
                  "canonicalReference": "@types/react!React.Component:class"
                },
                {
                  "kind": "Content",
                  "text": "<infer P>\n    ? P\n    : never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ComponentProps",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.CompositeAnimation:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface CompositeAnimation "
                }
              ],
              "releaseTag": "Public",
              "name": "CompositeAnimation",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.CompositeAnimation#reset:member",
                  "docComment": "/**\n * Stops any running animation and resets the value to its original.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "reset: "
                    },
                    {
                      "kind": "Content",
                      "text": "() => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "reset",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.CompositeAnimation#start:member",
                  "docComment": "/**\n * Animations are started by calling start() on your animation. start() takes a completion callback that will be called when the animation is done or when the animation is done because stop() was called on it before it could finish.\n *\n * @param callback - Optional function that will be called after the animation finished running normally or when the animation is done because stop() was called on it before it could finish\n *\n * @example\n *\n * Animated.timing({}).start(({ finished }) => { // completion callback });\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "start: "
                    },
                    {
                      "kind": "Content",
                      "text": "(callback?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "EndCallback",
                      "canonicalReference": "react-native!Animated.EndCallback:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "start",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.CompositeAnimation#stop:member",
                  "docComment": "/**\n * Stops any running animation.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stop: "
                    },
                    {
                      "kind": "Content",
                      "text": "() => void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "stop",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.createAnimatedComponent:function(1)",
              "docComment": "/**\n * Make any React component Animatable. Used to create `Animated.View`, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function createAnimatedComponent<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    component: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ",\n    options?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponentOptions",
                  "canonicalReference": "react-native!Animated.AnimatedComponentOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponent",
                  "canonicalReference": "react-native!Animated.AnimatedComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "createAnimatedComponent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.decay:function(1)",
              "docComment": "/**\n * Animates a value from an initial velocity to zero based on a decay coefficient.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function decay(\n    value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValueXY",
                  "canonicalReference": "react-native!Animated.AnimatedValueXY:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config: "
                },
                {
                  "kind": "Reference",
                  "text": "DecayAnimationConfig",
                  "canonicalReference": "react-native!Animated.DecayAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "decay"
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.DecayAnimationConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface DecayAnimationConfig extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationConfig",
                  "canonicalReference": "react-native!Animated.AnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "DecayAnimationConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.DecayAnimationConfig#deceleration:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "deceleration?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "deceleration",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.DecayAnimationConfig#velocity:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "velocity: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | {x: number; y: number}"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "velocity",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.delay:function(1)",
              "docComment": "/**\n * Starts an animation after the given delay.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function delay(time: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "time",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delay"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.diffClamp:function(1)",
              "docComment": "/**\n * Create a new Animated value that is limited between 2 values. It uses the difference between the last value so even if the value is far from the bounds it will start changing when the value starts getting closer again. (`value = clamp(value + diff, min, max)`).\n *\n * This is useful with scroll events, for example, to show the navbar when scrolling up and to hide it when scrolling down.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function diffClamp<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedDiffClamp",
                  "canonicalReference": "react-native!Animated.AnimatedDiffClamp:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "diffClamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.divide:function(1)",
              "docComment": "/**\n * Creates a new Animated value composed by dividing the first Animated value by the second Animated value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function divide<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    b: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedDivision",
                  "canonicalReference": "react-native!Animated.AnimatedDivision:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "divide"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.EndCallback:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type EndCallback = "
                },
                {
                  "kind": "Content",
                  "text": "(result: "
                },
                {
                  "kind": "Reference",
                  "text": "EndResult",
                  "canonicalReference": "react-native!Animated.EndResult:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "EndCallback",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.EndResult:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type EndResult = "
                },
                {
                  "kind": "Content",
                  "text": "{finished: boolean}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "EndResult",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.event:function(1)",
              "docComment": "/**\n * Takes an array of mappings and extracts values from each arg accordingly, then calls `setValue` on the mapped outputs. e.g.\n * ```javascript\n *  onScroll={Animated.event(\n *    [{nativeEvent: {contentOffset: {x: this._scrollX}}}]\n *    {listener},          // Optional async listener\n *  )\n *  ...\n *  onPanResponderMove: Animated.event([\n *    null,                // raw event arg ignored\n *    {dx: this._panX},    // gestureState arg\n *  ]),\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function event<T>(\n    argMapping: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Mapping",
                  "canonicalReference": "react-native!Animated.Mapping:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventConfig",
                  "canonicalReference": "react-native!Animated.EventConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "(...args: any[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "argMapping",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "event"
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.EventConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface EventConfig<T> "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "EventConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.EventConfig#listener:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "listener?: "
                    },
                    {
                      "kind": "Content",
                      "text": "((event: "
                    },
                    {
                      "kind": "Reference",
                      "text": "NativeSyntheticEvent",
                      "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<T>) => void) | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "listener",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.EventConfig#useNativeDriver:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "useNativeDriver: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "useNativeDriver",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.ExtrapolateType:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ExtrapolateType = "
                },
                {
                  "kind": "Content",
                  "text": "'extend' | 'identity' | 'clamp'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ExtrapolateType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.FlatList:class",
              "docComment": "/**\n * FlatList and SectionList infer generic Type defined under their `data` and `section` props.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export class FlatList<ItemT = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "> extends "
                },
                {
                  "kind": "Reference",
                  "text": "FlatListComponent",
                  "canonicalReference": "react-native!FlatListComponent:class"
                },
                {
                  "kind": "Content",
                  "text": "<\n    ItemT,\n    "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedProps",
                  "canonicalReference": "react-native!Animated.AnimatedProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FlatListProps",
                  "canonicalReference": "react-native!FlatListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT>>\n  >"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "ItemT",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "isAbstract": false,
              "name": "FlatList",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!Animated.Image:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Image: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponent",
                  "canonicalReference": "react-native!Animated.AnimatedComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "_Image",
                  "canonicalReference": "react-native!_Image:var"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Image",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.InterpolationConfigType:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type InterpolationConfigType = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    inputRange: number[];\n    outputRange: number[] | string[];\n    easing?: ((input: number) => number) | undefined;\n    extrapolate?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtrapolateType",
                  "canonicalReference": "react-native!Animated.ExtrapolateType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined;\n    extrapolateLeft?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtrapolateType",
                  "canonicalReference": "react-native!Animated.ExtrapolateType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined;\n    extrapolateRight?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtrapolateType",
                  "canonicalReference": "react-native!Animated.ExtrapolateType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "InterpolationConfigType",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.LegacyRef:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type LegacyRef<C> = "
                },
                {
                  "kind": "Content",
                  "text": "{getNode(): C}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "LegacyRef",
              "typeParameters": [
                {
                  "typeParameterName": "C",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.loop:function(1)",
              "docComment": "/**\n * Loops a given animation continuously, so that each time it reaches the end, it resets and begins again from the start. Can specify number of times to loop using the key 'iterations' in the config. Will loop without blocking the UI thread if the child animation is set to 'useNativeDriver'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function loop(\n    animation: "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoopAnimationConfig",
                  "canonicalReference": "react-native!Animated.LoopAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "animation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "loop"
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.LoopAnimationConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface LoopAnimationConfig "
                }
              ],
              "releaseTag": "Public",
              "name": "LoopAnimationConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.LoopAnimationConfig#iterations:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "iterations?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "iterations",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.LoopAnimationConfig#resetBeforeIteration:member",
                  "docComment": "/**\n * Defaults to `true`\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "resetBeforeIteration?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "resetBeforeIteration",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.Mapping:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mapping = "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Mapping",
                  "canonicalReference": "react-native!Animated.Mapping:type"
                },
                {
                  "kind": "Content",
                  "text": "} | "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mapping",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.modulo:function(1)",
              "docComment": "/**\n * Creates a new Animated value that is the (non-negative) modulo of the provided Animated value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function modulo<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    modulus: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedModulo",
                  "canonicalReference": "react-native!Animated.AnimatedModulo:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "modulus",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "modulo"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.multiply:function(1)",
              "docComment": "/**\n * Creates a new Animated value composed from two Animated values multiplied together.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function multiply<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    b: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedMultiplication",
                  "canonicalReference": "react-native!Animated.AnimatedMultiplication:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.NonAnimatedProps:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type NonAnimatedProps = "
                },
                {
                  "kind": "Content",
                  "text": "'key' | 'ref'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NonAnimatedProps",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.Nullable:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Nullable = "
                },
                {
                  "kind": "Content",
                  "text": "undefined | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Nullable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.parallel:function(1)",
              "docComment": "/**\n * Starts an array of animations all at the same time. By default, if one of the animations is stopped, they will all be stopped. You can override this with the `stopTogether` flag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function parallel(\n    animations: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParallelConfig",
                  "canonicalReference": "react-native!Animated.ParallelConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "animations",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "name": "parallel"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.ParallelConfig:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ParallelConfig = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    stopTogether?: boolean | undefined; // If one is stopped, stop all.  default: true\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ParallelConfig",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.Primitive:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Primitive = "
                },
                {
                  "kind": "Content",
                  "text": "string | number | boolean | symbol"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Primitive",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.RgbaAnimatedValue:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type RgbaAnimatedValue = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    readonly r: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    readonly g: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    readonly b: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    readonly a: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "RgbaAnimatedValue",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.RgbaValue:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type RgbaValue = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    readonly r: number;\n    readonly g: number;\n    readonly b: number;\n    readonly a: number;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "RgbaValue",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!Animated.ScrollView:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ScrollView: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponent",
                  "canonicalReference": "react-native!Animated.AnimatedComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "_ScrollView",
                  "canonicalReference": "react-native!_ScrollView:var"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "ScrollView",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.SectionList:class",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export class SectionList<\n    ItemT = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    SectionT = "
                },
                {
                  "kind": "Reference",
                  "text": "DefaultSectionT",
                  "canonicalReference": "react-native!DefaultSectionT:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  > extends "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListComponent",
                  "canonicalReference": "react-native!SectionListComponent:class"
                },
                {
                  "kind": "Content",
                  "text": "<\n    "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedProps",
                  "canonicalReference": "react-native!Animated.AnimatedProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SectionListProps",
                  "canonicalReference": "react-native!SectionListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>>\n  >"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "ItemT",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "typeParameterName": "SectionT",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "isAbstract": false,
              "name": "SectionList",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.sequence:function(1)",
              "docComment": "/**\n * Starts an array of animations in order, waiting for each to complete before starting the next. If the current running animation is stopped, no following animations will be started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function sequence(\n    animations: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "animations",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "sequence"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.spring:function(1)",
              "docComment": "/**\n * Spring animation based on Rebound and Origami. Tracks velocity state to create fluid motions as the `toValue` updates, and can be chained together.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function spring(\n    value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValueXY",
                  "canonicalReference": "react-native!Animated.AnimatedValueXY:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config: "
                },
                {
                  "kind": "Reference",
                  "text": "SpringAnimationConfig",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "spring"
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.SpringAnimationConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface SpringAnimationConfig extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationConfig",
                  "canonicalReference": "react-native!Animated.AnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "SpringAnimationConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#bounciness:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bounciness?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "bounciness",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#damping:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "damping?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "damping",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#delay:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "delay?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "delay",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#friction:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "friction?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "friction",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#mass:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "mass?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "mass",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#overshootClamping:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "overshootClamping?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "overshootClamping",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#restDisplacementThreshold:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "restDisplacementThreshold?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "restDisplacementThreshold",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#restSpeedThreshold:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "restSpeedThreshold?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "restSpeedThreshold",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#speed:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "speed?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "speed",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#stiffness:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stiffness?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "stiffness",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#tension:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "tension?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "tension",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#toValue:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toValue:\n      "
                    },
                    {
                      "kind": "Content",
                      "text": "| number\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | {x: number; y: number}\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValueXY",
                      "canonicalReference": "react-native!Animated.AnimatedValueXY:type"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "RgbaValue",
                      "canonicalReference": "react-native!Animated.RgbaValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedColor",
                      "canonicalReference": "react-native!Animated.AnimatedColor:class"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedInterpolation",
                      "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                    },
                    {
                      "kind": "Content",
                      "text": "<number>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "toValue",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 12
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.SpringAnimationConfig#velocity:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "velocity?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | {x: number; y: number} | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "velocity",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.stagger:function(1)",
              "docComment": "/**\n * Array of animations may run in parallel (overlap), but are started in sequence with successive delays. Nice for doing trailing effects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function stagger(\n    time: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    animations: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "time",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "animations",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "name": "stagger"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.subtract:function(1)",
              "docComment": "/**\n * Creates a new Animated value composed by subtracting the second Animated value from the first Animated value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function subtract<OutputT extends "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    a: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    b: "
                },
                {
                  "kind": "Reference",
                  "text": "Animated",
                  "canonicalReference": "react-native!Animated.Animated:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedSubtraction",
                  "canonicalReference": "react-native!Animated.AnimatedSubtraction:class"
                },
                {
                  "kind": "Content",
                  "text": "<OutputT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "OutputT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.TAugmentRef:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type TAugmentRef<T> = "
                },
                {
                  "kind": "Content",
                  "text": "T extends "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<infer R>\n    ? unknown extends R\n      ? never\n      : "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<R | "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyRef",
                  "canonicalReference": "react-native!Animated.LegacyRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<R>>\n    : never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "TAugmentRef",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!Animated.Text:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Text: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponent",
                  "canonicalReference": "react-native!Animated.AnimatedComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "_Text",
                  "canonicalReference": "react-native!_Text:var"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "Text",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Animated.timing:function(1)",
              "docComment": "/**\n * Animates a value along a timed easing curve. The `Easing` module has tons of pre-defined curves, or you can use your own function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timing: (\n    value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValue",
                  "canonicalReference": "react-native!Animated.AnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedValueXY",
                  "canonicalReference": "react-native!Animated.AnimatedValueXY:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    config: "
                },
                {
                  "kind": "Reference",
                  "text": "TimingAnimationConfig",
                  "canonicalReference": "react-native!Animated.TimingAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeAnimation",
                  "canonicalReference": "react-native!Animated.CompositeAnimation:interface"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "timing"
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.TimingAnimationConfig:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface TimingAnimationConfig extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationConfig",
                  "canonicalReference": "react-native!Animated.AnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "TimingAnimationConfig",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.TimingAnimationConfig#delay:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "delay?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "delay",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.TimingAnimationConfig#duration:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "duration?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "duration",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.TimingAnimationConfig#easing:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "easing?: "
                    },
                    {
                      "kind": "Content",
                      "text": "((value: number) => number) | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "easing",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!Animated.TimingAnimationConfig#toValue:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toValue:\n      "
                    },
                    {
                      "kind": "Content",
                      "text": "| number\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | {x: number; y: number}\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValueXY",
                      "canonicalReference": "react-native!Animated.AnimatedValueXY:type"
                    },
                    {
                      "kind": "Content",
                      "text": "\n      | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedInterpolation",
                      "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                    },
                    {
                      "kind": "Content",
                      "text": "<number>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "toValue",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 8
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.Value:class",
              "docComment": "/**\n * Standard value for driving animations. One `Animated.Value` can drive multiple properties in a synchronized fashion, but can only be driven by one mechanism at a time. Using a new mechanism (e.g. starting a new animation, or calling `setValue`) will stop any previous ones.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export class Value extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedWithChildren",
                  "canonicalReference": "react-native!Animated.AnimatedWithChildren:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "Value",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "react-native!Animated.Value:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `Value` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ", config?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedConfig",
                      "canonicalReference": "react-native!Animated.AnimatedConfig:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | null"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "config",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 5
                      },
                      "isOptional": true
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#addListener:member(1)",
                  "docComment": "/**\n * Adds an asynchronous listener to the value so you can observe updates from animations. This is useful because there is no way to synchronously read the value because it might be driven natively.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "addListener(callback: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ValueListenerCallback",
                      "canonicalReference": "react-native!Animated.ValueListenerCallback:type"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "addListener"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#animate:member(1)",
                  "docComment": "/**\n * Typically only used internally, but could be used by a custom Animation class.\n *\n * See https://reactnative.dev/docs/animatedvalue#animate\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "animate(animation: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Animation",
                      "canonicalReference": "react-native!Animated.Animation:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", callback?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "EndCallback",
                      "canonicalReference": "react-native!Animated.EndCallback:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | null"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "animation",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 5
                      },
                      "isOptional": true
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "animate"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#extractOffset:member(1)",
                  "docComment": "/**\n * Sets the offset value to the base value, and resets the base value to zero. The final output of the value is unchanged.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extractOffset(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "extractOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#flattenOffset:member(1)",
                  "docComment": "/**\n * Merges the offset value into the base value and resets the offset to zero. The final output of the value is unchanged.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "flattenOffset(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "flattenOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#interpolate:member(1)",
                  "docComment": "/**\n * Interpolates the value before updating the property, e.g. mapping 0-1 to 0-10.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "interpolate<OutputT extends "
                    },
                    {
                      "kind": "Content",
                      "text": "number | string"
                    },
                    {
                      "kind": "Content",
                      "text": ">(\n      config: "
                    },
                    {
                      "kind": "Reference",
                      "text": "InterpolationConfigType",
                      "canonicalReference": "react-native!Animated.InterpolationConfigType:type"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n    ): "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedInterpolation",
                      "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                    },
                    {
                      "kind": "Content",
                      "text": "<OutputT>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "typeParameters": [
                    {
                      "typeParameterName": "OutputT",
                      "constraintTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "defaultTypeTokenRange": {
                        "startIndex": 0,
                        "endIndex": 0
                      }
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "config",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "interpolate"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#removeAllListeners:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeAllListeners(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "removeAllListeners"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#removeListener:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeListener(id: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "id",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "removeListener"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#resetAnimation:member(1)",
                  "docComment": "/**\n * Stops any animation and resets the value to its original.\n *\n * See https://reactnative.dev/docs/animatedvalue#resetanimation\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "resetAnimation(callback?: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: number) => void"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": true
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "resetAnimation"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#setOffset:member(1)",
                  "docComment": "/**\n * Sets an offset that is applied on top of whatever value is set, whether via `setValue`, an animation, or `Animated.event`. Useful for compensating things like the start of a pan gesture.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setOffset(offset: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "offset",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "setOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#setValue:member(1)",
                  "docComment": "/**\n * Directly set the value. This will stop any animations running on the value and update all the bound properties.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setValue(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "setValue"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.Value#stopAnimation:member(1)",
                  "docComment": "/**\n * Stops any running animation or tracking. `callback` is invoked with the final value after stopping the animation, which is useful for updating state to match the animation position with layout.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stopAnimation(callback?: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: number) => void"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": true
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "stopAnimation"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.ValueListenerCallback:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ValueListenerCallback = "
                },
                {
                  "kind": "Content",
                  "text": "(state: {value: number}) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ValueListenerCallback",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Class",
              "canonicalReference": "react-native!Animated.ValueXY:class",
              "docComment": "/**\n * 2D Value for driving 2D animations, such as pan gestures. Almost identical API to normal `Animated.Value`, but multiplexed. Contains two regular `Animated.Value`s under the hood.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export class ValueXY extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedWithChildren",
                  "canonicalReference": "react-native!Animated.AnimatedWithChildren:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ValueXY",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "react-native!Animated.ValueXY:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ValueXY` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(\n      valueIn?: "
                    },
                    {
                      "kind": "Content",
                      "text": "{x: number | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "; y: number | "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "}"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n      config?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedConfig",
                      "canonicalReference": "react-native!Animated.AnimatedConfig:type"
                    },
                    {
                      "kind": "Content",
                      "text": " | null"
                    },
                    {
                      "kind": "Content",
                      "text": ",\n    );"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "valueIn",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 6
                      },
                      "isOptional": true
                    },
                    {
                      "parameterName": "config",
                      "parameterTypeTokenRange": {
                        "startIndex": 7,
                        "endIndex": 9
                      },
                      "isOptional": true
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#addListener:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "addListener(callback: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ValueXYListenerCallback",
                      "canonicalReference": "react-native!Animated.ValueXYListenerCallback:type"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "addListener"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#extractOffset:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "extractOffset(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "extractOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#flattenOffset:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "flattenOffset(): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "flattenOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#getLayout:member(1)",
                  "docComment": "/**\n * Converts `{x, y}` into `{left, top}` for use in style, e.g.\n * ```javascript\n *  style={this.state.anim.getLayout()}\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "getLayout(): "
                    },
                    {
                      "kind": "Content",
                      "text": "{[key: string]: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "}"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "getLayout"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#getTranslateTransform:member(1)",
                  "docComment": "/**\n * Converts `{x, y}` into a useable translation transform, e.g.\n * ```javascript\n *  style={{\n *    transform: this.state.anim.getTranslateTransform()\n *  }}\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "getTranslateTransform(): "
                    },
                    {
                      "kind": "Content",
                      "text": "[\n      {translateX: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "},\n      {translateY: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": "},\n    ]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "getTranslateTransform"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#removeListener:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "removeListener(id: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "id",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "removeListener"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#resetAnimation:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "resetAnimation(callback?: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: {x: number; y: number}) => void"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": true
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "resetAnimation"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#setOffset:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setOffset(offset: "
                    },
                    {
                      "kind": "Content",
                      "text": "{x: number; y: number}"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "offset",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "setOffset"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#setValue:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "setValue(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "{x: number; y: number}"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "setValue"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "react-native!Animated.ValueXY#stopAnimation:member(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stopAnimation(callback?: "
                    },
                    {
                      "kind": "Content",
                      "text": "(value: {x: number; y: number}) => void"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "void"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "callback",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": true
                    }
                  ],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "stopAnimation"
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.ValueXY#x:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "x: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "x",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "react-native!Animated.ValueXY#y:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "y: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnimatedValue",
                      "canonicalReference": "react-native!Animated.AnimatedValue:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "y",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.ValueXYListenerCallback:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ValueXYListenerCallback = "
                },
                {
                  "kind": "Content",
                  "text": "(value: {x: number; y: number}) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ValueXYListenerCallback",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!Animated.View:var",
              "docComment": "/**\n * Animated variants of the basic native views. Accepts Animated.Value for props and style.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "View: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedComponent",
                  "canonicalReference": "react-native!Animated.AnimatedComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "_View",
                  "canonicalReference": "react-native!_View:var"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "View",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!Animated.WithAnimatedArray:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface WithAnimatedArray<P> extends "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WithAnimatedValue",
                  "canonicalReference": "react-native!Animated.WithAnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": "<P>>"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "P",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "WithAnimatedArray",
              "preserveMemberOrder": false,
              "members": [],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 5
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.WithAnimatedObject:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type WithAnimatedObject<T> = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    [K in keyof T]: "
                },
                {
                  "kind": "Reference",
                  "text": "WithAnimatedValue",
                  "canonicalReference": "react-native!Animated.WithAnimatedValue:type"
                },
                {
                  "kind": "Content",
                  "text": "<T[K]>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "WithAnimatedObject",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Animated.WithAnimatedValue:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type WithAnimatedValue<T> = "
                },
                {
                  "kind": "Content",
                  "text": "T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Builtin",
                  "canonicalReference": "react-native!Animated.Builtin:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "react-native!Animated.Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "\n    ? T\n    : T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Primitive",
                  "canonicalReference": "react-native!Animated.Primitive:type"
                },
                {
                  "kind": "Content",
                  "text": "\n    ? T | "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "react-native!Animated.Value:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedInterpolation",
                  "canonicalReference": "react-native!Animated.AnimatedInterpolation:class"
                },
                {
                  "kind": "Content",
                  "text": "<number | string> // add `Value` and `AnimatedInterpolation` but also preserve original T\n    : T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<infer P>\n    ? "
                },
                {
                  "kind": "Reference",
                  "text": "WithAnimatedArray",
                  "canonicalReference": "react-native!Animated.WithAnimatedArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P>\n    : T extends {}\n    ? "
                },
                {
                  "kind": "Reference",
                  "text": "WithAnimatedObject",
                  "canonicalReference": "react-native!Animated.WithAnimatedObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>\n    : T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "WithAnimatedValue",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 18
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AppConfig:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AppConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n  appKey: string;\n  component?: "
            },
            {
              "kind": "Reference",
              "text": "ComponentProvider",
              "canonicalReference": "react-native!ComponentProvider:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  run?: "
            },
            {
              "kind": "Reference",
              "text": "Runnable",
              "canonicalReference": "react-native!Runnable:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "AppConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!Appearance:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export namespace Appearance "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Appearance.d.ts",
          "releaseTag": "Public",
          "name": "Appearance",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "react-native!Appearance.addChangeListener:function(1)",
              "docComment": "/**\n * Add an event handler that is fired when appearance preferences change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function addChangeListener(\n    listener: "
                },
                {
                  "kind": "Reference",
                  "text": "AppearanceListener",
                  "canonicalReference": "react-native!Appearance.AppearanceListener:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "NativeEventSubscription",
                  "canonicalReference": "react-native!NativeEventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "addChangeListener"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Appearance.AppearanceListener:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AppearanceListener = "
                },
                {
                  "kind": "Content",
                  "text": "(preferences: "
                },
                {
                  "kind": "Reference",
                  "text": "AppearancePreferences",
                  "canonicalReference": "react-native!Appearance.AppearancePreferences:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AppearanceListener",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Appearance.AppearancePreferences:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AppearancePreferences = "
                },
                {
                  "kind": "Content",
                  "text": "{\n    colorScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorSchemeName",
                  "canonicalReference": "react-native!ColorSchemeName:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AppearancePreferences",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Appearance.getColorScheme:function(1)",
              "docComment": "/**\n * Note: Although color scheme is available immediately, it may change at any time. Any rendering logic or styles that depend on this should try to call this function on every render, rather than caching the value (for example, using inline styles rather than setting a value in a `StyleSheet`).\n *\n * Example: `const colorScheme = Appearance.getColorScheme();`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getColorScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "ColorSchemeName",
                  "canonicalReference": "react-native!ColorSchemeName:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getColorScheme"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Appearance.setColorScheme:function(1)",
              "docComment": "/**\n * Set the color scheme preference. This is useful for overriding the default color scheme preference for the app. Note that this will not change the appearance of the system UI, only the appearance of the app. Only available on iOS 13+ and Android 10+.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setColorScheme(\n    scheme: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorSchemeName",
                  "canonicalReference": "react-native!ColorSchemeName:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "setColorScheme"
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!AppRegistry:namespace",
          "docComment": "/**\n * `AppRegistry` is the JS entry point to running all React Native apps. App root components should register themselves with `AppRegistry.registerComponent`, then the native system can load the bundle for the app and then actually run the app when it's ready by invoking `AppRegistry.runApplication`.\n *\n * To \"stop\" an application when a view should be destroyed, call `AppRegistry.unmountApplicationComponentAtRootTag` with the tag that was pass into `runApplication`. These should always be used as a pair.\n *\n * `AppRegistry` should be `require`d early in the `require` sequence to make sure the JS execution environment is setup before other modules are `require`d.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export namespace AppRegistry "
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "AppRegistry",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.cancelHeadlessTask:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function cancelHeadlessTask(taskId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", taskKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "taskId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "taskKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "cancelHeadlessTask"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.getAppKeys:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getAppKeys(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAppKeys"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.getRegistry:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getRegistry(): "
                },
                {
                  "kind": "Content",
                  "text": "{sections: string[]; runnables: "
                },
                {
                  "kind": "Reference",
                  "text": "Runnable",
                  "canonicalReference": "react-native!Runnable:type"
                },
                {
                  "kind": "Content",
                  "text": "[]}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getRegistry"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.getRunnable:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getRunnable(appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Runnable",
                  "canonicalReference": "react-native!Runnable:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getRunnable"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.getSectionKeys:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getSectionKeys(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSectionKeys"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.getSections:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getSections(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "Runnable",
                  "canonicalReference": "react-native!Runnable:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSections"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerCancellableHeadlessTask:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerCancellableHeadlessTask(\n    taskKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    taskProvider: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskProvider",
                  "canonicalReference": "react-native!TaskProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    taskCancelProvider: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskCancelProvider",
                  "canonicalReference": "react-native!TaskCancelProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "taskKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "taskProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "taskCancelProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "registerCancellableHeadlessTask"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerComponent:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerComponent(\n    appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    getComponentFunc: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentProvider",
                  "canonicalReference": "react-native!ComponentProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    section?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "getComponentFunc",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "section",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "registerComponent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerConfig:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "AppConfig",
                  "canonicalReference": "react-native!AppConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "registerConfig"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerHeadlessTask:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerHeadlessTask(\n    taskKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    taskProvider: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskProvider",
                  "canonicalReference": "react-native!TaskProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "taskKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "taskProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "registerHeadlessTask"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerRunnable:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerRunnable(appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", func: "
                },
                {
                  "kind": "Reference",
                  "text": "Runnable",
                  "canonicalReference": "react-native!Runnable:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "registerRunnable"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.registerSection:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function registerSection(\n    appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    component: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentProvider",
                  "canonicalReference": "react-native!ComponentProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "registerSection"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.runApplication:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function runApplication(appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", appParameters: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "appParameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "runApplication"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.setComponentProviderInstrumentationHook:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setComponentProviderInstrumentationHook(\n    hook: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentProviderInstrumentationHook",
                  "canonicalReference": "react-native!ComponentProviderInstrumentationHook:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hook",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setComponentProviderInstrumentationHook"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.setRootViewStyleProvider:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setRootViewStyleProvider(\n    provider: "
                },
                {
                  "kind": "Reference",
                  "text": "RootViewStyleProvider",
                  "canonicalReference": "react-native!RootViewStyleProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setRootViewStyleProvider"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.setSurfaceProps:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setSurfaceProps(\n    appKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    appParameters: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    displayMode?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "appKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "appParameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "displayMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "setSurfaceProps"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.setWrapperComponentProvider:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setWrapperComponentProvider(\n    provider: "
                },
                {
                  "kind": "Reference",
                  "text": "WrapperComponentProvider",
                  "canonicalReference": "react-native!WrapperComponentProvider:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setWrapperComponentProvider"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.startHeadlessTask:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function startHeadlessTask(\n    taskId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    taskKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "taskId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "taskKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "startHeadlessTask"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!AppRegistry.unmountApplicationComponentAtRootTag:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function unmountApplicationComponentAtRootTag(rootTag: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rootTag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "unmountApplicationComponentAtRootTag"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AppState:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AppState = "
            },
            {
              "kind": "Reference",
              "text": "AppStateStatic",
              "canonicalReference": "react-native!AppStateStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/AppState/AppState.d.ts",
          "releaseTag": "Public",
          "name": "AppState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!AppState:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AppState: "
            },
            {
              "kind": "Reference",
              "text": "AppStateStatic",
              "canonicalReference": "react-native!AppStateStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/AppState/AppState.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AppState",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AppStateEvent:type",
          "docComment": "/**\n * AppState can tell you if the app is in the foreground or background, and notify you when the state changes.\n *\n * AppState is frequently used to determine the intent and proper behavior when handling push notifications.\n *\n * App State Events change - This even is received when the app state has changed. focus [Android] - Received when the app gains focus (the user is interacting with the app). blur [Android] - Received when the user is not actively interacting with the app.\n *\n * App States active - The app is running in the foreground background - The app is running in the background. The user is either in another app or on the home screen inactive [iOS] - This is a transition state that happens when the app launches, is asking for permissions or when a call or SMS message is received. unknown [iOS] - Initial value until the current app state is determined extension [iOS] - The app is running as an app extension\n *\n * For more information, see Apple's documentation: https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html\n *\n * @see\n *\n * https://reactnative.dev/docs/appstate#app-states\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AppStateEvent = "
            },
            {
              "kind": "Content",
              "text": "'change' | 'memoryWarning' | 'blur' | 'focus'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/AppState/AppState.d.ts",
          "releaseTag": "Public",
          "name": "AppStateEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!AppStateStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AppStateStatic "
            }
          ],
          "fileUrlPath": "Libraries/AppState/AppState.d.ts",
          "releaseTag": "Public",
          "name": "AppStateStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!AppStateStatic#addEventListener:member(1)",
              "docComment": "/**\n * Add a handler to AppState changes by listening to the change event type and providing the handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Reference",
                  "text": "AppStateEvent",
                  "canonicalReference": "react-native!AppStateEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "AppStateStatus",
                  "canonicalReference": "react-native!AppStateStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "NativeEventSubscription",
                  "canonicalReference": "react-native!NativeEventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AppStateStatic#currentState:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentState: "
                },
                {
                  "kind": "Reference",
                  "text": "AppStateStatus",
                  "canonicalReference": "react-native!AppStateStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!AppStateStatic#isAvailable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAvailable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!AppStateStatus:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AppStateStatus =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'active'\n  | 'background'\n  | 'inactive'\n  | 'unknown'\n  | 'extension'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/AppState/AppState.d.ts",
          "releaseTag": "Public",
          "name": "AppStateStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!BackgroundPropType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type BackgroundPropType =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "RippleBackgroundPropType",
              "canonicalReference": "react-native!RippleBackgroundPropType:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "ThemeAttributeBackgroundPropType",
              "canonicalReference": "react-native!ThemeAttributeBackgroundPropType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "name": "BackgroundPropType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!BackHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BackHandler = "
            },
            {
              "kind": "Reference",
              "text": "BackHandlerStatic",
              "canonicalReference": "react-native!BackHandlerStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/BackHandler.d.ts",
          "releaseTag": "Public",
          "name": "BackHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!BackHandler:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BackHandler: "
            },
            {
              "kind": "Reference",
              "text": "BackHandlerStatic",
              "canonicalReference": "react-native!BackHandlerStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/BackHandler.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BackHandler",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!BackHandlerStatic:interface",
          "docComment": "/**\n * Detect hardware back button presses, and programmatically invoke the default back button functionality to exit the app if there are no listeners or if none of the listeners return true. The event subscriptions are called in reverse order (i.e. last registered subscription first), and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * @see\n *\n * https://reactnative.dev/docs/backhandler\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BackHandlerStatic "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/BackHandler.d.ts",
          "releaseTag": "Public",
          "name": "BackHandlerStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!BackHandlerStatic#addEventListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "BackPressEventName",
                  "canonicalReference": "react-native!BackPressEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "NativeEventSubscription",
                  "canonicalReference": "react-native!NativeEventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!BackHandlerStatic#exitApp:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exitApp(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exitApp"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!BackHandlerStatic#removeEventListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeEventListener(\n    eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "BackPressEventName",
                  "canonicalReference": "react-native!BackPressEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "removeEventListener"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!BackPressEventName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BackPressEventName = "
            },
            {
              "kind": "Content",
              "text": "'hardwareBackPress'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/BackHandler.d.ts",
          "releaseTag": "Public",
          "name": "BackPressEventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!BaseBackgroundPropType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface BaseBackgroundPropType "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "name": "BaseBackgroundPropType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!BaseBackgroundPropType#rippleRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rippleRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rippleRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!BaseBackgroundPropType#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~beginAsyncEvent:function(1)",
          "docComment": "/**\n * Marks the start of a potentially asynchronous event. The end of this event should be marked calling the `endAsyncEvent` function with the cookie returned by this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function beginAsyncEvent(eventName: "
            },
            {
              "kind": "Reference",
              "text": "EventName",
              "canonicalReference": "react-native!Systrace.EventName:type"
            },
            {
              "kind": "Content",
              "text": ", args?: "
            },
            {
              "kind": "Reference",
              "text": "EventArgs",
              "canonicalReference": "react-native!Systrace.EventArgs:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "beginAsyncEvent"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~beginEvent:function(1)",
          "docComment": "/**\n * Marks the start of a synchronous event that should end in the same stack frame. The end of this event should be marked using the `endEvent` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function beginEvent(eventName: "
            },
            {
              "kind": "Reference",
              "text": "EventName",
              "canonicalReference": "react-native!Systrace.EventName:type"
            },
            {
              "kind": "Content",
              "text": ", args?: "
            },
            {
              "kind": "Reference",
              "text": "EventArgs",
              "canonicalReference": "react-native!Systrace.EventArgs:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "beginEvent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!BlendMode:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BlendMode =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'normal'\n  | 'multiply'\n  | 'screen'\n  | 'overlay'\n  | 'darken'\n  | 'lighten'\n  | 'color-dodge'\n  | 'color-burn'\n  | 'hard-light'\n  | 'soft-light'\n  | 'difference'\n  | 'exclusion'\n  | 'hue'\n  | 'saturation'\n  | 'color'\n  | 'luminosity'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "BlendMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!BoxShadowPrimitive:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BoxShadowPrimitive = "
            },
            {
              "kind": "Content",
              "text": "{\n  offsetX: number | string;\n  offsetY: number | string;\n  color?: string | undefined;\n  blurRadius?: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | number | undefined;\n  spreadDistance?: number | string | undefined;\n  inset?: boolean | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "BoxShadowPrimitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!Button:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class Button extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "react-native!ButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Button.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Button",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ButtonProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ButtonProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ButtonProperties = "
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "react-native!ButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ButtonProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ButtonProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ButtonProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<\n    "
            },
            {
              "kind": "Reference",
              "text": "TouchableNativeFeedbackProps",
              "canonicalReference": "react-native!TouchableNativeFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TouchableOpacityProps",
              "canonicalReference": "react-native!TouchableOpacityProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    | 'accessibilityLabel'\n    | 'accessibilityState'\n    | 'hasTVPreferredFocus'\n    | 'nextFocusDown'\n    | 'nextFocusForward'\n    | 'nextFocusLeft'\n    | 'nextFocusRight'\n    | 'nextFocusUp'\n    | 'testID'\n    | 'disabled'\n    | 'onPress'\n    | 'touchSoundDisabled'\n  >"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Button.d.ts",
          "releaseTag": "Public",
          "name": "ButtonProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ButtonProps#color:member",
              "docComment": "/**\n * Color of the text (iOS), or background color of the button (Android).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ButtonProps#title:member",
              "docComment": "/**\n * Text to display inside the button. On Android the given title will be converted to the uppercased form.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Clipboard:type",
          "docComment": "/**\n * Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-clipboard/clipboard` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-clipboard/clipboard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Clipboard = "
            },
            {
              "kind": "Reference",
              "text": "ClipboardStatic",
              "canonicalReference": "react-native!ClipboardStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Clipboard/Clipboard.d.ts",
          "releaseTag": "Public",
          "name": "Clipboard",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Clipboard:var",
          "docComment": "/**\n * Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-clipboard/clipboard` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-clipboard/clipboard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Clipboard: "
            },
            {
              "kind": "Reference",
              "text": "ClipboardStatic",
              "canonicalReference": "react-native!ClipboardStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Components/Clipboard/Clipboard.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Clipboard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ClipboardStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClipboardStatic "
            }
          ],
          "fileUrlPath": "Libraries/Components/Clipboard/Clipboard.d.ts",
          "releaseTag": "Public",
          "name": "ClipboardStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ClipboardStatic#getString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getString(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getString"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ClipboardStatic#setString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setString(content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setString"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ColorSchemeName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ColorSchemeName = "
            },
            {
              "kind": "Content",
              "text": "'light' | 'dark' | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Appearance.d.ts",
          "releaseTag": "Public",
          "name": "ColorSchemeName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ColorValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ColorValue = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "OpaqueColorValue",
              "canonicalReference": "react-native!OpaqueColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "ColorValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ComponentProvider:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ComponentProvider = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "ComponentProvider",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ComponentProviderInstrumentationHook:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ComponentProviderInstrumentationHook = "
            },
            {
              "kind": "Content",
              "text": "(\n  component: "
            },
            {
              "kind": "Reference",
              "text": "ComponentProvider",
              "canonicalReference": "react-native!ComponentProvider:type"
            },
            {
              "kind": "Content",
              "text": ",\n  scopedPerformanceLogger: "
            },
            {
              "kind": "Reference",
              "text": "IPerformanceLogger",
              "canonicalReference": "react-native!~IPerformanceLogger:interface"
            },
            {
              "kind": "Content",
              "text": ",\n) => "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "ComponentProviderInstrumentationHook",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~Constructor:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Constructor<T> = "
            },
            {
              "kind": "Content",
              "text": "new (...args: any[]) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/private/Utilities.d.ts",
          "releaseTag": "Public",
          "name": "Constructor",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~counterEvent:function(1)",
          "docComment": "/**\n * counterEvent registers the value to the eventName on the systrace timeline\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function counterEvent(eventName: "
            },
            {
              "kind": "Reference",
              "text": "EventName",
              "canonicalReference": "react-native!Systrace.EventName:type"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "counterEvent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!CursorValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CursorValue = "
            },
            {
              "kind": "Content",
              "text": "'auto' | 'pointer'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "CursorValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DataDetectorTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type DataDetectorTypes =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'trackingNumber'\n  | 'flightNumber'\n  | 'lookupSuggestion'\n  | 'none'\n  | 'all'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "DataDetectorTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DefaultSectionT:type",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/sectionlist\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type DefaultSectionT = "
            },
            {
              "kind": "Content",
              "text": "{\n  [key: string]: any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "name": "DefaultSectionT",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!DeviceEventEmitter:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DeviceEventEmitter: "
            },
            {
              "kind": "Reference",
              "text": "DeviceEventEmitterStatic",
              "canonicalReference": "react-native!DeviceEventEmitterStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/RCTDeviceEventEmitter.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DeviceEventEmitter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DeviceEventEmitterStatic:interface",
          "docComment": "/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of adding all event listeners directly to RCTDeviceEventEmitter.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface DeviceEventEmitterStatic extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "react-native!~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/RCTDeviceEventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "DeviceEventEmitterStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!DeviceEventEmitterStatic:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (): "
                },
                {
                  "kind": "Reference",
                  "text": "DeviceEventEmitterStatic",
                  "canonicalReference": "react-native!DeviceEventEmitterStatic:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DeviceEventEmitterStatic#addListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "(data: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "addListener"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DeviceEventEmitterStatic#sharedSubscriber:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sharedSubscriber: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionVendor",
                  "canonicalReference": "react-native!~EventSubscriptionVendor:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sharedSubscriber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!DevSettings:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DevSettings: "
            },
            {
              "kind": "Reference",
              "text": "DevSettingsStatic",
              "canonicalReference": "react-native!DevSettingsStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/DevSettings.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DevSettings",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DevSettingsStatic:interface",
          "docComment": "/**\n * The DevSettings module exposes methods for customizing settings for developers in development.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevSettingsStatic extends "
            },
            {
              "kind": "Reference",
              "text": "NativeEventEmitter",
              "canonicalReference": "react-native!NativeEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/DevSettings.d.ts",
          "releaseTag": "Public",
          "name": "DevSettingsStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevSettingsStatic#addMenuItem:member(1)",
              "docComment": "/**\n * Adds a custom menu item to the developer menu.\n *\n * @param title - The title of the menu item. Is internally used as id and should therefore be unique.\n *\n * @param handler - The callback invoked when pressing the menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMenuItem(title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "title",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addMenuItem"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevSettingsStatic#reload:member(1)",
              "docComment": "/**\n * Reload the application.\n *\n * @param reason - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reload(reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "reload"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DevToolsSettingsManager:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DevToolsSettingsManager = "
            },
            {
              "kind": "Reference",
              "text": "DevToolsSettingsManagerStatic",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/DevToolsSettings/DevToolsSettingsManager.d.ts",
          "releaseTag": "Public",
          "name": "DevToolsSettingsManager",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!DevToolsSettingsManager:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DevToolsSettingsManager: "
            },
            {
              "kind": "Reference",
              "text": "DevToolsSettingsManagerStatic",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/DevToolsSettings/DevToolsSettingsManager.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DevToolsSettingsManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DevToolsSettingsManagerStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @flow strict  @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevToolsSettingsManagerStatic "
            }
          ],
          "fileUrlPath": "Libraries/DevToolsSettings/DevToolsSettingsManager.d.ts",
          "releaseTag": "Public",
          "name": "DevToolsSettingsManagerStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic#getConsolePatchSettings:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConsolePatchSettings(): "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getConsolePatchSettings"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic#getProfilingSettings:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProfilingSettings(): "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getProfilingSettings"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic#reload:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reload(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reload"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic#setConsolePatchSettings:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setConsolePatchSettings(newSettings: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newSettings",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setConsolePatchSettings"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DevToolsSettingsManagerStatic#setProfilingSettings:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setProfilingSettings(newSettings: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newSettings",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setProfilingSettings"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!Dimensions:interface",
          "docComment": "/**\n * Initial dimensions are set before `runApplication` is called so they should be available before any other require's are run, but may be updated later.\n *\n * Note: Although dimensions are available immediately, they may change (e.g due to device rotation) so any rendering logic or styles that depend on these constants should try to call this function on every render, rather than caching the value (for example, using inline styles rather than setting a value in a `StyleSheet`).\n *\n * Example: `const {height, width} = Dimensions.get('window');`\n *\n * @param dim - Name of dimension as defined when calling `set`.\n *\n * @returns Value for the dimension.\n *\n * @see\n *\n * https://reactnative.dev/docs/dimensions#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Dimensions "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Dimensions.d.ts",
          "releaseTag": "Public",
          "name": "Dimensions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!Dimensions#addEventListener:member(1)",
              "docComment": "/**\n * Add an event listener for dimension changes\n *\n * @param type - the type of event to listen to\n *\n * @param handler - the event handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "'change'"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "({\n      window,\n      screen,\n    }: {\n      window: "
                },
                {
                  "kind": "Reference",
                  "text": "ScaledSize",
                  "canonicalReference": "react-native!ScaledSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n      screen: "
                },
                {
                  "kind": "Reference",
                  "text": "ScaledSize",
                  "canonicalReference": "react-native!ScaledSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!Dimensions#get:member(1)",
              "docComment": "/**\n * Initial dimensions are set before runApplication is called so they should be available before any other require's are run, but may be updated later. Note: Although dimensions are available immediately, they may change (e.g due to device rotation) so any rendering logic or styles that depend on these constants should try to call this function on every render, rather than caching the value (for example, using inline styles rather than setting a value in a StyleSheet). Example: const {height, width} = Dimensions.get('window');\n *\n * @param dim - Name of dimension as defined when calling set.\n *\n * @returns Value for the dimension.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(dim: "
                },
                {
                  "kind": "Content",
                  "text": "'window' | 'screen'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ScaledSize",
                  "canonicalReference": "react-native!ScaledSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dim",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!Dimensions#set:member(1)",
              "docComment": "/**\n * This should only be called from native code by sending the didUpdateDimensions event.\n *\n * @param dims - Simple string-keyed object of dimensions to set\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(dims: "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: any}"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dims",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Dimensions:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Dimensions: "
            },
            {
              "kind": "Reference",
              "text": "Dimensions",
              "canonicalReference": "react-native!Dimensions:interface"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Dimensions.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Dimensions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DimensionValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DimensionValue =\n  "
            },
            {
              "kind": "Content",
              "text": "| number\n  | 'auto'\n  | `${number}%`\n  | "
            },
            {
              "kind": "Reference",
              "text": "Animated.AnimatedNode",
              "canonicalReference": "react-native!Animated.AnimatedNode:class"
            },
            {
              "kind": "Content",
              "text": "\n  | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "DimensionValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DocumentSelectionState:interface",
          "docComment": "/**\n * DocumentSelectionState is responsible for maintaining selection information for a document.\n *\n * It is intended for use by AbstractTextEditor-based components for identifying the appropriate start/end positions to modify the DocumentContent, and for programmatically setting browser selection when components re-render.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DocumentSelectionState extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "react-native!~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "DocumentSelectionState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!DocumentSelectionState:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (anchor: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", focus: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "DocumentSelectionState",
                  "canonicalReference": "react-native!DocumentSelectionState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "anchor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "focus",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#blur:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blur(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "blur"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#constrainLength:member(1)",
              "docComment": "/**\n * Given a max text length, constrain our selection offsets to ensure that the selection remains strictly within the text range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constrainLength(maxLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "constrainLength"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#focus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#getAnchorOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAnchorOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAnchorOffset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#getEndOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEndOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getEndOffset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#getFocusOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFocusOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getFocusOffset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#getStartOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStartOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getStartOffset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#hasFocus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasFocus(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasFocus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#isBackward:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBackward(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isBackward"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#isCollapsed:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCollapsed(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isCollapsed"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#overlaps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlaps(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "overlaps"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!DocumentSelectionState#update:member(1)",
              "docComment": "/**\n * Apply an update to the state. If either offset value has changed, set the values and emit the `change` event. Otherwise no-op.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(anchor: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", focus: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "anchor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "focus",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "update"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!DrawerLayoutAndroid:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class DrawerLayoutAndroid extends "
            },
            {
              "kind": "Reference",
              "text": "DrawerLayoutAndroidBase",
              "canonicalReference": "react-native!DrawerLayoutAndroidBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "DrawerLayoutAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "react-native!DrawerLayoutAndroid#closeDrawer:member(1)",
              "docComment": "/**\n * Closes the drawer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeDrawer(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "closeDrawer"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!DrawerLayoutAndroid#openDrawer:member(1)",
              "docComment": "/**\n * Opens the drawer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openDrawer(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "openDrawer"
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!DrawerLayoutAndroid#positions:member",
              "docComment": "/**\n * drawer's positions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positions: "
                },
                {
                  "kind": "Reference",
                  "text": "DrawerPosition",
                  "canonicalReference": "react-native!DrawerPosition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "positions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!DrawerLayoutAndroidBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DrawerLayoutAndroidBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "DrawerLayoutAndroidComponent",
              "canonicalReference": "react-native!DrawerLayoutAndroidComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DrawerLayoutAndroidBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!DrawerLayoutAndroidComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class DrawerLayoutAndroidComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DrawerLayoutAndroidProps",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "DrawerLayoutAndroidComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DrawerLayoutAndroidProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use DrawerLayoutAndroidProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DrawerLayoutAndroidProperties = "
            },
            {
              "kind": "Reference",
              "text": "DrawerLayoutAndroidProps",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "DrawerLayoutAndroidProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DrawerLayoutAndroidProps:interface",
          "docComment": "/**\n * @see\n *\n * DrawerLayoutAndroid.android.js\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DrawerLayoutAndroidProps extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "releaseTag": "Public",
          "name": "DrawerLayoutAndroidProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#drawerBackgroundColor:member",
              "docComment": "/**\n * Specifies the background color of the drawer. The default value is white. If you want to set the opacity of the drawer, use rgba. Example: return ( <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\"> </DrawerLayoutAndroid> );\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawerBackgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "drawerBackgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#drawerLockMode:member",
              "docComment": "/**\n * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n *\n * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n *\n * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n *\n * - locked-open, meaning that the drawer will stay opened and not respond to gestures. The drawer may still be opened and closed programmatically (openDrawer/closeDrawer).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawerLockMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'unlocked' | 'locked-closed' | 'locked-open' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "drawerLockMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#drawerPosition:member",
              "docComment": "/**\n * Specifies the side of the screen from which the drawer will slide in. - 'left' (the default) - 'right'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawerPosition?: "
                },
                {
                  "kind": "Content",
                  "text": "'left' | 'right' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "drawerPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#drawerWidth:member",
              "docComment": "/**\n * Specifies the width of the drawer, more precisely the width of the view that be pulled in from the edge of the window.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawerWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "drawerWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#keyboardDismissMode:member",
              "docComment": "/**\n * Determines whether the keyboard gets dismissed in response to a drag. - 'none' (the default), drags do not dismiss the keyboard. - 'on-drag', the keyboard is dismissed when a drag begins.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardDismissMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'on-drag' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardDismissMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#onDrawerClose:member",
              "docComment": "/**\n * Function called whenever the navigation view has been closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrawerClose?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDrawerClose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#onDrawerOpen:member",
              "docComment": "/**\n * Function called whenever the navigation view has been opened.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrawerOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDrawerOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#onDrawerSlide:member",
              "docComment": "/**\n * Function called whenever there is an interaction with the navigation view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrawerSlide?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "DrawerSlideEvent",
                  "canonicalReference": "react-native!DrawerSlideEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDrawerSlide",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#onDrawerStateChanged:member",
              "docComment": "/**\n * Function called when the drawer state has changed. The drawer can be in 3 states: - idle, meaning there is no interaction with the navigation view happening at the time - dragging, meaning there is currently an interaction with the navigation view - settling, meaning that there was an interaction with the navigation view, and the navigation view is now finishing it's closing or opening animation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrawerStateChanged?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: 'Idle' | 'Dragging' | 'Settling') => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDrawerStateChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#renderNavigationView:member",
              "docComment": "/**\n * The navigation view that will be rendered to the side of the screen and can be pulled in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderNavigationView: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "renderNavigationView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerLayoutAndroidProps#statusBarBackgroundColor:member",
              "docComment": "/**\n * Make the drawer take the entire screen and draw the background of the status bar to allow it to open over the status bar. It will only have an effect on API 21+.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusBarBackgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "statusBarBackgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DrawerPosition:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface DrawerPosition "
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "releaseTag": "Public",
          "name": "DrawerPosition",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerPosition#Left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!DrawerPosition#Right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!DrawerSlideEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DrawerSlideEvent\n  extends "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeTouchEvent",
              "canonicalReference": "react-native!NativeTouchEvent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.d.ts",
          "releaseTag": "Public",
          "name": "DrawerSlideEvent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DropShadowPrimitive:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DropShadowPrimitive = "
            },
            {
              "kind": "Content",
              "text": "{\n  offsetX: number | string;\n  offsetY: number | string;\n  standardDeviation?: number | string | undefined;\n  color?: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | number | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "DropShadowPrimitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!DynamicColorIOS:function(1)",
          "docComment": "/**\n * Specify color to display depending on the current system appearance settings\n *\n * @param tuple - Colors you want to use for \"light mode\" and \"dark mode\"  @platform ios\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function DynamicColorIOS(tuple: "
            },
            {
              "kind": "Reference",
              "text": "DynamicColorIOSTuple",
              "canonicalReference": "react-native!DynamicColorIOSTuple:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "OpaqueColorValue",
              "canonicalReference": "react-native!OpaqueColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/PlatformColorValueTypesIOS.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tuple",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "DynamicColorIOS"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!DynamicColorIOSTuple:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type DynamicColorIOSTuple = "
            },
            {
              "kind": "Content",
              "text": "{\n  light: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";\n  dark: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";\n  highContrastLight?: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  highContrastDark?: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/PlatformColorValueTypesIOS.d.ts",
          "releaseTag": "Public",
          "name": "DynamicColorIOSTuple",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Easing:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Easing = "
            },
            {
              "kind": "Reference",
              "text": "EasingStatic",
              "canonicalReference": "react-native!EasingStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Easing.d.ts",
          "releaseTag": "Public",
          "name": "Easing",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Easing:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Easing: "
            },
            {
              "kind": "Reference",
              "text": "EasingStatic",
              "canonicalReference": "react-native!EasingStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Easing.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Easing",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!EasingFunction:type",
          "docComment": "/**\n * This class implements common easing functions. The math is pretty obscure, but this cool website has nice visual illustrations of what they represent: http://xaedes.de/dev/transitions/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EasingFunction = "
            },
            {
              "kind": "Content",
              "text": "(value: number) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Animated/Easing.d.ts",
          "releaseTag": "Public",
          "name": "EasingFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!EasingStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EasingStatic "
            }
          ],
          "fileUrlPath": "Libraries/Animated/Easing.d.ts",
          "releaseTag": "Public",
          "name": "EasingStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#back:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "back(s: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "back"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#bezier:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bezier(x1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "x2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "bezier"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#bounce:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounce: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bounce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#circle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "circle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#cubic:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cubic: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cubic",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#ease:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ease: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ease",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#elastic:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elastic(bounciness: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "bounciness",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "elastic"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#exp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exp: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "exp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#in:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "in(easing: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "easing",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "in"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#inOut:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inOut(easing: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "easing",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "inOut"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#linear:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linear: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#out:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "out(easing: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "easing",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "out"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EasingStatic#poly:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poly(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "poly"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#quad:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quad: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "quad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#sin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sin: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#step0:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "step0: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "step0",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EasingStatic#step1:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "step1: "
                },
                {
                  "kind": "Reference",
                  "text": "EasingFunction",
                  "canonicalReference": "react-native!EasingFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "step1",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!EmitterSubscription:interface",
          "docComment": "/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface EmitterSubscription extends "
            },
            {
              "kind": "Reference",
              "text": "EventSubscription",
              "canonicalReference": "react-native!EventSubscription:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/vendor/emitter/EventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "EmitterSubscription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!EmitterSubscription:new(1)",
              "docComment": "/**\n * @param emitter - The event emitter that registered this subscription\n *\n * @param subscriber - The subscriber that controls this subscription\n *\n * @param listener - Function to invoke when the specified event is emitted\n *\n * @param context - Optional context object to use when invoking the listener\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (\n    emitter: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "react-native!~EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    subscriber: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionVendor",
                  "canonicalReference": "react-native!~EventSubscriptionVendor:class"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "emitter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "subscriber",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EmitterSubscription#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EmitterSubscription#emitter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitter: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "react-native!~EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emitter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EmitterSubscription#listener:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listener: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "listener",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EmitterSubscription#remove:member(1)",
              "docComment": "/**\n * Removes this subscription from the emitter that registered it. Note: we're overriding the `remove()` method of EventSubscription here but deliberately not calling `super.remove()` as the responsibility for removing the subscription lies with the EventEmitter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remove"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~endAsyncEvent:function(1)",
          "docComment": "/**\n * Registers a new value for a counter event.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function endAsyncEvent(\n  eventName: "
            },
            {
              "kind": "Reference",
              "text": "EventName",
              "canonicalReference": "react-native!Systrace.EventName:type"
            },
            {
              "kind": "Content",
              "text": ",\n  cookie: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ",\n  args?: "
            },
            {
              "kind": "Reference",
              "text": "EventArgs",
              "canonicalReference": "react-native!Systrace.EventArgs:type"
            },
            {
              "kind": "Content",
              "text": ",\n): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cookie",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "endAsyncEvent"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~endEvent:function(1)",
          "docComment": "/**\n * Marks the end of a synchronous event started in the same stack frame.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function endEvent(args?: "
            },
            {
              "kind": "Reference",
              "text": "EventArgs",
              "canonicalReference": "react-native!Systrace.EventArgs:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "endEvent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!EnterKeyHintType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EnterKeyHintType = "
            },
            {
              "kind": "Content",
              "text": "'done' | 'go' | 'next' | 'search' | 'send'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "EnterKeyHintType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!EnterKeyHintTypeAndroid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EnterKeyHintTypeAndroid = "
            },
            {
              "kind": "Content",
              "text": "'previous'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "EnterKeyHintTypeAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!EnterKeyHintTypeIOS:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EnterKeyHintTypeIOS = "
            },
            {
              "kind": "Content",
              "text": "'enter'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "EnterKeyHintTypeIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!EnterKeyHintTypeOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EnterKeyHintTypeOptions =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "EnterKeyHintType",
              "canonicalReference": "react-native!EnterKeyHintType:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "EnterKeyHintTypeAndroid",
              "canonicalReference": "react-native!EnterKeyHintTypeAndroid:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "EnterKeyHintTypeIOS",
              "canonicalReference": "react-native!EnterKeyHintTypeIOS:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "EnterKeyHintTypeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ErrorHandlerCallback:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ErrorHandlerCallback = "
            },
            {
              "kind": "Content",
              "text": "(error: any, isFatal?: boolean) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/vendor/core/ErrorUtils.d.ts",
          "releaseTag": "Public",
          "name": "ErrorHandlerCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ErrorUtils_2:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ErrorUtils "
            }
          ],
          "fileUrlPath": "Libraries/vendor/core/ErrorUtils.d.ts",
          "releaseTag": "Public",
          "name": "ErrorUtils_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ErrorUtils_2#getGlobalHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGlobalHandler: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorHandlerCallback",
                  "canonicalReference": "react-native!ErrorHandlerCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getGlobalHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ErrorUtils_2#setGlobalHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setGlobalHandler: "
                },
                {
                  "kind": "Content",
                  "text": "(callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorHandlerCallback",
                  "canonicalReference": "react-native!ErrorHandlerCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setGlobalHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~EventArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type EventArgs = "
            },
            {
              "kind": "Content",
              "text": "{[key: string]: string} | void | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "releaseTag": "Public",
          "name": "EventArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!~EventEmitter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class EventEmitter "
            }
          ],
          "fileUrlPath": "Libraries/vendor/emitter/EventEmitter.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "EventEmitter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "react-native!~EventEmitter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EventEmitter` class\n *\n * @param subscriber - Optional subscriber instance to use. If omitted, a new subscriber will be created for the emitter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(subscriber?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionVendor",
                  "canonicalReference": "react-native!~EventSubscriptionVendor:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subscriber",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventEmitter#addListener:member(1)",
              "docComment": "/**\n * Adds a listener to be invoked when events of the specified type are emitted. An optional calling context may be provided. The data arguments emitted will be passed to the listener function.\n *\n * @param eventType - Name of the event to listen to\n *\n * @param listener - Function to invoke when the specified event is emitted\n *\n * @param context - Optional context object to use when invoking the listener\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(\n    eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: any[]) => any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addListener"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventEmitter#emit:member(1)",
              "docComment": "/**\n * Emits an event of the given type with the given data. All handlers of that particular type will be notified.\n *\n * @param eventType - Name of the event to emit\n *\n * @param Arbitrary - arguments to be passed to each registered listener\n *\n * @example\n *\n * emitter.addListener('someEvent', function(message) { console.log(message); });\n *\n * emitter.emit('someEvent', 'abc'); // logs 'abc'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...params: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emit"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventEmitter#listenerCount:member(1)",
              "docComment": "/**\n * Returns the number of listeners that are currently registered for the given event.\n *\n * @param eventType - Name of the event to query\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listenerCount(eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "listenerCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventEmitter#removeAllListeners:member(1)",
              "docComment": "/**\n * Removes all of the registered listeners, including those registered as listener maps.\n *\n * @param eventType - Optional name of the event whose registered listeners to remove\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllListeners(eventType?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeAllListeners"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~EventName:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type EventName = "
            },
            {
              "kind": "Content",
              "text": "string | (() => string)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "releaseTag": "Public",
          "name": "EventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!EventSubscription:interface",
          "docComment": "/**\n * EventSubscription represents a subscription to a particular event. It can remove its own subscription.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface EventSubscription "
            }
          ],
          "fileUrlPath": "Libraries/vendor/emitter/EventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "EventSubscription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!EventSubscription:new(1)",
              "docComment": "/**\n * @param subscriber - the subscriber that controls this subscription.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (subscriber: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionVendor",
                  "canonicalReference": "react-native!~EventSubscriptionVendor:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscription",
                  "canonicalReference": "react-native!EventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subscriber",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EventSubscription#eventType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EventSubscription#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!EventSubscription#remove:member(1)",
              "docComment": "/**\n * Removes this subscription from the subscriber that controls it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remove"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!EventSubscription#subscriber:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscriber: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionVendor",
                  "canonicalReference": "react-native!~EventSubscriptionVendor:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subscriber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!~EventSubscriptionVendor:class",
          "docComment": "/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are subscribed to a particular event type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class EventSubscriptionVendor "
            }
          ],
          "fileUrlPath": "Libraries/vendor/emitter/EventEmitter.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "EventSubscriptionVendor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "react-native!~EventSubscriptionVendor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EventSubscriptionVendor` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventSubscriptionVendor#addSubscription:member(1)",
              "docComment": "/**\n * Adds a subscription keyed by an event type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSubscription(\n    eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    subscription: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscription",
                  "canonicalReference": "react-native!EventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscription",
                  "canonicalReference": "react-native!EventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "subscription",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addSubscription"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventSubscriptionVendor#getSubscriptionsForType:member(1)",
              "docComment": "/**\n * Returns the array of subscriptions that are currently registered for the given event type.\n *\n * Note: This array can be potentially sparse as subscriptions are deleted from it when they are removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubscriptionsForType(eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscription",
                  "canonicalReference": "react-native!EventSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSubscriptionsForType"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventSubscriptionVendor#removeAllSubscriptions:member(1)",
              "docComment": "/**\n * Removes a bulk set of the subscriptions.\n *\n * @param eventType - Optional name of the event type whose registered subscriptions to remove, if null remove all subscriptions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllSubscriptions(eventType?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeAllSubscriptions"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!~EventSubscriptionVendor#removeSubscription:member(1)",
              "docComment": "/**\n * Removes a specific subscription. Instead of calling this function, call `subscription.remove()` directly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSubscription(subscription: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subscription",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeSubscription"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~Extras:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Extras = "
            },
            {
              "kind": "Content",
              "text": "{[key: string]: "
            },
            {
              "kind": "Reference",
              "text": "ExtraValue",
              "canonicalReference": "react-native!~ExtraValue:type"
            },
            {
              "kind": "Content",
              "text": "}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/IPerformanceLogger.d.ts",
          "releaseTag": "Public",
          "name": "Extras",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~ExtraValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ExtraValue = "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/IPerformanceLogger.d.ts",
          "releaseTag": "Public",
          "name": "ExtraValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Falsy:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Falsy = "
            },
            {
              "kind": "Content",
              "text": "undefined | null | false | ''"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "Falsy",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!FetchResult:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type FetchResult = "
            },
            {
              "kind": "Content",
              "text": "{\n  NewData: 'UIBackgroundFetchResultNewData';\n  NoData: 'UIBackgroundFetchResultNoData';\n  ResultFailed: 'UIBackgroundFetchResultFailed';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "FetchResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!FilterFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FilterFunction =\n  "
            },
            {
              "kind": "Content",
              "text": "| {brightness: number | string}\n  | {blur: number | string}\n  | {contrast: number | string}\n  | {grayscale: number | string}\n  | {hueRotate: number | string}\n  | {invert: number | string}\n  | {opacity: number | string}\n  | {saturate: number | string}\n  | {sepia: number | string}\n  | {dropShadow: "
            },
            {
              "kind": "Reference",
              "text": "DropShadowPrimitive",
              "canonicalReference": "react-native!DropShadowPrimitive:type"
            },
            {
              "kind": "Content",
              "text": " | string}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "FilterFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!findNodeHandle:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function findNodeHandle(\n  componentOrHandle:\n    "
            },
            {
              "kind": "Content",
              "text": "| null\n    | number\n    | "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<any, any>\n    | "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentClass",
              "canonicalReference": "@types/react!React.ComponentClass:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ",\n): "
            },
            {
              "kind": "Content",
              "text": "null | "
            },
            {
              "kind": "Reference",
              "text": "NodeHandle",
              "canonicalReference": "react-native!NodeHandle:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/RendererProxy.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "componentOrHandle",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "findNodeHandle"
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!FlatList:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class FlatList<ItemT = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "FlatListComponent",
              "canonicalReference": "react-native!FlatListComponent:class"
            },
            {
              "kind": "Content",
              "text": "<\n  ItemT,\n  "
            },
            {
              "kind": "Reference",
              "text": "FlatListProps",
              "canonicalReference": "react-native!FlatListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>\n>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/FlatList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "isAbstract": false,
          "name": "FlatList",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!FlatListComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export abstract class FlatListComponent<\n  ItemT,\n  Props,\n> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<Props>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/FlatList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Props",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": true,
          "name": "FlatListComponent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#flashScrollIndicators:member",
              "docComment": "/**\n * Displays the scroll indicators momentarily.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flashScrollIndicators: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flashScrollIndicators",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#getNativeScrollRef:member",
              "docComment": "/**\n * Provides a reference to the underlying host component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNativeScrollRef: "
                },
                {
                  "kind": "Content",
                  "text": "() =>\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "View",
                  "canonicalReference": "react-native!View:class"
                },
                {
                  "kind": "Content",
                  "text": ">\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollViewComponent",
                  "canonicalReference": "react-native!ScrollViewComponent:class"
                },
                {
                  "kind": "Content",
                  "text": ">\n    | null\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getNativeScrollRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#getScrollableNode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollableNode: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getScrollableNode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#getScrollResponder:member",
              "docComment": "/**\n * Provides a handle to the underlying scroll responder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollResponder: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getScrollResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#recordInteraction:member",
              "docComment": "/**\n * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g. if waitForInteractions is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recordInteraction: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "recordInteraction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#scrollToEnd:member",
              "docComment": "/**\n * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToEnd: "
                },
                {
                  "kind": "Content",
                  "text": "(params?: {animated?: boolean | null | undefined}) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollToEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#scrollToIndex:member",
              "docComment": "/**\n * Scrolls to the item at the specified index such that it is positioned in the viewable area such that viewPosition 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle. Cannot scroll to locations outside the render window without specifying the getItemLayout prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(params: {\n    animated?: boolean | null | undefined;\n    index: number;\n    viewOffset?: number | undefined;\n    viewPosition?: number | undefined;\n  }) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollToIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#scrollToItem:member",
              "docComment": "/**\n * Requires linear scan through data - use `scrollToIndex` instead if possible. May be janky without `getItemLayout` prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToItem: "
                },
                {
                  "kind": "Content",
                  "text": "(params: {\n    animated?: boolean | null | undefined;\n    item: ItemT;\n    viewOffset?: number | undefined;\n    viewPosition?: number | undefined;\n  }) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollToItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#scrollToOffset:member",
              "docComment": "/**\n * Scroll to a specific content pixel offset, like a normal `ScrollView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToOffset: "
                },
                {
                  "kind": "Content",
                  "text": "(params: {\n    animated?: boolean | null | undefined;\n    offset: number;\n  }) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollToOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!FlatListComponent#setNativeProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNativeProps: "
                },
                {
                  "kind": "Content",
                  "text": "(props: {[key: string]: any}) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setNativeProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!FlatListProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use FlatListProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FlatListProperties<ItemT> = "
            },
            {
              "kind": "Reference",
              "text": "FlatListProps",
              "canonicalReference": "react-native!FlatListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "FlatListProperties",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!FlatListProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FlatListProps<ItemT> extends "
            },
            {
              "kind": "Reference",
              "text": "VirtualizedListProps",
              "canonicalReference": "@react-native/virtualized-lists!VirtualizedListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/FlatList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "FlatListProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#columnWrapperStyle:member",
              "docComment": "/**\n * Optional custom style for multi-item rows generated when numColumns > 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnWrapperStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "columnWrapperStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#data:member",
              "docComment": "/**\n * An array (or array-like list) of items to render. Other data types can be used by targeting VirtualizedList directly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT> | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#extraData:member",
              "docComment": "/**\n * A marker property for telling the list to re-render (since it implements PureComponent). If any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the `data` prop, stick it here and treat it immutably.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraData?: "
                },
                {
                  "kind": "Content",
                  "text": "any | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extraData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#fadingEdgeLength:member",
              "docComment": "/**\n * Fades out the edges of the scroll content.\n *\n * If the value is greater than 0, the fading edges will be set accordingly to the current scroll direction and position, indicating if there is more content to show.\n *\n * The default value is 0.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadingEdgeLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fadingEdgeLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#getItemLayout:member",
              "docComment": "/**\n * `getItemLayout` is an optional optimization that lets us skip measurement of dynamic content if you know the height of items a priori. getItemLayout is the most efficient, and is easy to use if you have fixed height items, for example:\n * ```\n * getItemLayout={(data, index) => (\n *   {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n * )}\n * ```\n *\n * Remember to include separator length (height or width) in your offset calculation if you specify `ItemSeparatorComponent`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getItemLayout?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT> | null | undefined,\n        index: number,\n      ) => {length: number; offset: number; index: number})\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "getItemLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#horizontal:member",
              "docComment": "/**\n * If true, renders items next to each other horizontally instead of stacked vertically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "horizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#initialNumToRender:member",
              "docComment": "/**\n * How many items to render in the initial batch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialNumToRender?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "initialNumToRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#initialScrollIndex:member",
              "docComment": "/**\n * Instead of starting at the top with the first item, start at initialScrollIndex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialScrollIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "initialScrollIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#keyboardShouldPersistTaps:member",
              "docComment": "/**\n * Determines when the keyboard should stay visible after a tap. - 'never' (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won't receive the tap. - 'always', the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps. - 'handled', the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor). - false, deprecated, use 'never' instead - true, deprecated, use 'always' instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardShouldPersistTaps?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| boolean\n    | 'always'\n    | 'never'\n    | 'handled'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardShouldPersistTaps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#keyExtractor:member",
              "docComment": "/**\n * Used to extract a unique key for a given item at the specified index. Key is used for caching and as the react key to track item re-ordering. The default extractor checks `item.key`, then falls back to using the index, like React does.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyExtractor?: "
                },
                {
                  "kind": "Content",
                  "text": "((item: ItemT, index: number) => string) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyExtractor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#legacyImplementation:member",
              "docComment": "/**\n * Uses legacy MetroListView instead of default VirtualizedSectionList\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "legacyImplementation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "legacyImplementation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#numColumns:member",
              "docComment": "/**\n * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numColumns?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "numColumns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#onRefresh:member",
              "docComment": "/**\n * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRefresh?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRefresh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#onViewableItemsChanged:member",
              "docComment": "/**\n * Called when the viewability of rows changes, as defined by the `viewablePercentThreshold` prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onViewableItemsChanged?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((info: {\n        viewableItems: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewToken",
                  "canonicalReference": "@react-native/virtualized-lists!ViewToken:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT>>;\n        changed: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewToken",
                  "canonicalReference": "@react-native/virtualized-lists!ViewToken:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT>>;\n      }) => void)\n    | null\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onViewableItemsChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#refreshing:member",
              "docComment": "/**\n * Set this true while waiting for new data from a refresh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "refreshing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#removeClippedSubviews:member",
              "docComment": "/**\n * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n *\n * This may improve scroll performance for large lists.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeClippedSubviews?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removeClippedSubviews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#renderItem:member",
              "docComment": "/**\n * Takes an item from data and renders it into the list. Typical usage:\n * ```\n * _renderItem = ({item}) => (\n *   <TouchableOpacity onPress={() => this._onPress(item)}>\n *     <Text>{item.title}</Text>\n *   </TouchableOpacity>\n * );\n * ...\n * <FlatList data={[{title: 'Title Text', key: 'item1'}]} renderItem={this._renderItem} />\n * ```\n *\n * Provides additional metadata like `index` if you need it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ListRenderItem",
                  "canonicalReference": "@react-native/virtualized-lists!ListRenderItem:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT> | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "renderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlatListProps#viewabilityConfig:member",
              "docComment": "/**\n * See `ViewabilityHelper` for flow type and further documentation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "viewabilityConfig?: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewabilityConfig",
                  "canonicalReference": "@react-native/virtualized-lists!ViewabilityConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "viewabilityConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!FlexAlignType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type FlexAlignType =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'flex-start'\n  | 'flex-end'\n  | 'center'\n  | 'stretch'\n  | 'baseline'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "FlexAlignType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!FlexStyle:interface",
          "docComment": "/**\n * Flex Prop Types\n *\n * @see\n *\n * https://reactnative.dev/docs/flexbox\n *\n * @see\n *\n * https://reactnative.dev/docs/layout-props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FlexStyle "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "FlexStyle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#alignContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignContent?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'stretch'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#alignItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "FlexAlignType",
                  "canonicalReference": "react-native!FlexAlignType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#alignSelf:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignSelf?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | "
                },
                {
                  "kind": "Reference",
                  "text": "FlexAlignType",
                  "canonicalReference": "react-native!FlexAlignType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alignSelf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#aspectRatio:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "aspectRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "aspectRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderBottomWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderEndWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderEndWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderEndWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderLeftWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderLeftWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderLeftWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderRightWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderRightWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderRightWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderStartWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStartWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderStartWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderTopWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#borderWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#columnGap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnGap?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "columnGap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#direction:member",
              "docComment": "/**\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction?: "
                },
                {
                  "kind": "Content",
                  "text": "'inherit' | 'ltr' | 'rtl' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#display:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "display?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'flex' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "display",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flex?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flexBasis:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexBasis?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexBasis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flexDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexDirection?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'row'\n    | 'column'\n    | 'row-reverse'\n    | 'column-reverse'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flexGrow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexGrow?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexGrow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flexShrink:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexShrink?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexShrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#flexWrap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexWrap?: "
                },
                {
                  "kind": "Content",
                  "text": "'wrap' | 'nowrap' | 'wrap-reverse' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "flexWrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#gap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gap?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#justifyContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "justifyContent?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "justifyContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#margin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "margin?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "margin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginBottom?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginEnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginEnd?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginHorizontal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginHorizontal?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginHorizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginLeft?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginRight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginStart?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginTop?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#marginVertical:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "marginVertical?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "marginVertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#maxHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#maxWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#minHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#minWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#overflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflow?: "
                },
                {
                  "kind": "Content",
                  "text": "'visible' | 'hidden' | 'scroll' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#padding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingBottom?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingEnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingEnd?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingHorizontal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingHorizontal?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingHorizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingLeft?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingRight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingStart?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingTop?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#paddingVertical:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paddingVertical?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paddingVertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#position:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position?: "
                },
                {
                  "kind": "Content",
                  "text": "'absolute' | 'relative' | 'static' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#rowGap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rowGap?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rowGap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Reference",
                  "text": "DimensionValue",
                  "canonicalReference": "react-native!DimensionValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!FlexStyle#zIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "zIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!FontVariant:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FontVariant =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'small-caps'\n  | 'oldstyle-nums'\n  | 'lining-nums'\n  | 'tabular-nums'\n  | 'common-ligatures'\n  | 'no-common-ligatures'\n  | 'discretionary-ligatures'\n  | 'no-discretionary-ligatures'\n  | 'historical-ligatures'\n  | 'no-historical-ligatures'\n  | 'contextual'\n  | 'no-contextual'\n  | 'proportional-nums'\n  | 'stylistic-one'\n  | 'stylistic-two'\n  | 'stylistic-three'\n  | 'stylistic-four'\n  | 'stylistic-five'\n  | 'stylistic-six'\n  | 'stylistic-seven'\n  | 'stylistic-eight'\n  | 'stylistic-nine'\n  | 'stylistic-ten'\n  | 'stylistic-eleven'\n  | 'stylistic-twelve'\n  | 'stylistic-thirteen'\n  | 'stylistic-fourteen'\n  | 'stylistic-fifteen'\n  | 'stylistic-sixteen'\n  | 'stylistic-seventeen'\n  | 'stylistic-eighteen'\n  | 'stylistic-nineteen'\n  | 'stylistic-twenty'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "FontVariant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!GestureResponderEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GestureResponderEvent\n  extends "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeTouchEvent",
              "canonicalReference": "react-native!NativeTouchEvent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "GestureResponderEvent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!GestureResponderHandlers:interface",
          "docComment": "/**\n * Gesture recognition on mobile devices is much more complicated than web. A touch can go through several phases as the app determines what the user's intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.\n *\n * The touch responder system is needed to allow components to negotiate these touch interactions without any additional knowledge about their parent or child components. This system is implemented in ResponderEventPlugin.js, which contains further details and documentation.\n *\n * Best Practices Users can feel huge differences in the usability of web apps vs. native, and this is one of the big causes. Every action should have the following attributes: Feedback/highlighting- show the user what is handling their touch, and what will happen when they release the gesture Cancel-ability- when making an action, the user should be able to abort it mid-touch by dragging their finger away\n *\n * These features make users more comfortable while using an app, because it allows people to experiment and interact without fear of making mistakes.\n *\n * TouchableHighlight and Touchable* The responder system can be complicated to use. So we have provided an abstract Touchable implementation for things that should be \"tappable\". This uses the responder system and allows you to easily configure tap interactions declaratively. Use TouchableHighlight anywhere where you would use a button or link on web.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GestureResponderHandlers "
            }
          ],
          "fileUrlPath": "types/public/ReactNativeRenderer.d.ts",
          "releaseTag": "Public",
          "name": "GestureResponderHandlers",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onMoveShouldSetResponder:member",
              "docComment": "/**\n * Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMoveShouldSetResponder?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMoveShouldSetResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onMoveShouldSetResponderCapture:member",
              "docComment": "/**\n * onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable.\n *\n * However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMoveShouldSetResponderCapture?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMoveShouldSetResponderCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderEnd:member",
              "docComment": "/**\n * If the View returns true and attempts to become the responder, one of the following will happen:\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderGrant:member",
              "docComment": "/**\n * The View is now responding for touch events. This is the time to highlight and show the user what is happening\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderGrant?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderGrant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderMove:member",
              "docComment": "/**\n * The user is moving their finger\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderMove?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderReject:member",
              "docComment": "/**\n * Something else is the responder right now and will not release it\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderReject?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderReject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderRelease:member",
              "docComment": "/**\n * Fired at the end of the touch, ie \"touchUp\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderRelease?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderRelease",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderStart?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderTerminate:member",
              "docComment": "/**\n * The responder has been taken from the View. Might be taken by other views after a call to onResponderTerminationRequest, or might be taken by the OS without asking (happens with control center/ notification center on iOS)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderTerminate?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderTerminate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onResponderTerminationRequest:member",
              "docComment": "/**\n * Something else wants to become responder. Should this view release the responder? Returning true allows release\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResponderTerminationRequest?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onResponderTerminationRequest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onStartShouldSetResponder:member",
              "docComment": "/**\n * Does this view want to become responder on the start of a touch?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartShouldSetResponder?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onStartShouldSetResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!GestureResponderHandlers#onStartShouldSetResponderCapture:member",
              "docComment": "/**\n * onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable.\n *\n * However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartShouldSetResponderCapture?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onStartShouldSetResponderCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~get:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function get<T extends "
            },
            {
              "kind": "Reference",
              "text": "TurboModule",
              "canonicalReference": "react-native!TurboModule:interface"
            },
            {
              "kind": "Content",
              "text": ">(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/TurboModule/TurboModuleRegistry.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "get"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~getEnforcing:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function getEnforcing<T extends "
            },
            {
              "kind": "Reference",
              "text": "TurboModule",
              "canonicalReference": "react-native!TurboModule:interface"
            },
            {
              "kind": "Content",
              "text": ">(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/TurboModule/TurboModuleRegistry.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getEnforcing"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Handle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Handle = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/InteractionManager.d.ts",
          "releaseTag": "Public",
          "name": "Handle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!HostComponent:interface",
          "docComment": "/**\n * Represents a native component, such as those returned from `requireNativeComponent`.\n *\n * @see\n *\n * https://github.com/facebook/react-native/blob/v0.62.0-rc.5/Libraries/Renderer/shims/ReactNativeTypes.js\n *\n * @todo This should eventually be defined as an AbstractComponent, but that should first be introduced in the React typings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HostComponent<P>\n  extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<\n    "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentClass",
              "canonicalReference": "@types/react!React.ComponentClass:interface"
            },
            {
              "kind": "Content",
              "text": "<P>,\n    "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentClass",
              "canonicalReference": "@types/react!React.ComponentClass:interface"
            },
            {
              "kind": "Content",
              "text": "<P>, 'new'>\n  >"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "HostComponent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!HostComponent:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (props: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "React.Component",
                  "canonicalReference": "@types/react!React.Component:class"
                },
                {
                  "kind": "Content",
                  "text": "<P> & "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeMethods",
                  "canonicalReference": "react-native!NativeMethods:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!I18nManager:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type I18nManager = "
            },
            {
              "kind": "Reference",
              "text": "I18nManagerStatic",
              "canonicalReference": "react-native!I18nManagerStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/I18nManager.d.ts",
          "releaseTag": "Public",
          "name": "I18nManager",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!I18nManager:var",
          "docComment": "/**\n * https://reactnative.dev/blog/2016/08/19/right-to-left-support-for-react-native-apps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "I18nManager: "
            },
            {
              "kind": "Reference",
              "text": "I18nManagerStatic",
              "canonicalReference": "react-native!I18nManagerStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/I18nManager.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "I18nManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!I18nManagerStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface I18nManagerStatic "
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/I18nManager.d.ts",
          "releaseTag": "Public",
          "name": "I18nManagerStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#allowRTL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowRTL: "
                },
                {
                  "kind": "Content",
                  "text": "(allowRTL: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#doLeftAndRightSwapInRTL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doLeftAndRightSwapInRTL: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "doLeftAndRightSwapInRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#forceRTL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceRTL: "
                },
                {
                  "kind": "Content",
                  "text": "(forceRTL: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "forceRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#getConstants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConstants: "
                },
                {
                  "kind": "Content",
                  "text": "() => {\n    isRTL: boolean;\n    doLeftAndRightSwapInRTL: boolean;\n    localeIdentifier?: string | null | undefined;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getConstants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#isRTL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isRTL: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!I18nManagerStatic#swapLeftAndRightInRTL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "swapLeftAndRightInRTL: "
                },
                {
                  "kind": "Content",
                  "text": "(swapLeftAndRight: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "swapLeftAndRightInRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!Image:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class Image extends "
            },
            {
              "kind": "Reference",
              "text": "ImageBase",
              "canonicalReference": "react-native!ImageBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Image",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.abortPrefetch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static abortPrefetch?(requestId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": true,
              "isAbstract": false,
              "name": "abortPrefetch"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.getSize:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getSize(uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageSize",
                  "canonicalReference": "react-native!ImageSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.getSize:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getSize(\n    uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    success: "
                },
                {
                  "kind": "Content",
                  "text": "(width: number, height: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n    failure?: "
                },
                {
                  "kind": "Content",
                  "text": "(error: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "success",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "failure",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.getSizeWithHeaders:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getSizeWithHeaders(\n    uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    headers: "
                },
                {
                  "kind": "Content",
                  "text": "{[index: string]: string}"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageSize",
                  "canonicalReference": "react-native!ImageSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "headers",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSizeWithHeaders"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.getSizeWithHeaders:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getSizeWithHeaders(\n    uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    headers: "
                },
                {
                  "kind": "Content",
                  "text": "{[index: string]: string}"
                },
                {
                  "kind": "Content",
                  "text": ",\n    success: "
                },
                {
                  "kind": "Content",
                  "text": "(width: number, height: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n    failure?: "
                },
                {
                  "kind": "Content",
                  "text": "(error: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "headers",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "success",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "failure",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSizeWithHeaders"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.prefetch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static prefetch(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "prefetch"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.prefetchWithMetadata:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static prefetchWithMetadata(\n    url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    queryRootName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    rootTag?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "queryRootName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rootTag",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "prefetchWithMetadata"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.queryCache:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static queryCache?(\n    urls: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{[url: string]: 'memory' | 'disk' | 'disk/memory'}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "urls",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": true,
              "isAbstract": false,
              "name": "queryCache"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!Image.resolveAssetSource:member(1)",
              "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/image#resolveassetsource\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static resolveAssetSource(\n    source: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageSourcePropType",
                  "canonicalReference": "react-native!ImageSourcePropType:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResolvedAssetSource",
                  "canonicalReference": "react-native!ImageResolvedAssetSource:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "resolveAssetSource"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ImageBackground:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class ImageBackground extends "
            },
            {
              "kind": "Reference",
              "text": "ImageBackgroundBase",
              "canonicalReference": "react-native!ImageBackgroundBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ImageBackground",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ImageBackgroundBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImageBackgroundBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "ImageBackgroundComponent",
              "canonicalReference": "react-native!ImageBackgroundComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ImageBackgroundBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ImageBackgroundComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ImageBackgroundComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ImageBackgroundProps",
              "canonicalReference": "react-native!ImageBackgroundProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ImageBackgroundComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImageBackgroundProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ImageBackgroundProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageBackgroundProperties = "
            },
            {
              "kind": "Reference",
              "text": "ImageBackgroundProps",
              "canonicalReference": "react-native!ImageBackgroundProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ImageBackgroundProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageBackgroundProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageBackgroundProps extends "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsBase",
              "canonicalReference": "react-native!ImagePropsBase:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageBackgroundProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageBackgroundProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ImageBackgroundProps#imageRef:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageRef?(image: "
                },
                {
                  "kind": "Reference",
                  "text": "Image",
                  "canonicalReference": "react-native!Image:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "image",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "imageRef"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageBackgroundProps#imageStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageStyle",
                  "canonicalReference": "react-native!ImageStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "imageStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageBackgroundProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ImageBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImageBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> & typeof "
            },
            {
              "kind": "Reference",
              "text": "ImageComponent",
              "canonicalReference": "react-native!ImageComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ImageBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ImageComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ImageComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ImageProps",
              "canonicalReference": "react-native!ImageProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ImageComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageErrorEventData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageErrorEventData "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageErrorEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageErrorEventData#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageLoadEventData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageLoadEventData "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageLoadEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageLoadEventData#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "source: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    height: number;\n    width: number;\n    uri: string;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageProgressEventDataIOS:interface",
          "docComment": "/**\n * @see\n *\n * ImagePropsIOS.onProgress\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageProgressEventDataIOS "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageProgressEventDataIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageProgressEventDataIOS#loaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loaded: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageProgressEventDataIOS#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImageProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ImageProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageProperties = "
            },
            {
              "kind": "Reference",
              "text": "ImageProps",
              "canonicalReference": "react-native!ImageProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ImageProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImagePropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ImagePropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImagePropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsAndroid",
              "canonicalReference": "react-native!ImagePropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImagePropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ImagePropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImagePropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsIOS",
              "canonicalReference": "react-native!ImagePropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImagePropertiesSourceOptions:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ImageSourcePropType\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImagePropertiesSourceOptions = "
            },
            {
              "kind": "Reference",
              "text": "ImageSourcePropType",
              "canonicalReference": "react-native!ImageSourcePropType:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropertiesSourceOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageProps extends "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsBase",
              "canonicalReference": "react-native!ImagePropsBase:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageProps#style:member",
              "docComment": "/**\n * Style\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageStyle",
                  "canonicalReference": "react-native!ImageStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImagePropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ImagePropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsAndroid#fadeDuration:member",
              "docComment": "/**\n * Duration of fade in animation in ms. Defaults to 300\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadeDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fadeDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsAndroid#resizeMethod:member",
              "docComment": "/**\n * The mechanism that should be used to resize the image when the image's dimensions differ from the image view's dimensions. Defaults to auto.\n *\n * 'auto': Use heuristics to pick between resize and scale.\n *\n * 'resize': A software operation which changes the encoded image in memory before it gets decoded. This should be used instead of scale when the image is much larger than the view.\n *\n * 'scale': The image gets drawn downscaled or upscaled. Compared to resize, scale is faster (usually hardware accelerated) and produces higher quality images. This should be used if the image is smaller than the view. It should also be used if the image is slightly bigger than the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizeMethod?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'resize' | 'scale' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resizeMethod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImagePropsBase:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/image\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImagePropsBase\n  extends "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsIOS",
              "canonicalReference": "react-native!ImagePropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "ImagePropsAndroid",
              "canonicalReference": "react-native!ImagePropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropsBase",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#alt:member",
              "docComment": "/**\n * The text that's read by the screen reader when the user interacts with the image.\n *\n * See https://reactnative.dev/docs/image#alt\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alt?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#borderBottomLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomLeftRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#borderBottomRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomRightRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#borderRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#borderTopLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopLeftRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#borderTopRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopRightRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#crossOrigin:member",
              "docComment": "/**\n * Adds the CORS related header to the request. Similar to crossorigin from HTML.\n *\n * See https://reactnative.dev/docs/image#crossorigin\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "crossOrigin?: "
                },
                {
                  "kind": "Content",
                  "text": "'anonymous' | 'use-credentials' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "crossOrigin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#defaultSource:member",
              "docComment": "/**\n * A static image to display while downloading the final image off the network.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageURISource",
                  "canonicalReference": "react-native!ImageURISource:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageRequireSource",
                  "canonicalReference": "react-native!ImageRequireSource:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "defaultSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#height:member",
              "docComment": "/**\n * Height of the image component.\n *\n * See https://reactnative.dev/docs/image#height\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#id:member",
              "docComment": "/**\n * Used to reference react managed images from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#loadingIndicatorSource:member",
              "docComment": "/**\n * similarly to `source`, this property represents the resource used to render the loading indicator for the image, displayed until image is ready to be displayed, typically after when it got downloaded from network.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingIndicatorSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageURISource",
                  "canonicalReference": "react-native!ImageURISource:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loadingIndicatorSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#nativeID:member",
              "docComment": "/**\n * Used to reference react managed images from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nativeID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nativeID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#onError:member",
              "docComment": "/**\n * Invoked on load error with {nativeEvent: {error}}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onError?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((error: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageErrorEventData",
                  "canonicalReference": "react-native!ImageErrorEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#onLayout:member",
              "docComment": "/**\n * onLayout function\n *\n * Invoked on mount and layout changes with\n *\n * {nativeEvent: { layout: {x, y, width, height} }}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayout?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutChangeEvent",
                  "canonicalReference": "react-native!LayoutChangeEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#onLoad:member",
              "docComment": "/**\n * Invoked when load completes successfully { source: { uri, height, width } }.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLoad?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageLoadEventData",
                  "canonicalReference": "react-native!ImageLoadEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLoad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#onLoadEnd:member",
              "docComment": "/**\n * Invoked when load either succeeds or fails\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLoadEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLoadEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#onLoadStart:member",
              "docComment": "/**\n * Invoked on load start\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLoadStart?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLoadStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#progressiveRenderingEnabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressiveRenderingEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "progressiveRenderingEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#referrerPolicy:member",
              "docComment": "/**\n * A string indicating which referrer to use when fetching the resource. Similar to referrerpolicy from HTML.\n *\n * See https://reactnative.dev/docs/image#referrerpolicy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "referrerPolicy?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'no-referrer'\n    | 'no-referrer-when-downgrade'\n    | 'origin'\n    | 'origin-when-cross-origin'\n    | 'same-origin'\n    | 'strict-origin'\n    | 'strict-origin-when-cross-origin'\n    | 'unsafe-url'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referrerPolicy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#resizeMethod:member",
              "docComment": "/**\n * The mechanism that should be used to resize the image when the image's dimensions differ from the image view's dimensions. Defaults to `auto`.\n *\n * - `auto`: Use heuristics to pick between `resize` and `scale`.\n *\n * - `resize`: A software operation which changes the encoded image in memory before it gets decoded. This should be used instead of `scale` when the image is much larger than the view.\n *\n * - `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is faster (usually hardware accelerated) and produces higher quality images. This should be used if the image is smaller than the view. It should also be used if the image is slightly bigger than the view.\n *\n * More details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizeMethod?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'resize' | 'scale' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resizeMethod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#resizeMode:member",
              "docComment": "/**\n * Determines how to resize the image when the frame doesn't match the raw image dimensions.\n *\n * 'cover': Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).\n *\n * 'contain': Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).\n *\n * 'stretch': Scale width and height independently, This may change the aspect ratio of the src.\n *\n * 'repeat': Repeat the image to cover the frame of the view. The image will keep it's size and aspect ratio. (iOS only)\n *\n * 'center': Scale the image down so that it is completely visible, if bigger than the area of the view. The image will not be scaled up.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizeMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resizeMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#source:member",
              "docComment": "/**\n * The image source (either a remote URL or a local file resource).\n *\n * This prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments. The native side will then choose the best uri to display based on the measured size of the image container. A cache property can be added to control how networked request interacts with the local cache.\n *\n * The currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "source?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageSourcePropType",
                  "canonicalReference": "react-native!ImageSourcePropType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#src:member",
              "docComment": "/**\n * A string representing the resource identifier for the image. Similar to src from HTML.\n *\n * See https://reactnative.dev/docs/image#src\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "src?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "src",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#srcSet:member",
              "docComment": "/**\n * Similar to srcset from HTML.\n *\n * See https://reactnative.dev/docs/image#srcset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "srcSet?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "srcSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#testID:member",
              "docComment": "/**\n * A unique identifier for this element to be used in UI Automation testing scripts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#tintColor:member",
              "docComment": "/**\n * Changes the color of all the non-transparent pixels to the tintColor.\n *\n * See https://reactnative.dev/docs/image#tintcolor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsBase#width:member",
              "docComment": "/**\n * Width of the image component.\n *\n * See https://reactnative.dev/docs/image#width\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImagePropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImagePropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImagePropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsIOS#blurRadius:member",
              "docComment": "/**\n * blurRadius: the blur radius of the blur filter added to the image  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blurRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "blurRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsIOS#capInsets:member",
              "docComment": "/**\n * When the image is resized, the corners of the size specified by capInsets will stay a fixed size, but the center content and borders of the image will be stretched. This is useful for creating resizable rounded buttons, shadows, and other resizable assets. More info on Apple documentation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "capInsets?: "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "capInsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsIOS#onPartialLoad:member",
              "docComment": "/**\n * Invoked when a partial load of the image is complete. The definition of what constitutes a \"partial load\" is loader specific though this is meant for progressive JPEG loads.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPartialLoad?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPartialLoad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImagePropsIOS#onProgress:member",
              "docComment": "/**\n * Invoked on download progress with {nativeEvent: {loaded, total}}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onProgress?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageProgressEventDataIOS",
                  "canonicalReference": "react-native!ImageProgressEventDataIOS:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onProgress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImageRequireSource:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageRequireSource = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Image/ImageSource.d.ts",
          "releaseTag": "Public",
          "name": "ImageRequireSource",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImageResizeMode:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageResizeMode =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'cover'\n  | 'contain'\n  | 'stretch'\n  | 'repeat'\n  | 'center'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Image/ImageResizeMode.d.ts",
          "releaseTag": "Public",
          "name": "ImageResizeMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageResizeModeStatic:interface",
          "docComment": "/**\n * @see\n *\n * ImageResizeMode.js\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageResizeModeStatic "
            }
          ],
          "fileUrlPath": "Libraries/Image/ImageResizeMode.d.ts",
          "releaseTag": "Public",
          "name": "ImageResizeModeStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResizeModeStatic#center:member",
              "docComment": "/**\n * center - The image will be scaled down such that it is completely visible, if bigger than the area of the view. The image will not be scaled up.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "center: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "center",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResizeModeStatic#contain:member",
              "docComment": "/**\n * contain - The image will be resized such that it will be completely visible, contained within the frame of the View.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contain: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResizeModeStatic#cover:member",
              "docComment": "/**\n * cover - The image will be resized such that the entire area of the view is covered by the image, potentially clipping parts of the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cover: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResizeModeStatic#repeat:member",
              "docComment": "/**\n * repeat - The image will be repeated to cover the frame of the View. The image will keep it's size and aspect ratio.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repeat: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repeat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResizeModeStatic#stretch:member",
              "docComment": "/**\n * stretch - The image will be stretched to fill the entire frame of the view without clipping. This may change the aspect ratio of the image, distoring it. Only supported on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stretch: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stretch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageResolvedAssetSource:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/image#resolveassetsource\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageResolvedAssetSource "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageResolvedAssetSource",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResolvedAssetSource#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResolvedAssetSource#scale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResolvedAssetSource#uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageResolvedAssetSource#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageSize:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageSize "
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageSize",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageSize#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageSize#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ImageSourcePropType:type",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/image#source\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageSourcePropType =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "ImageURISource",
              "canonicalReference": "react-native!ImageURISource:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "ImageURISource",
              "canonicalReference": "react-native!ImageURISource:interface"
            },
            {
              "kind": "Content",
              "text": "[]\n  | "
            },
            {
              "kind": "Reference",
              "text": "ImageRequireSource",
              "canonicalReference": "react-native!ImageRequireSource:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Image/Image.d.ts",
          "releaseTag": "Public",
          "name": "ImageSourcePropType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageStyle:interface",
          "docComment": "/**\n * Image style\n *\n * @see\n *\n * https://reactnative.dev/docs/image#style\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageStyle extends "
            },
            {
              "kind": "Reference",
              "text": "FlexStyle",
              "canonicalReference": "react-native!~FlexStyle:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ShadowStyleIOS",
              "canonicalReference": "react-native!ShadowStyleIOS:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TransformsStyle",
              "canonicalReference": "react-native!TransformsStyle:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ImageStyle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#backfaceVisibility:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backfaceVisibility?: "
                },
                {
                  "kind": "Content",
                  "text": "'visible' | 'hidden' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backfaceVisibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#backgroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderBottomLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomLeftRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderBottomRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomRightRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderTopLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopLeftRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#borderTopRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopRightRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#cursor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cursor?: "
                },
                {
                  "kind": "Reference",
                  "text": "CursorValue",
                  "canonicalReference": "react-native!CursorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cursor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#objectFit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objectFit?: "
                },
                {
                  "kind": "Content",
                  "text": "'cover' | 'contain' | 'fill' | 'scale-down' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "objectFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#opacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#overflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflow?: "
                },
                {
                  "kind": "Content",
                  "text": "'visible' | 'hidden' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#overlayColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlayColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overlayColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#resizeMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizeMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageResizeMode",
                  "canonicalReference": "react-native!ImageResizeMode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resizeMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageStyle#tintColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ImageURISource:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageURISource "
            }
          ],
          "fileUrlPath": "Libraries/Image/ImageSource.d.ts",
          "releaseTag": "Public",
          "name": "ImageURISource",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#body:member",
              "docComment": "/**\n * `body` is the HTTP body to send with the request. This must be a valid UTF-8 string, and will be sent exactly as specified, with no additional encoding (e.g. URL-escaping or base64) applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "body?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#bundle:member",
              "docComment": "/**\n * `bundle` is the iOS asset bundle which the image is included in. This will default to [NSBundle mainBundle] if not set.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bundle?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bundle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#cache:member",
              "docComment": "/**\n * `cache` determines how the requests handles potentially cached responses.\n *\n * - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.\n *\n * - `reload`: The data for the URL will be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.\n *\n * - `force-cache`: The existing cached data will be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.\n *\n * - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cache?: "
                },
                {
                  "kind": "Content",
                  "text": "'default' | 'reload' | 'force-cache' | 'only-if-cached' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#headers:member",
              "docComment": "/**\n * `headers` is an object representing the HTTP headers to send along with the request for a remote image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers?: "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: string} | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#method:member",
              "docComment": "/**\n * `method` is the HTTP Method to use. Defaults to GET if not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#scale:member",
              "docComment": "/**\n * `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if unspecified, meaning that one image pixel equates to one display point / DIP.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#uri:member",
              "docComment": "/**\n * `uri` is a string representing the resource identifier for the image, which could be an http address, a local file path, or the name of a static image resource (which should be wrapped in the `require('./path/to/image.png')` function).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uri?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ImageURISource#width:member",
              "docComment": "/**\n * `width` and `height` can be specified if known at build time, in which case these will be used to set the default `<Image/>` component dimensions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!InputAccessoryView:class",
          "docComment": "/**\n * A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a TextInput has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the InputAccessoryView component, and set a nativeID. Then, pass that nativeID as the inputAccessoryViewID of whatever TextInput you desire.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class InputAccessoryView extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InputAccessoryViewProps",
              "canonicalReference": "react-native!InputAccessoryViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/InputAccessoryView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "InputAccessoryView",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!InputAccessoryViewProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use InputAccessoryViewProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InputAccessoryViewProperties = "
            },
            {
              "kind": "Reference",
              "text": "InputAccessoryViewProps",
              "canonicalReference": "react-native!InputAccessoryViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "InputAccessoryViewProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!InputAccessoryViewProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InputAccessoryViewProps "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/InputAccessoryView.d.ts",
          "releaseTag": "Public",
          "name": "InputAccessoryViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!InputAccessoryViewProps#backgroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!InputAccessoryViewProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!InputAccessoryViewProps#nativeID:member",
              "docComment": "/**\n * An ID which is used to associate this InputAccessoryView to specified TextInput(s).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nativeID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nativeID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!InputAccessoryViewProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!InputModeOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InputModeOptions =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'none'\n  | 'text'\n  | 'decimal'\n  | 'numeric'\n  | 'tel'\n  | 'search'\n  | 'email'\n  | 'url'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "InputModeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!Insets:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Insets "
            }
          ],
          "fileUrlPath": "types/public/Insets.d.ts",
          "releaseTag": "Public",
          "name": "Insets",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Insets#bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Insets#left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Insets#right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Insets#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!InteractionManager:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InteractionManager: "
            },
            {
              "kind": "Reference",
              "text": "InteractionManagerStatic",
              "canonicalReference": "react-native!InteractionManagerStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/InteractionManager.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InteractionManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!InteractionManagerStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InteractionManagerStatic "
            }
          ],
          "fileUrlPath": "Libraries/Interaction/InteractionManager.d.ts",
          "releaseTag": "Public",
          "name": "InteractionManagerStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!InteractionManagerStatic#addListener:member(1)",
              "docComment": "/**\n * Adds a listener to be invoked when events of the specified type are emitted. An optional calling context may be provided. The data arguments emitted will be passed to the listener function.\n *\n * @param eventType - Name of the event to listen to\n *\n * @param listener - Function to invoke when the specified event is emitted\n *\n * @param context - Optional context object to use when invoking the listener\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(\n    eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: any[]) => any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "addListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!InteractionManagerStatic#clearInteractionHandle:member(1)",
              "docComment": "/**\n * Notify manager that an interaction has completed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearInteractionHandle(handle: "
                },
                {
                  "kind": "Reference",
                  "text": "Handle",
                  "canonicalReference": "react-native!Handle:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clearInteractionHandle"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!InteractionManagerStatic#createInteractionHandle:member(1)",
              "docComment": "/**\n * Notify manager that an interaction has started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createInteractionHandle(): "
                },
                {
                  "kind": "Reference",
                  "text": "Handle",
                  "canonicalReference": "react-native!Handle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "createInteractionHandle"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!InteractionManagerStatic#Events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Events: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    interactionStart: string;\n    interactionComplete: string;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!InteractionManagerStatic#runAfterInteractions:member(1)",
              "docComment": "/**\n * Schedule a function to run after all interactions have completed. Returns a cancellable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runAfterInteractions(task?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => any) | "
                },
                {
                  "kind": "Reference",
                  "text": "SimpleTask",
                  "canonicalReference": "react-native!SimpleTask:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseTask",
                  "canonicalReference": "react-native!PromiseTask:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n    then: (onfulfilled?: () => any, onrejected?: () => any) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>;\n    done: (...args: any[]) => any;\n    cancel: () => void;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "task",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "runAfterInteractions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!InteractionManagerStatic#setDeadline:member(1)",
              "docComment": "/**\n * A positive number will use setTimeout to schedule any tasks after the eventLoopRunningTime hits the deadline value, otherwise all tasks will be executed in one setImmediate batch (default).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDeadline(deadline: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "deadline",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setDeadline"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!~IPerformanceLogger:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPerformanceLogger "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/IPerformanceLogger.d.ts",
          "releaseTag": "Public",
          "name": "IPerformanceLogger",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#addTimespan:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTimespan(\n    key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    startTime: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    endTime: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    startExtras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    endExtras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "startTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "startExtras",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "endExtras",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "name": "addTimespan"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#append:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append(logger: "
                },
                {
                  "kind": "Reference",
                  "text": "IPerformanceLogger",
                  "canonicalReference": "react-native!~IPerformanceLogger:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "logger",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "append"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#clear:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#clearCompleted:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearCompleted(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearCompleted"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#close:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#currentTimestamp:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentTimestamp(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "currentTimestamp"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#getExtras:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getExtras(): "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtraValue",
                  "canonicalReference": "react-native!~ExtraValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getExtras"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#getPointExtras:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPointExtras(): "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": " | null}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getPointExtras"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#getPoints:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPoints(): "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: number | null}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getPoints"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#getTimespans:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTimespans(): "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Timespan",
                  "canonicalReference": "react-native!~Timespan:type"
                },
                {
                  "kind": "Content",
                  "text": " | null}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTimespans"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#hasTimespan:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTimespan(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "hasTimespan"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#isClosed:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isClosed(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isClosed"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#logEverything:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logEverything(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "logEverything"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#markPoint:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "markPoint(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", extras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "extras",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "markPoint"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#removeExtra:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeExtra(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ExtraValue",
                  "canonicalReference": "react-native!~ExtraValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "removeExtra"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#setExtra:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setExtra(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtraValue",
                  "canonicalReference": "react-native!~ExtraValue:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "setExtra"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#startTimespan:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startTimespan(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", extras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "extras",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "startTimespan"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!~IPerformanceLogger#stopTimespan:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopTimespan(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", extras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Extras",
                  "canonicalReference": "react-native!~Extras:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "extras",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "stopTimespan"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~isEnabled:function(1)",
          "docComment": "/**\n * Indicates if the application is currently being traced.\n *\n * Calling methods on this module when the application isn't being traced is cheap, but this method can be used to avoid computing expensive values for those functions.\n *\n * @example\n *\n * if (Systrace.isEnabled()) { const expensiveArgs = computeExpensiveArgs(); Systrace.beginEvent('myEvent', expensiveArgs); }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function isEnabled(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isEnabled"
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Keyboard:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Keyboard: "
            },
            {
              "kind": "Reference",
              "text": "KeyboardStatic",
              "canonicalReference": "react-native!KeyboardStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Keyboard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!KeyboardAvoidingView:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class KeyboardAvoidingView extends "
            },
            {
              "kind": "Reference",
              "text": "KeyboardAvoidingViewBase",
              "canonicalReference": "react-native!KeyboardAvoidingViewBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/KeyboardAvoidingView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "KeyboardAvoidingView",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!KeyboardAvoidingViewBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KeyboardAvoidingViewBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TimerMixin",
              "canonicalReference": "react-native!~TimerMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "KeyboardAvoidingViewComponent",
              "canonicalReference": "react-native!KeyboardAvoidingViewComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/KeyboardAvoidingView.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "KeyboardAvoidingViewBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!KeyboardAvoidingViewComponent:class",
          "docComment": "/**\n * It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its position or bottom padding based on the position of the keyboard.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class KeyboardAvoidingViewComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "KeyboardAvoidingViewProps",
              "canonicalReference": "react-native!KeyboardAvoidingViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/KeyboardAvoidingView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "KeyboardAvoidingViewComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!KeyboardAvoidingViewProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface KeyboardAvoidingViewProps extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/KeyboardAvoidingView.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardAvoidingViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardAvoidingViewProps#behavior:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "behavior?: "
                },
                {
                  "kind": "Content",
                  "text": "'height' | 'position' | 'padding' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "behavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardAvoidingViewProps#contentContainerStyle:member",
              "docComment": "/**\n * The style of the content container(View) when behavior is 'position'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentContainerStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentContainerStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardAvoidingViewProps#enabled:member",
              "docComment": "/**\n * Enables or disables the KeyboardAvoidingView.\n *\n * Default is true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardAvoidingViewProps#keyboardVerticalOffset:member",
              "docComment": "/**\n * This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardVerticalOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardVerticalOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!KeyboardEvent_2:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface KeyboardEvent extends "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "KeyboardEventIOS",
              "canonicalReference": "react-native!KeyboardEventIOS:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardEvent_2",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardEvent_2#duration:member",
              "docComment": "/**\n * Always set to 0 on Android.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardEvent_2#easing:member",
              "docComment": "/**\n * Always set to \"keyboard\" on Android.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "easing: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEventEasing",
                  "canonicalReference": "react-native!KeyboardEventEasing:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "easing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardEvent_2#endCoordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endCoordinates: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardMetrics",
                  "canonicalReference": "react-native!KeyboardMetrics:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "endCoordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardEventEasing:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardEventEasing =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'easeIn'\n  | 'easeInEaseOut'\n  | 'easeOut'\n  | 'linear'\n  | 'keyboard'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardEventEasing",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!KeyboardEventIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface KeyboardEventIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardEventIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardEventIOS#isEventFromThisApp:member",
              "docComment": "/**\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEventFromThisApp: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isEventFromThisApp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardEventIOS#startCoordinates:member",
              "docComment": "/**\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCoordinates: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardMetrics",
                  "canonicalReference": "react-native!KeyboardMetrics:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startCoordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardEventListener:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type KeyboardEventListener = "
            },
            {
              "kind": "Content",
              "text": "(event: "
            },
            {
              "kind": "Reference",
              "text": "KeyboardEvent",
              "canonicalReference": "react-native!KeyboardEvent_2:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardEventListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardEventName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardEventName =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'keyboardWillShow'\n  | 'keyboardDidShow'\n  | 'keyboardWillHide'\n  | 'keyboardDidHide'\n  | 'keyboardWillChangeFrame'\n  | 'keyboardDidChangeFrame'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardEventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardMetrics:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type KeyboardMetrics = "
            },
            {
              "kind": "Content",
              "text": "{\n  screenX: number;\n  screenY: number;\n  width: number;\n  height: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardMetrics",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!KeyboardStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface KeyboardStatic extends "
            },
            {
              "kind": "Reference",
              "text": "NativeEventEmitter",
              "canonicalReference": "react-native!NativeEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Keyboard/Keyboard.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardStatic#addListener:member",
              "docComment": "/**\n * The `addListener` function connects a JavaScript function to an identified native keyboard notification event.\n *\n * This function then returns the reference to the listener.\n *\n * {string} eventName The `nativeEvent` is the string that identifies the event you're listening for. This can be any of the following:\n *\n * - `keyboardWillShow` - `keyboardDidShow` - `keyboardWillHide` - `keyboardDidHide` - `keyboardWillChangeFrame` - `keyboardDidChangeFrame`\n *\n * Note that if you set `android:windowSoftInputMode` to `adjustResize` or `adjustNothing`, only `keyboardDidShow` and `keyboardDidHide` events will be available on Android. `keyboardWillShow` as well as `keyboardWillHide` are generally not available on Android since there is no native corresponding event.\n *\n * {function} callback function to be called when the event fires.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    eventType: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEventName",
                  "canonicalReference": "react-native!KeyboardEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEventListener",
                  "canonicalReference": "react-native!KeyboardEventListener:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "addListener",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardStatic#dismiss:member",
              "docComment": "/**\n * Dismisses the active keyboard and removes focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!KeyboardStatic#isVisible:member(1)",
              "docComment": "/**\n * Whether the keyboard is last known to be visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isVisible(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isVisible"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!KeyboardStatic#metrics:member(1)",
              "docComment": "/**\n * Return the metrics of the soft-keyboard if visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metrics(): "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardMetrics",
                  "canonicalReference": "react-native!KeyboardMetrics:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "metrics"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!KeyboardStatic#scheduleLayoutAnimation:member",
              "docComment": "/**\n * Useful for syncing TextInput (or other keyboard accessory view) size of position changes with keyboard movements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scheduleLayoutAnimation: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "react-native!KeyboardEvent_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scheduleLayoutAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardType =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'default'\n  | 'number-pad'\n  | 'decimal-pad'\n  | 'numeric'\n  | 'email-address'\n  | 'phone-pad'\n  | 'url'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardTypeAndroid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardTypeAndroid = "
            },
            {
              "kind": "Content",
              "text": "'visible-password'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardTypeAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardTypeIOS:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardTypeIOS =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardTypeIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!KeyboardTypeOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardTypeOptions =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "KeyboardType",
              "canonicalReference": "react-native!KeyboardType:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "KeyboardTypeAndroid",
              "canonicalReference": "react-native!KeyboardTypeAndroid:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "KeyboardTypeIOS",
              "canonicalReference": "react-native!KeyboardTypeIOS:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "KeyboardTypeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutAnimation:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutAnimation = "
            },
            {
              "kind": "Reference",
              "text": "LayoutAnimationStatic",
              "canonicalReference": "react-native!LayoutAnimationStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!LayoutAnimation:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LayoutAnimation: "
            },
            {
              "kind": "Reference",
              "text": "LayoutAnimationStatic",
              "canonicalReference": "react-native!LayoutAnimationStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LayoutAnimation",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LayoutAnimationAnim:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LayoutAnimationAnim "
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationAnim",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#delay:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#duration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#initialVelocity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialVelocity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "initialVelocity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#property:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "property?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationProperty",
                  "canonicalReference": "react-native!LayoutAnimationProperty:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "property",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#springDamping:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "springDamping?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "springDamping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationAnim#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationType",
                  "canonicalReference": "react-native!LayoutAnimationType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LayoutAnimationConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LayoutAnimationConfig "
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationConfig#create:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationAnim",
                  "canonicalReference": "react-native!LayoutAnimationAnim:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "create",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationConfig#delete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationAnim",
                  "canonicalReference": "react-native!LayoutAnimationAnim:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationConfig#duration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationConfig#update:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationAnim",
                  "canonicalReference": "react-native!LayoutAnimationAnim:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "update",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutAnimationProperties:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutAnimationProperties = "
            },
            {
              "kind": "Content",
              "text": "{\n  [prop in "
            },
            {
              "kind": "Reference",
              "text": "LayoutAnimationProperty",
              "canonicalReference": "react-native!LayoutAnimationProperty:type"
            },
            {
              "kind": "Content",
              "text": "]: prop;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutAnimationProperty:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutAnimationProperty =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'opacity'\n  | 'scaleX'\n  | 'scaleY'\n  | 'scaleXY'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationProperty",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LayoutAnimationStatic:interface",
          "docComment": "/**\n * Automatically animates views to their new positions when the next layout happens. A common way to use this API is to call LayoutAnimation.configureNext before calling setState.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LayoutAnimationStatic "
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#configChecker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configChecker: "
                },
                {
                  "kind": "Content",
                  "text": "(shapeTypes: {[key: string]: any}) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "configChecker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#configureNext:member",
              "docComment": "/**\n * Schedules an animation to happen on the next layout.\n *\n * @param config - Specifies animation properties: `duration` in milliseconds `create`, config for animating in new views (see Anim type) `update`, config for animating views that have been updated (see Anim type)\n *\n * @param onAnimationDidEnd - Called when the animation finished. Only supported on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configureNext: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    config: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationConfig",
                  "canonicalReference": "react-native!LayoutAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    onAnimationDidEnd?: () => void,\n    onAnimationDidFail?: () => void,\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "configureNext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#create:member",
              "docComment": "/**\n * Helper for creating a config for configureNext.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    duration: number,\n    type?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationType",
                  "canonicalReference": "react-native!LayoutAnimationType:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    creationProp?: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationProperty",
                  "canonicalReference": "react-native!LayoutAnimationProperty:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationConfig",
                  "canonicalReference": "react-native!LayoutAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "create",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#easeInEaseOut:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "easeInEaseOut: "
                },
                {
                  "kind": "Content",
                  "text": "(onAnimationDidEnd?: () => void) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "easeInEaseOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#linear:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linear: "
                },
                {
                  "kind": "Content",
                  "text": "(onAnimationDidEnd?: () => void) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#Presets:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Presets: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    easeInEaseOut: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationConfig",
                  "canonicalReference": "react-native!LayoutAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    linear: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationConfig",
                  "canonicalReference": "react-native!LayoutAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    spring: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationConfig",
                  "canonicalReference": "react-native!LayoutAnimationConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Presets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#Properties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Properties: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationProperties",
                  "canonicalReference": "react-native!LayoutAnimationProperties:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Properties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#spring:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spring: "
                },
                {
                  "kind": "Content",
                  "text": "(onAnimationDidEnd?: () => void) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "spring",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutAnimationStatic#Types:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Types: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutAnimationTypes",
                  "canonicalReference": "react-native!LayoutAnimationTypes:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Types",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutAnimationType:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutAnimationType =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'spring'\n  | 'linear'\n  | 'easeInEaseOut'\n  | 'easeIn'\n  | 'easeOut'\n  | 'keyboard'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutAnimationTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutAnimationTypes = "
            },
            {
              "kind": "Content",
              "text": "{\n  [type in "
            },
            {
              "kind": "Reference",
              "text": "LayoutAnimationType",
              "canonicalReference": "react-native!LayoutAnimationType:type"
            },
            {
              "kind": "Content",
              "text": "]: type;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LayoutAnimation/LayoutAnimation.d.ts",
          "releaseTag": "Public",
          "name": "LayoutAnimationTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LayoutChangeEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LayoutChangeEvent = "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<{layout: "
            },
            {
              "kind": "Reference",
              "text": "LayoutRectangle",
              "canonicalReference": "react-native!LayoutRectangle:interface"
            },
            {
              "kind": "Content",
              "text": "}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "LayoutChangeEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LayoutRectangle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LayoutRectangle "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "LayoutRectangle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutRectangle#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutRectangle#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutRectangle#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!LayoutRectangle#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Linking:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Linking = "
            },
            {
              "kind": "Reference",
              "text": "LinkingStatic",
              "canonicalReference": "react-native!LinkingStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Linking/Linking.d.ts",
          "releaseTag": "Public",
          "name": "Linking",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Linking:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Linking: "
            },
            {
              "kind": "Reference",
              "text": "LinkingStatic",
              "canonicalReference": "react-native!LinkingStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Linking/Linking.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Linking",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LinkingStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LinkingStatic extends "
            },
            {
              "kind": "Reference",
              "text": "NativeEventEmitter",
              "canonicalReference": "react-native!NativeEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Linking/Linking.d.ts",
          "releaseTag": "Public",
          "name": "LinkingStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#addEventListener:member(1)",
              "docComment": "/**\n * Add a handler to Linking changes by listening to the `url` event type and providing the handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "'url'"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "(event: {url: string}) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#canOpenURL:member(1)",
              "docComment": "/**\n * Determine whether or not an installed app can handle a given URL. NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly! NOTE: As of iOS 9, your app needs to provide the LSApplicationQueriesSchemes key inside Info.plist.\n *\n * @param URL - the URL to open\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canOpenURL(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "canOpenURL"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#getInitialURL:member(1)",
              "docComment": "/**\n * If the app launch was triggered by an app link with, it will give the link url, otherwise it will give null NOTE: To support deep linking on Android, refer http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInitialURL(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getInitialURL"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#openSettings:member(1)",
              "docComment": "/**\n * Open the Settings app and displays the app’s custom settings, if it has any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openSettings(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "openSettings"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#openURL:member(1)",
              "docComment": "/**\n * Try to open the given url with any of the installed apps. You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\"), a contact, or any other URL that can be opened with the installed apps. NOTE: This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first. NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openURL(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "openURL"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LinkingStatic#sendIntent:member(1)",
              "docComment": "/**\n * Sends an Android Intent - a broad surface to express Android functions. Useful for deep-linking to settings pages, opening an SMS app with a message draft in place, and more. See https://developer.android.com/reference/kotlin/android/content/Intent?hl=en\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendIntent(\n    action: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    extras?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{key: string; value: string | number | boolean}>"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "extras",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "sendIntent"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!LogBox:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogBox = "
            },
            {
              "kind": "Reference",
              "text": "LogBoxStatic",
              "canonicalReference": "react-native!LogBoxStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/LogBox/LogBox.d.ts",
          "releaseTag": "Public",
          "name": "LogBox",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!LogBox:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LogBox: "
            },
            {
              "kind": "Reference",
              "text": "LogBoxStatic",
              "canonicalReference": "react-native!LogBoxStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/LogBox/LogBox.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LogBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!LogBoxStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LogBoxStatic "
            }
          ],
          "fileUrlPath": "Libraries/LogBox/LogBox.d.ts",
          "releaseTag": "Public",
          "name": "LogBoxStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LogBoxStatic#ignoreAllLogs:member(1)",
              "docComment": "/**\n * Toggle error and warning notifications Note: this only disables notifications, uncaught errors will still open a full screen LogBox.\n *\n * @param ignore - whether to ignore logs or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreAllLogs(ignore?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ignore",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "ignoreAllLogs"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LogBoxStatic#ignoreLogs:member(1)",
              "docComment": "/**\n * Silence any logs that match the given strings or regexes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreLogs(patterns: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "patterns",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "ignoreLogs"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LogBoxStatic#install:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "install(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "install"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!LogBoxStatic#uninstall:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uninstall(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "uninstall"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!MatrixTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface MatrixTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "MatrixTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!MatrixTransform#matrix:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "matrix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!MaximumOneOf:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type MaximumOneOf<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "K extends keyof T\n  ? {[P in K]: T[K]} & {[P in "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof T, K>]?: never}\n  : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "MaximumOneOf",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!MeasureInWindowOnSuccessCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MeasureInWindowOnSuccessCallback = "
            },
            {
              "kind": "Content",
              "text": "(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "MeasureInWindowOnSuccessCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!MeasureLayoutOnSuccessCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MeasureLayoutOnSuccessCallback = "
            },
            {
              "kind": "Content",
              "text": "(\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "MeasureLayoutOnSuccessCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!MeasureOnSuccessCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MeasureOnSuccessCallback = "
            },
            {
              "kind": "Content",
              "text": "(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  pageX: number,\n  pageY: number,\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "MeasureOnSuccessCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!Modal:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class Modal extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ModalProps",
              "canonicalReference": "react-native!ModalProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Modal/Modal.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Modal",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ModalBaseProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ModalBaseProps "
            }
          ],
          "fileUrlPath": "Libraries/Modal/Modal.d.ts",
          "releaseTag": "Public",
          "name": "ModalBaseProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#animated:member",
              "docComment": "/**\n * @deprecated\n *\n * Use animationType instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#animationType:member",
              "docComment": "/**\n * The `animationType` prop controls how the modal animates.\n *\n * - `slide` slides in from the bottom - `fade` fades into view - `none` appears without an animation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animationType?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'slide' | 'fade' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#onRequestClose:member",
              "docComment": "/**\n * The `onRequestClose` callback is called when the user taps the hardware back button on Android or the menu button on Apple TV.\n *\n * This is required on Apple TV and Android.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRequestClose?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRequestClose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#onShow:member",
              "docComment": "/**\n * The `onShow` prop allows passing a function that will be called once the modal has been shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onShow?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onShow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#transparent:member",
              "docComment": "/**\n * The `transparent` prop determines whether your modal will fill the entire view. Setting this to `true` will render the modal over a transparent background.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalBaseProps#visible:member",
              "docComment": "/**\n * The `visible` prop determines whether your modal is visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ModalProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ModalProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModalProperties = "
            },
            {
              "kind": "Reference",
              "text": "ModalProps",
              "canonicalReference": "react-native!ModalProps:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ModalProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ModalProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModalProps = "
            },
            {
              "kind": "Reference",
              "text": "ModalBaseProps",
              "canonicalReference": "react-native!ModalBaseProps:interface"
            },
            {
              "kind": "Content",
              "text": " &\n  "
            },
            {
              "kind": "Reference",
              "text": "ModalPropsIOS",
              "canonicalReference": "react-native!ModalPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": " &\n  "
            },
            {
              "kind": "Reference",
              "text": "ModalPropsAndroid",
              "canonicalReference": "react-native!ModalPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": " &\n  "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Modal/Modal.d.ts",
          "releaseTag": "Public",
          "name": "ModalProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ModalPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ModalPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Modal/Modal.d.ts",
          "releaseTag": "Public",
          "name": "ModalPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsAndroid#hardwareAccelerated:member",
              "docComment": "/**\n * Controls whether to force hardware acceleration for the underlying window.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hardwareAccelerated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hardwareAccelerated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsAndroid#statusBarTranslucent:member",
              "docComment": "/**\n * Determines whether your modal should go under the system statusbar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusBarTranslucent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "statusBarTranslucent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ModalPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ModalPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Modal/Modal.d.ts",
          "releaseTag": "Public",
          "name": "ModalPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsIOS#onDismiss:member",
              "docComment": "/**\n * The `onDismiss` prop allows passing a function that will be called once the modal has been dismissed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsIOS#onOrientationChange:member",
              "docComment": "/**\n * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed. The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onOrientationChange?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onOrientationChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsIOS#presentationStyle:member",
              "docComment": "/**\n * The `presentationStyle` determines the style of modal to show\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presentationStyle?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "presentationStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ModalPropsIOS#supportedOrientations:member",
              "docComment": "/**\n * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations. On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "supportedOrientations?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<\n        | 'portrait'\n        | 'portrait-upside-down'\n        | 'landscape'\n        | 'landscape-left'\n        | 'landscape-right'\n      >\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "supportedOrientations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Module:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Module = "
            },
            {
              "kind": "Reference",
              "text": "Object",
              "canonicalReference": "!Object:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Core/registerCallableModule.d.ts",
          "releaseTag": "Public",
          "name": "Module",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!MouseEvent_2:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MouseEvent extends "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMouseEvent",
              "canonicalReference": "react-native!NativeMouseEvent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "MouseEvent_2",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!NativeAppEventEmitter:var",
          "docComment": "/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of adding all event listeners directly to RCTNativeAppEventEmitter.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NativeAppEventEmitter: "
            },
            {
              "kind": "Reference",
              "text": "RCTNativeAppEventEmitter",
              "canonicalReference": "react-native!RCTNativeAppEventEmitter:type"
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/RCTNativeAppEventEmitter.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NativeAppEventEmitter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!NativeEventEmitter:class",
          "docComment": "/**\n * Abstract base class for implementing event-emitting modules. This implements a subset of the standard EventEmitter node module API.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class NativeEventEmitter extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "react-native!~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/NativeEventEmitter.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "NativeEventEmitter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "react-native!NativeEventEmitter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NativeEventEmitter` class\n *\n * @param nativeModule - the NativeModule implementation. This is required on IOS and will throw an invariant error if undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(nativeModule?: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeModule",
                  "canonicalReference": "react-native!NativeModule:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nativeModule",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!NativeEventEmitter#addListener:member(1)",
              "docComment": "/**\n * Add the specified listener, this call passes through to the NativeModule addListener\n *\n * @param eventType - name of the event for which we are registering listener\n *\n * @param listener - the listener function\n *\n * @param context - context of the listener\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(\n    eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "(event: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context?: "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "EmitterSubscription",
                  "canonicalReference": "react-native!EmitterSubscription:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addListener"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!NativeEventEmitter#removeAllListeners:member(1)",
              "docComment": "/**\n * @param eventType - name of the event whose registered listeners to remove\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllListeners(eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeAllListeners"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeEventSubscription:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeEventSubscription "
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/RCTNativeAppEventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "NativeEventSubscription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeEventSubscription#remove:member(1)",
              "docComment": "/**\n * Call this method to un-subscribe from a native-event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remove"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeMethods:interface",
          "docComment": "/**\n * NativeMethods provides methods to access the underlying native component directly. This can be useful in cases when you want to focus a view or measure its on-screen dimensions, for example. The methods described here are available on most of the default components provided by React Native. Note, however, that they are not available on composite components that aren't directly backed by a native view. This will generally include most components that you define in your own app. For more information, see [Direct Manipulation](https://reactnative.dev/docs/direct-manipulation).\n *\n * @see\n *\n * https://github.com/facebook/react-native/blob/master/Libraries/Renderer/shims/ReactNativeTypes.js#L87\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeMethods "
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeMethods",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#blur:member(1)",
              "docComment": "/**\n * Removes focus from an input or view. This is the opposite of `focus()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blur(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "blur"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#focus:member(1)",
              "docComment": "/**\n * Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#measure:member(1)",
              "docComment": "/**\n * Determines the location on screen, width, and height of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:\n *\n * - x - y - width - height - pageX - pageY\n *\n * Note that these measurements are not available until after the rendering has been completed in native. If you need the measurements as soon as possible, consider using the [`onLayout` prop](docs/view.html#onlayout) instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measure(callback: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "measure"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#measureInWindow:member(1)",
              "docComment": "/**\n * Determines the location of the given view in the window and returns the values via an async callback. If the React root view is embedded in another native view, this will give you the absolute coordinates. If successful, the callback will be called with the following arguments:\n *\n * - x - y - width - height\n *\n * Note that these measurements are not available until after the rendering has been completed in native.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureInWindow(callback: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureInWindowOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureInWindowOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "measureInWindow"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#measureLayout:member(1)",
              "docComment": "/**\n * Like [`measure()`](#measure), but measures the view relative an ancestor, specified as `relativeToNativeComponentRef`. This means that the returned x, y are relative to the origin x, y of the ancestor view. _Can also be called with a relativeNativeNodeHandle but is deprecated._\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureLayout(\n    relativeToNativeComponentRef:\n      "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>\n      | number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    onSuccess: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureLayoutOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureLayoutOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    onFail?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "relativeToNativeComponentRef",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "onSuccess",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "onFail",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "name": "measureLayout"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMethods#refs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refs: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Component",
                  "canonicalReference": "@types/react!React.Component:class"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!NativeMethods#setNativeProps:member(1)",
              "docComment": "/**\n * This function sends props straight to native. They will not participate in future diff process - this means that if you do not include them in the next render, they will remain active (see [Direct Manipulation](https://reactnative.dev/docs/direct-manipulation)).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNativeProps(nativeProps: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nativeProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setNativeProps"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!NativeMethodsMixin:type",
          "docComment": "/**\n * @deprecated\n *\n * Use NativeMethods instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NativeMethodsMixin = "
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeMethodsMixin",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!NativeMethodsMixinType:type",
          "docComment": "/**\n * @deprecated\n *\n * Use NativeMethods instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NativeMethodsMixinType = "
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeMethodsMixinType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!NativeModule:type",
          "docComment": "/**\n * The React Native implementation of the IOS RCTEventEmitter which is required when creating a module that communicates with IOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type NativeModule = "
            },
            {
              "kind": "Content",
              "text": "{\n  addListener: (eventType: string) => void;\n\n  removeListeners: (count: number) => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/NativeEventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "NativeModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!NativeModules:var",
          "docComment": "/**\n * Native Modules written in ObjectiveC/Swift/Java exposed via the RCTBridge Define lazy getters for each module. These will return the module if already loaded, or load it if not. See https://reactnative.dev/docs/native-modules-ios\n *\n * @example\n *\n * const MyModule = NativeModules.ModuleName\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NativeModules: "
            },
            {
              "kind": "Reference",
              "text": "NativeModulesStatic",
              "canonicalReference": "react-native!NativeModulesStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/BatchedBridge/NativeModules.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NativeModules",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeModulesStatic:interface",
          "docComment": "/**\n * Interface for NativeModules which allows to augment NativeModules with type information. See react-native-sensor-manager for example.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface NativeModulesStatic "
            }
          ],
          "fileUrlPath": "Libraries/BatchedBridge/NativeModules.d.ts",
          "releaseTag": "Public",
          "name": "NativeModulesStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "react-native!NativeModulesStatic:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeMouseEvent:interface",
          "docComment": "/**\n * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeMouseEvent extends "
            },
            {
              "kind": "Reference",
              "text": "NativeUIEvent",
              "canonicalReference": "react-native!NativeUIEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeMouseEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#altKey:member",
              "docComment": "/**\n * Returns true if the alt key was down when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly altKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "altKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#button:member",
              "docComment": "/**\n * The button number that was pressed (if applicable) when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly button: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#buttons:member",
              "docComment": "/**\n * The buttons being depressed (if any) when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly buttons: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "buttons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#clientX:member",
              "docComment": "/**\n * The X coordinate of the mouse pointer in local (DOM content) coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly clientX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#clientY:member",
              "docComment": "/**\n * The Y coordinate of the mouse pointer in local (DOM content) coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly clientY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#ctrlKey:member",
              "docComment": "/**\n * Returns true if the control key was down when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ctrlKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ctrlKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#metaKey:member",
              "docComment": "/**\n * Returns true if the meta key was down when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly metaKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metaKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#offsetX:member",
              "docComment": "/**\n * The X coordinate of the mouse pointer between that event and the padding edge of the target node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly offsetX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#offsetY:member",
              "docComment": "/**\n * The Y coordinate of the mouse pointer between that event and the padding edge of the target node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly offsetY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#pageX:member",
              "docComment": "/**\n * The X coordinate of the mouse pointer relative to the whole document.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pageX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#pageY:member",
              "docComment": "/**\n * The Y coordinate of the mouse pointer relative to the whole document.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pageY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#relatedTarget:member",
              "docComment": "/**\n * The secondary target for the event, if there is one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly relatedTarget:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| null\n    | number\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "relatedTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#screenX:member",
              "docComment": "/**\n * The X coordinate of the mouse pointer in global (screen) coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly screenX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#screenY:member",
              "docComment": "/**\n * The Y coordinate of the mouse pointer in global (screen) coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly screenY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#shiftKey:member",
              "docComment": "/**\n * Returns true if the shift key was down when the mouse event was fired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly shiftKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shiftKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#x:member",
              "docComment": "/**\n * Alias for NativeMouseEvent.clientX\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeMouseEvent#y:member",
              "docComment": "/**\n * Alias for NativeMouseEvent.clientY\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativePointerEvent:interface",
          "docComment": "/**\n * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativePointerEvent extends "
            },
            {
              "kind": "Reference",
              "text": "NativeMouseEvent",
              "canonicalReference": "react-native!NativeMouseEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativePointerEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#height:member",
              "docComment": "/**\n * The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#isPrimary:member",
              "docComment": "/**\n * Indicates if the pointer represents the primary pointer of this pointer type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isPrimary: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isPrimary",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#pointerId:member",
              "docComment": "/**\n * A unique identifier for the pointer causing the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pointerId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pointerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#pointerType:member",
              "docComment": "/**\n * Indicates the device type that caused the event (mouse, pen, touch, etc.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pointerType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pointerType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#pressure:member",
              "docComment": "/**\n * The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pressure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#tangentialPressure:member",
              "docComment": "/**\n * The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tangentialPressure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tangentialPressure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#tiltX:member",
              "docComment": "/**\n * The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tiltX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tiltX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#tiltY:member",
              "docComment": "/**\n * The plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tiltY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tiltY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#twist:member",
              "docComment": "/**\n * The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly twist: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "twist",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativePointerEvent#width:member",
              "docComment": "/**\n * The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeScrollEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeScrollEvent "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "NativeScrollEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#contentInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentInset: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollRectangle",
                  "canonicalReference": "react-native!NativeScrollRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#contentOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentOffset: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollPoint",
                  "canonicalReference": "react-native!NativeScrollPoint:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#contentSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentSize: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollSize",
                  "canonicalReference": "react-native!NativeScrollSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#layoutMeasurement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layoutMeasurement: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollSize",
                  "canonicalReference": "react-native!NativeScrollSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "layoutMeasurement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#targetContentOffset:member",
              "docComment": "/**\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetContentOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollPoint",
                  "canonicalReference": "react-native!NativeScrollPoint:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "targetContentOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#velocity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "velocity?: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollVelocity",
                  "canonicalReference": "react-native!NativeScrollVelocity:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "velocity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollEvent#zoomScale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomScale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "zoomScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeScrollPoint:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeScrollPoint "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "NativeScrollPoint",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollPoint#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollPoint#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeScrollRectangle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeScrollRectangle "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "NativeScrollRectangle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollRectangle#bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollRectangle#left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollRectangle#right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollRectangle#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeScrollSize:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeScrollSize "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "NativeScrollSize",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollSize#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollSize#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeScrollVelocity:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeScrollVelocity "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "NativeScrollVelocity",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollVelocity#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeScrollVelocity#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeSyntheticEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeSyntheticEvent<T>\n  extends "
            },
            {
              "kind": "Reference",
              "text": "React.BaseSyntheticEvent",
              "canonicalReference": "@types/react!React.BaseSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<\n    T,\n    "
            },
            {
              "kind": "Reference",
              "text": "React.ElementRef",
              "canonicalReference": "@types/react!React.ElementRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HostComponent",
              "canonicalReference": "react-native!HostComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>>,\n    "
            },
            {
              "kind": "Reference",
              "text": "React.ElementRef",
              "canonicalReference": "@types/react!React.ElementRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HostComponent",
              "canonicalReference": "react-native!HostComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>>\n  >"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "NativeSyntheticEvent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeTouchEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeTouchEvent "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeTouchEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#changedTouches:member",
              "docComment": "/**\n * Array of all touch events that have changed since the last event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "changedTouches: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeTouchEvent",
                  "canonicalReference": "react-native!NativeTouchEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changedTouches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#force:member",
              "docComment": "/**\n * 3D Touch reported force  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "force?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "force",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#identifier:member",
              "docComment": "/**\n * The ID of the touch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "identifier: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "identifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#locationX:member",
              "docComment": "/**\n * The X position of the touch, relative to the element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "locationX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "locationX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#locationY:member",
              "docComment": "/**\n * The Y position of the touch, relative to the element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "locationY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "locationY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#pageX:member",
              "docComment": "/**\n * The X position of the touch, relative to the screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#pageY:member",
              "docComment": "/**\n * The Y position of the touch, relative to the screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#target:member",
              "docComment": "/**\n * The node id of the element receiving the touch event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#timestamp:member",
              "docComment": "/**\n * A time identifier for the touch, useful for velocity calculation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeTouchEvent#touches:member",
              "docComment": "/**\n * Array of all current touches on the screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touches: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeTouchEvent",
                  "canonicalReference": "react-native!NativeTouchEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "touches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!NativeUIEvent:interface",
          "docComment": "/**\n * https://developer.mozilla.org/en-US/docs/Web/API/UIEvent\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NativeUIEvent "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "NativeUIEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!NativeUIEvent#detail:member",
              "docComment": "/**\n * Returns a long with details about the event, depending on the event type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly detail: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "detail",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!NodeHandle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NodeHandle = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/RendererProxy.d.ts",
          "releaseTag": "Public",
          "name": "NodeHandle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!OpaqueColorValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type OpaqueColorValue = "
            },
            {
              "kind": "Content",
              "text": "symbol & {__TYPE__: 'Color'}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "OpaqueColorValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PanResponder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PanResponder = "
            },
            {
              "kind": "Reference",
              "text": "PanResponderStatic",
              "canonicalReference": "react-native!PanResponderStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "releaseTag": "Public",
          "name": "PanResponder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!PanResponder:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PanResponder: "
            },
            {
              "kind": "Reference",
              "text": "PanResponderStatic",
              "canonicalReference": "react-native!PanResponderStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PanResponder",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PanResponderCallbacks:interface",
          "docComment": "/**\n * @see\n *\n * documentation of GestureResponderHandlers\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PanResponderCallbacks "
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "releaseTag": "Public",
          "name": "PanResponderCallbacks",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onMoveShouldSetPanResponder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMoveShouldSetPanResponder?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMoveShouldSetPanResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onMoveShouldSetPanResponderCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMoveShouldSetPanResponderCapture?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMoveShouldSetPanResponderCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderEnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderEnd?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderGrant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderGrant?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderGrant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderMove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderMove?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderReject:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderReject?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderReject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderRelease:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderRelease?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderRelease",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderStart?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderTerminate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderTerminate?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderTerminate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onPanResponderTerminationRequest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPanResponderTerminationRequest?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPanResponderTerminationRequest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onShouldBlockNativeResponder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onShouldBlockNativeResponder?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onShouldBlockNativeResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onStartShouldSetPanResponder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartShouldSetPanResponder?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onStartShouldSetPanResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderCallbacks#onStartShouldSetPanResponderCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartShouldSetPanResponderCapture?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n        gestureState: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderGestureState",
                  "canonicalReference": "react-native!PanResponderGestureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n      ) => boolean)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onStartShouldSetPanResponderCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PanResponderGestureState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PanResponderGestureState "
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "releaseTag": "Public",
          "name": "PanResponderGestureState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#_accountsForMovesUpTo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_accountsForMovesUpTo: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_accountsForMovesUpTo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#dx:member",
              "docComment": "/**\n * accumulated distance of the gesture since the touch started\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#dy:member",
              "docComment": "/**\n * accumulated distance of the gesture since the touch started\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dy: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#moveX:member",
              "docComment": "/**\n * the latest screen coordinates of the recently-moved touch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moveX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moveX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#moveY:member",
              "docComment": "/**\n * the latest screen coordinates of the recently-moved touch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moveY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moveY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#numberActiveTouches:member",
              "docComment": "/**\n * Number of touches currently on screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numberActiveTouches: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "numberActiveTouches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#stateID:member",
              "docComment": "/**\n * ID of the gestureState- persisted as long as there at least one touch on\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateID: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stateID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#vx:member",
              "docComment": "/**\n * current velocity of the gesture\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "vx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#vy:member",
              "docComment": "/**\n * current velocity of the gesture\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vy: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "vy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#x0:member",
              "docComment": "/**\n * the screen coordinates of the responder grant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x0: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x0",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderGestureState#y0:member",
              "docComment": "/**\n * the screen coordinates of the responder grant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y0: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y0",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PanResponderInstance:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PanResponderInstance "
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "releaseTag": "Public",
          "name": "PanResponderInstance",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PanResponderInstance#panHandlers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "panHandlers: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderHandlers",
                  "canonicalReference": "react-native!GestureResponderHandlers:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "panHandlers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PanResponderStatic:interface",
          "docComment": "/**\n * PanResponder reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize simple multi-touch gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the gesture responder system. For each handler, it provides a new gestureState object alongside the normal event.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PanResponderStatic "
            }
          ],
          "fileUrlPath": "Libraries/Interaction/PanResponder.d.ts",
          "releaseTag": "Public",
          "name": "PanResponderStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PanResponderStatic#create:member(1)",
              "docComment": "/**\n * @param config - Enhanced versions of all of the responder callbacks that provide not only the typical `ResponderSyntheticEvent`, but also the `PanResponder` gesture state. Simply replace the word `Responder` with `PanResponder` in each of the typical `onResponder*` callbacks. For example, the `config` object would look like:\n *\n * - `onMoveShouldSetPanResponder: (e, gestureState) => {...}` - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}` - `onStartShouldSetPanResponder: (e, gestureState) => {...}` - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}` - `onPanResponderReject: (e, gestureState) => {...}` - `onPanResponderGrant: (e, gestureState) => {...}` - `onPanResponderStart: (e, gestureState) => {...}` - `onPanResponderEnd: (e, gestureState) => {...}` - `onPanResponderRelease: (e, gestureState) => {...}` - `onPanResponderMove: (e, gestureState) => {...}` - `onPanResponderTerminate: (e, gestureState) => {...}` - `onPanResponderTerminationRequest: (e, gestureState) => {...}` - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n *\n * In general, for events that have capture equivalents, we update the gestureState once in the capture phase and can use it in the bubble phase as well.\n *\n * Be careful with onStartShould* callbacks. They only reflect updated `gestureState` for start/end events that bubble/capture to the Node. Once the node is the responder, you can rely on every start/end event being processed by the gesture and `gestureState` being updated accordingly. (numberActiveTouches) may not be totally accurate unless you are the responder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(config: "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderCallbacks",
                  "canonicalReference": "react-native!PanResponderCallbacks:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PanResponderInstance",
                  "canonicalReference": "react-native!PanResponderInstance:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "create"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Permission:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Permission =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'android.permission.READ_CALENDAR'\n  | 'android.permission.WRITE_CALENDAR'\n  | 'android.permission.CAMERA'\n  | 'android.permission.READ_CONTACTS'\n  | 'android.permission.WRITE_CONTACTS'\n  | 'android.permission.GET_ACCOUNTS'\n  | 'android.permission.ACCESS_BACKGROUND_LOCATION'\n  | 'android.permission.ACCESS_FINE_LOCATION'\n  | 'android.permission.ACCESS_COARSE_LOCATION'\n  | 'android.permission.RECORD_AUDIO'\n  | 'android.permission.READ_PHONE_STATE'\n  | 'android.permission.CALL_PHONE'\n  | 'android.permission.READ_CALL_LOG'\n  | 'android.permission.WRITE_CALL_LOG'\n  | 'com.android.voicemail.permission.ADD_VOICEMAIL'\n  | 'com.android.voicemail.permission.READ_VOICEMAIL'\n  | 'com.android.voicemail.permission.WRITE_VOICEMAIL'\n  | 'android.permission.USE_SIP'\n  | 'android.permission.PROCESS_OUTGOING_CALLS'\n  | 'android.permission.BODY_SENSORS'\n  | 'android.permission.BODY_SENSORS_BACKGROUND'\n  | 'android.permission.SEND_SMS'\n  | 'android.permission.RECEIVE_SMS'\n  | 'android.permission.READ_SMS'\n  | 'android.permission.RECEIVE_WAP_PUSH'\n  | 'android.permission.RECEIVE_MMS'\n  | 'android.permission.READ_EXTERNAL_STORAGE'\n  | 'android.permission.READ_MEDIA_IMAGES'\n  | 'android.permission.READ_MEDIA_VIDEO'\n  | 'android.permission.READ_MEDIA_AUDIO'\n  | 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED'\n  | 'android.permission.WRITE_EXTERNAL_STORAGE'\n  | 'android.permission.BLUETOOTH_CONNECT'\n  | 'android.permission.BLUETOOTH_SCAN'\n  | 'android.permission.BLUETOOTH_ADVERTISE'\n  | 'android.permission.ACCESS_MEDIA_LOCATION'\n  | 'android.permission.ACCEPT_HANDOVER'\n  | 'android.permission.ACTIVITY_RECOGNITION'\n  | 'android.permission.ANSWER_PHONE_CALLS'\n  | 'android.permission.READ_PHONE_NUMBERS'\n  | 'android.permission.UWB_RANGING'\n  | 'android.permission.POST_NOTIFICATIONS'\n  | 'android.permission.NEARBY_WIFI_DEVICES'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "releaseTag": "Public",
          "name": "Permission",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PermissionsAndroid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PermissionsAndroid = "
            },
            {
              "kind": "Reference",
              "text": "PermissionsAndroidStatic",
              "canonicalReference": "react-native!PermissionsAndroidStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "releaseTag": "Public",
          "name": "PermissionsAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!PermissionsAndroid:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PermissionsAndroid: "
            },
            {
              "kind": "Reference",
              "text": "PermissionsAndroidStatic",
              "canonicalReference": "react-native!PermissionsAndroidStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PermissionsAndroid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PermissionsAndroidStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PermissionsAndroidStatic "
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "releaseTag": "Public",
          "name": "PermissionsAndroidStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (): "
                },
                {
                  "kind": "Reference",
                  "text": "PermissionsAndroidStatic",
                  "canonicalReference": "react-native!PermissionsAndroidStatic:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#check:member(1)",
              "docComment": "/**\n * Returns a promise resolving to a boolean value as to whether the specified permissions has been granted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "check(permission: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permission",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "check"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#checkPermission:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Use check instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkPermission(permission: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permission",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "checkPermission"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#PERMISSIONS:member",
              "docComment": "/**\n * A list of specified \"dangerous\" permissions that require prompting the user\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PERMISSIONS: "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": "}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PERMISSIONS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#request:member(1)",
              "docComment": "/**\n * Prompts the user to enable a permission and returns a promise resolving to a string value indicating whether the user allowed or denied the request\n *\n * If the optional rationale argument is included (which is an object with a title and message), this function checks with the OS whether it is necessary to show a dialog explaining why the permission is needed (https://developer.android.com/training/permissions/requesting.html#explain) and then shows the system permission dialog\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request(\n    permission: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    rationale?: "
                },
                {
                  "kind": "Reference",
                  "text": "Rationale",
                  "canonicalReference": "react-native!Rationale:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PermissionStatus",
                  "canonicalReference": "react-native!PermissionStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permission",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rationale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "request"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#requestMultiple:member(1)",
              "docComment": "/**\n * Prompts the user to enable multiple permissions in the same dialog and returns an object with the permissions as keys and strings as values indicating whether the user allowed or denied the request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestMultiple(\n    permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{[key in "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "PermissionStatus",
                  "canonicalReference": "react-native!PermissionStatus:type"
                },
                {
                  "kind": "Content",
                  "text": "}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "requestMultiple"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#requestPermission:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Use request instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestPermission(\n    permission: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "react-native!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    rationale?: "
                },
                {
                  "kind": "Reference",
                  "text": "Rationale",
                  "canonicalReference": "react-native!Rationale:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permission",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rationale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "requestPermission"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PermissionsAndroidStatic#RESULTS:member",
              "docComment": "/**\n * A list of permission results that are returned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RESULTS: "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "PermissionStatus",
                  "canonicalReference": "react-native!PermissionStatus:type"
                },
                {
                  "kind": "Content",
                  "text": "}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "RESULTS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PermissionStatus:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PermissionStatus = "
            },
            {
              "kind": "Content",
              "text": "'granted' | 'denied' | 'never_ask_again'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "releaseTag": "Public",
          "name": "PermissionStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PerspectiveTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PerspectiveTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "PerspectiveTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PerspectiveTransform#perspective:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "perspective: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "perspective",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!PixelRatio:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PixelRatio: "
            },
            {
              "kind": "Reference",
              "text": "PixelRatioStatic",
              "canonicalReference": "react-native!PixelRatioStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/PixelRatio.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PixelRatio",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PixelRatioStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PixelRatioStatic "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/PixelRatio.d.ts",
          "releaseTag": "Public",
          "name": "PixelRatioStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PixelRatioStatic#get:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PixelRatioStatic#getFontScale:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFontScale(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getFontScale"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PixelRatioStatic#getPixelSizeForLayoutSize:member(1)",
              "docComment": "/**\n * Converts a layout size (dp) to pixel size (px). Guaranteed to return an integer number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPixelSizeForLayoutSize(layoutSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "layoutSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getPixelSizeForLayoutSize"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PixelRatioStatic#roundToNearestPixel:member(1)",
              "docComment": "/**\n * Rounds a layout size (dp) to the nearest layout size that corresponds to an integer number of pixels. For example, on a device with a PixelRatio of 3, PixelRatio.roundToNearestPixel(8.4) = 8.33, which corresponds to exactly (8.33 * 3) = 25 pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roundToNearestPixel(layoutSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "layoutSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "roundToNearestPixel"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PixelRatioStatic#startDetecting:member(1)",
              "docComment": "/**\n * No-op for iOS, but used on the web. Should not be documented. [sic]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startDetecting(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "startDetecting"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Platform:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Platform =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "PlatformIOSStatic",
              "canonicalReference": "react-native!PlatformIOSStatic:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "PlatformAndroidStatic",
              "canonicalReference": "react-native!PlatformAndroidStatic:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "PlatformWindowsOSStatic",
              "canonicalReference": "react-native!PlatformWindowsOSStatic:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "PlatformMacOSStatic",
              "canonicalReference": "react-native!PlatformMacOSStatic:interface"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "PlatformWebStatic",
              "canonicalReference": "react-native!PlatformWebStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "Platform",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Platform:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Platform: "
            },
            {
              "kind": "Reference",
              "text": "Platform",
              "canonicalReference": "react-native!Platform:type"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Platform",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformAndroidStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformAndroidStatic extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformStatic",
              "canonicalReference": "react-native!PlatformStatic:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformAndroidStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformAndroidStatic#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformConstants",
                  "canonicalReference": "react-native!PlatformConstants:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n    Version: number;\n    Release: string;\n    Serial: string;\n    Fingerprint: string;\n    Model: string;\n    Brand: string;\n    Manufacturer: string;\n    ServerHost?: string | undefined;\n    uiMode: 'car' | 'desk' | 'normal' | 'tv' | 'watch' | 'unknown';\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformAndroidStatic#OS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OS: "
                },
                {
                  "kind": "Content",
                  "text": "'android'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "OS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformAndroidStatic#Version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Version: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!PlatformColor:function(1)",
          "docComment": "/**\n * Select native platform color The color must match the string that exists on the native platform\n *\n * @see\n *\n * https://reactnative.dev/docs/platformcolor#example\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function PlatformColor(...colors: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "OpaqueColorValue",
              "canonicalReference": "react-native!OpaqueColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/PlatformColorValueTypes.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "colors",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "PlatformColor"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PlatformConstants:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type PlatformConstants = "
            },
            {
              "kind": "Content",
              "text": "{\n  isTesting: boolean;\n  isDisableAnimations?: boolean | undefined;\n  reactNativeVersion: {\n    major: number;\n    minor: number;\n    patch: number;\n    prerelease?: string | null | undefined;\n  };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformConstants",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformIOSStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformIOSStatic extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformStatic",
              "canonicalReference": "react-native!PlatformStatic:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformIOSStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformConstants",
                  "canonicalReference": "react-native!PlatformConstants:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n    forceTouchAvailable: boolean;\n    interfaceIdiom: string;\n    osVersion: string;\n    systemName: string;\n    isMacCatalyst?: boolean | undefined;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#isMacCatalyst:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMacCatalyst?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMacCatalyst",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#isPad:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPad: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isPad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#isTV:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTV: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTV",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#isVision:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isVision: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isVision",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#OS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OS: "
                },
                {
                  "kind": "Content",
                  "text": "'ios'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "OS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformIOSStatic#Version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformMacOSStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformMacOSStatic extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformStatic",
              "canonicalReference": "react-native!PlatformStatic:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformMacOSStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformMacOSStatic#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformConstants",
                  "canonicalReference": "react-native!PlatformConstants:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n    osVersion: string;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformMacOSStatic#OS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OS: "
                },
                {
                  "kind": "Content",
                  "text": "'macos'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "OS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformMacOSStatic#Version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PlatformOSType:type",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/platform-specific-code#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PlatformOSType =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'ios'\n  | 'android'\n  | 'macos'\n  | 'windows'\n  | 'web'\n  | 'native'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformOSType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformStatic "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformStatic#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformConstants",
                  "canonicalReference": "react-native!PlatformConstants:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformStatic#isTesting:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTesting: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTesting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformStatic#isTV:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTV: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTV",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PlatformStatic#select:member(1)",
              "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/platform-specific-code#content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select<T>(\n    specifics:\n      "
                },
                {
                  "kind": "Content",
                  "text": "| ({[platform in "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformOSType",
                  "canonicalReference": "react-native!PlatformOSType:type"
                },
                {
                  "kind": "Content",
                  "text": "]?: T} & {default: T})\n      | {[platform in "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformOSType",
                  "canonicalReference": "react-native!PlatformOSType:type"
                },
                {
                  "kind": "Content",
                  "text": "]: T}"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "specifics",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "select"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PlatformStatic#select:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select<T>(specifics: "
                },
                {
                  "kind": "Content",
                  "text": "{[platform in "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformOSType",
                  "canonicalReference": "react-native!PlatformOSType:type"
                },
                {
                  "kind": "Content",
                  "text": "]?: T}"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "specifics",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "select"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformStatic#Version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Version: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformWebStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformWebStatic extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformStatic",
              "canonicalReference": "react-native!PlatformStatic:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformWebStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformWebStatic#OS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OS: "
                },
                {
                  "kind": "Content",
                  "text": "'web'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "OS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PlatformWindowsOSStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PlatformWindowsOSStatic extends "
            },
            {
              "kind": "Reference",
              "text": "PlatformStatic",
              "canonicalReference": "react-native!PlatformStatic:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Platform.d.ts",
          "releaseTag": "Public",
          "name": "PlatformWindowsOSStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformWindowsOSStatic#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "PlatformConstants",
                  "canonicalReference": "react-native!PlatformConstants:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n    osVersion: number;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformWindowsOSStatic#OS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OS: "
                },
                {
                  "kind": "Content",
                  "text": "'windows'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "OS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PlatformWindowsOSStatic#Version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Version: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PointerEvent_2:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PointerEvent = "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativePointerEvent",
              "canonicalReference": "react-native!NativePointerEvent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "PointerEvent_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PointerEvents:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PointerEvents "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "PointerEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerCancel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerCancel?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerCancel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerCancelCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerCancelCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerCancelCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerDown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerDown?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerDownCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerDownCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerDownCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerEnter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerEnter?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerEnter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerEnterCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerEnterCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerEnterCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerLeave:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerLeave?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerLeave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerLeaveCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerLeaveCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerLeaveCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerMove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerMove?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerMoveCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerMoveCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerMoveCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerUp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerUp?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointerEvents#onPointerUpCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPointerUpCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent",
                  "canonicalReference": "react-native!PointerEvent_2:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPointerUpCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PointProp:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PointProp "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "PointProp",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointProp#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PointProp#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PresentLocalNotificationDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type PresentLocalNotificationDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n  alertBody: string;\n  alertAction: string;\n  alertTitle?: string | undefined;\n  soundName?: string | undefined;\n  category?: string | undefined;\n  userInfo?: "
            },
            {
              "kind": "Reference",
              "text": "Object",
              "canonicalReference": "!Object:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  applicationIconBadgeNumber?: number | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PresentLocalNotificationDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Pressable:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Pressable: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardRefExoticComponent",
              "canonicalReference": "@types/react!React.ForwardRefExoticComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\n  "
            },
            {
              "kind": "Reference",
              "text": "PressableProps",
              "canonicalReference": "react-native!PressableProps:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "View",
              "canonicalReference": "react-native!View:class"
            },
            {
              "kind": "Content",
              "text": ">\n>"
            }
          ],
          "fileUrlPath": "Libraries/Components/Pressable/Pressable.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Pressable",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PressableAndroidRippleConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PressableAndroidRippleConfig "
            }
          ],
          "fileUrlPath": "Libraries/Components/Pressable/Pressable.d.ts",
          "releaseTag": "Public",
          "name": "PressableAndroidRippleConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableAndroidRippleConfig#borderless:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderless?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderless",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableAndroidRippleConfig#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableAndroidRippleConfig#foreground:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "foreground?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "foreground",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableAndroidRippleConfig#radius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radius?: "
                },
                {
                  "kind": "Content",
                  "text": "null | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PressableProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PressableProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'children' | 'style' | 'hitSlop'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Pressable/Pressable.d.ts",
          "releaseTag": "Public",
          "name": "PressableProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#android_disableSound:member",
              "docComment": "/**\n * If true, doesn't play system sound on touch.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "android_disableSound?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "android_disableSound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#android_ripple:member",
              "docComment": "/**\n * Enables the Android ripple effect and configures its color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "android_ripple?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "PressableAndroidRippleConfig",
                  "canonicalReference": "react-native!PressableAndroidRippleConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "android_ripple",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#cancelable:member",
              "docComment": "/**\n * Whether a press gesture can be interrupted by a parent gesture such as a scroll event. Defaults to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelable?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cancelable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#children:member",
              "docComment": "/**\n * Either children or a render prop that receives a boolean reflecting whether the component is currently pressed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": "\n    | ((state: "
                },
                {
                  "kind": "Reference",
                  "text": "PressableStateCallbackType",
                  "canonicalReference": "react-native!PressableStateCallbackType:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ")\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#delayHoverIn:member",
              "docComment": "/**\n * Duration to wait after hover in before calling `onHoverIn`.  @platform macos windows\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayHoverIn?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayHoverIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#delayHoverOut:member",
              "docComment": "/**\n * Duration to wait after hover out before calling `onHoverOut`.  @platform macos windows\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayHoverOut?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayHoverOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#delayLongPress:member",
              "docComment": "/**\n * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayLongPress?: "
                },
                {
                  "kind": "Content",
                  "text": "null | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayLongPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#disabled:member",
              "docComment": "/**\n * Whether the press behavior is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#hitSlop:member",
              "docComment": "/**\n * Additional distance outside of this view in which a press is detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hitSlop?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hitSlop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onBlur:member",
              "docComment": "/**\n * Called after the element loses focus.  @platform macos windows\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| null\n    | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TargetedEvent",
                  "canonicalReference": "react-native!TargetedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onFocus:member",
              "docComment": "/**\n * Called after the element is focused.  @platform macos windows\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| null\n    | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TargetedEvent",
                  "canonicalReference": "react-native!TargetedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onHoverIn:member",
              "docComment": "/**\n * Called when the hover is activated to provide visual feedback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHoverIn?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "react-native!MouseEvent_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onHoverIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onHoverOut:member",
              "docComment": "/**\n * Called when the hover is deactivated to undo visual feedback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHoverOut?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "react-native!MouseEvent_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onHoverOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onLongPress:member",
              "docComment": "/**\n * Called when a long-tap gesture is detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLongPress?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLongPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onPress:member",
              "docComment": "/**\n * Called when a single tap gesture is detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPress?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onPressIn:member",
              "docComment": "/**\n * Called when a touch is engaged before `onPress`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressIn?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#onPressOut:member",
              "docComment": "/**\n * Called when a touch is released before `onPress`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressOut?: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#pressRetentionOffset:member",
              "docComment": "/**\n * Additional distance outside of this view in which a touch is considered a press before `onPressOut` is triggered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressRetentionOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pressRetentionOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#style:member",
              "docComment": "/**\n * Either view styles or a function that receives a boolean reflecting whether the component is currently pressed and returns view styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ">\n    | ((state: "
                },
                {
                  "kind": "Reference",
                  "text": "PressableStateCallbackType",
                  "canonicalReference": "react-native!PressableStateCallbackType:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ">)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#testOnly_pressed:member",
              "docComment": "/**\n * Used only for documentation or testing (e.g. snapshot testing).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testOnly_pressed?: "
                },
                {
                  "kind": "Content",
                  "text": "null | boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testOnly_pressed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableProps#unstable_pressDelay:member",
              "docComment": "/**\n * Duration (in milliseconds) to wait after press down before calling onPressIn.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unstable_pressDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unstable_pressDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PressableStateCallbackType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PressableStateCallbackType "
            }
          ],
          "fileUrlPath": "Libraries/Components/Pressable/Pressable.d.ts",
          "releaseTag": "Public",
          "name": "PressableStateCallbackType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PressableStateCallbackType#pressed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pressed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!processColor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function processColor(\n  color?: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": ",\n): "
            },
            {
              "kind": "Reference",
              "text": "ProcessedColorValue",
              "canonicalReference": "react-native!ProcessedColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/processColor.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": true
            }
          ],
          "name": "processColor"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ProcessedColorValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProcessedColorValue = "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "OpaqueColorValue",
              "canonicalReference": "react-native!OpaqueColorValue:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/processColor.d.ts",
          "releaseTag": "Public",
          "name": "ProcessedColorValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ProgressBarAndroid:class",
          "docComment": "/**\n * ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-community/progress-bar-android` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-progress-view/progress-bar-android\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class ProgressBarAndroid extends "
            },
            {
              "kind": "Reference",
              "text": "ProgressBarAndroidBase",
              "canonicalReference": "react-native!ProgressBarAndroidBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ProgressBarAndroid",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ProgressBarAndroidBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ProgressBarAndroidBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "ProgressBarAndroidComponent",
              "canonicalReference": "react-native!ProgressBarAndroidComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ProgressBarAndroidBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ProgressBarAndroidComponent:class",
          "docComment": "/**\n * React component that wraps the Android-only `ProgressBar`. This component is used to indicate that the app is loading or there is some activity in the app.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ProgressBarAndroidComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProgressBarAndroidProps",
              "canonicalReference": "react-native!ProgressBarAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ProgressBarAndroidComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ProgressBarAndroidProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ProgressBarAndroidProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProgressBarAndroidProperties = "
            },
            {
              "kind": "Reference",
              "text": "ProgressBarAndroidProps",
              "canonicalReference": "react-native!ProgressBarAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ProgressBarAndroidProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ProgressBarAndroidProps:interface",
          "docComment": "/**\n * ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-community/progress-bar-android` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-community/progress-bar-android\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ProgressBarAndroidProps extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.d.ts",
          "releaseTag": "Public",
          "name": "ProgressBarAndroidProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#animating:member",
              "docComment": "/**\n * Whether to show the ProgressBar (true, the default) or hide it (false).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animating?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#color:member",
              "docComment": "/**\n * Color of the progress bar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#indeterminate:member",
              "docComment": "/**\n * If the progress bar will show indeterminate progress. Note that this can only be false if styleAttr is Horizontal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indeterminate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "indeterminate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#progress:member",
              "docComment": "/**\n * The progress value (between 0 and 1).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progress?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "progress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#styleAttr:member",
              "docComment": "/**\n * Style of the ProgressBar. One of: Horizontal Normal (default) Small Large Inverse SmallInverse LargeInverse\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styleAttr?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'Horizontal'\n    | 'Normal'\n    | 'Small'\n    | 'Large'\n    | 'Inverse'\n    | 'SmallInverse'\n    | 'LargeInverse'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styleAttr",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ProgressBarAndroidProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PromiseTask:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PromiseTask = "
            },
            {
              "kind": "Content",
              "text": "{\n  name: string;\n  gen: () => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/InteractionManager.d.ts",
          "releaseTag": "Public",
          "name": "PromiseTask",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PushNotification:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PushNotification "
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PushNotification",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#finish:member(1)",
              "docComment": "/**\n * iOS Only Signifies remote notification handling is complete\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "finish(result: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "finish"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getAlert:member(1)",
              "docComment": "/**\n * Gets the notification's main message from the `aps` object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAlert(): "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAlert"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getBadgeCount:member(1)",
              "docComment": "/**\n * Gets the badge count number from the `aps` object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBadgeCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getBadgeCount"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getCategory:member(1)",
              "docComment": "/**\n * Gets the category string from the `aps` object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCategory(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCategory"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getContentAvailable:member(1)",
              "docComment": "/**\n * Gets the content-available number from the `aps` object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getContentAvailable(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getContentAvailable"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getData:member(1)",
              "docComment": "/**\n * Gets the data object on the notif\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getData(): "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getData"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getMessage:member(1)",
              "docComment": "/**\n * An alias for `getAlert` to get the notification's main message string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessage(): "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getMessage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getSound:member(1)",
              "docComment": "/**\n * Gets the sound string from the `aps` object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSound(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSound"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotification#getThreadId:member(1)",
              "docComment": "/**\n * Gets the thread ID on the notif\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getThreadId(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getThreadId"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PushNotificationEventName:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PushNotificationEventName =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'notification'\n  | 'localNotification'\n  | 'register'\n  | 'registrationError'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PushNotificationEventName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!PushNotificationIOS:type",
          "docComment": "/**\n * PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-community/push-notification-ios` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-community/react-native-push-notification-ios\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PushNotificationIOS = "
            },
            {
              "kind": "Reference",
              "text": "PushNotificationIOSStatic",
              "canonicalReference": "react-native!PushNotificationIOSStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PushNotificationIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!PushNotificationIOS:var",
          "docComment": "/**\n * PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from `@react-native-community/push-notification-ios` instead of 'react-native'.\n *\n * @deprecated\n *\n * @see\n *\n * https://github.com/react-native-community/react-native-push-notification-ios\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PushNotificationIOS: "
            },
            {
              "kind": "Reference",
              "text": "PushNotificationIOSStatic",
              "canonicalReference": "react-native!PushNotificationIOSStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PushNotificationIOS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PushNotificationIOSStatic:interface",
          "docComment": "/**\n * Handle push notifications for your app, including permission handling and icon badge number.\n *\n * @see\n *\n * https://reactnative.dev/docs/pushnotificationios#content\n *\n * //FIXME: BGR: The documentation seems completely off compared to the actual js implementation. I could never get the example to run\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PushNotificationIOSStatic "
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PushNotificationIOSStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#abandonPermissions:member(1)",
              "docComment": "/**\n * Unregister for all remote notifications received via Apple Push Notification service. You should call this method in rare circumstances only, such as when a new version of the app removes support for all types of remote notifications. Users can temporarily prevent apps from receiving remote notifications through the Notifications section of the Settings app. Apps unregistered through this method can always re-register.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abandonPermissions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "abandonPermissions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#addEventListener:member(1)",
              "docComment": "/**\n * Attaches a listener to remote notifications while the app is running in the foreground or the background.\n *\n * The handler will get be invoked with an instance of `PushNotificationIOS`\n *\n * The type MUST be 'notification'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "'notification' | 'localNotification'"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "(notification: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotification",
                  "canonicalReference": "react-native!PushNotification:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#addEventListener:member(2)",
              "docComment": "/**\n * Fired when the user registers for remote notifications.\n *\n * The handler will be invoked with a hex string representing the deviceToken.\n *\n * The type MUST be 'register'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "'register'"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "(deviceToken: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#addEventListener:member(3)",
              "docComment": "/**\n * Fired when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator.\n *\n * The handler will be invoked with {message: string, code: number, details: any}.\n *\n * The type MUST be 'registrationError'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(\n    type: "
                },
                {
                  "kind": "Content",
                  "text": "'registrationError'"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler: "
                },
                {
                  "kind": "Content",
                  "text": "(error: {message: string; code: number; details: any}) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#cancelAllLocalNotifications:member(1)",
              "docComment": "/**\n * Cancels all scheduled localNotifications\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelAllLocalNotifications(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cancelAllLocalNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#cancelLocalNotifications:member(1)",
              "docComment": "/**\n * Cancel local notifications. Optionally restricts the set of canceled notifications to those notifications whose userInfo fields match the corresponding fields in the userInfo argument.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelLocalNotifications(userInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "cancelLocalNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#checkPermissions:member(1)",
              "docComment": "/**\n * See what push permissions are currently enabled. `callback` will be invoked with a `permissions` object:\n *\n * - `alert` :boolean - `badge` :boolean - `sound` :boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkPermissions(\n    callback: "
                },
                {
                  "kind": "Content",
                  "text": "(permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotificationPermissions",
                  "canonicalReference": "react-native!PushNotificationPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "checkPermissions"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#FetchResult:member",
              "docComment": "/**\n * iOS fetch results that best describe the result of a finished remote notification handler. For a list of possible values, see `PushNotificationIOS.FetchResult`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FetchResult: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchResult",
                  "canonicalReference": "react-native!FetchResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "FetchResult",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#getApplicationIconBadgeNumber:member(1)",
              "docComment": "/**\n * Gets the current badge number for the app icon on the home screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getApplicationIconBadgeNumber(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(badge: number) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getApplicationIconBadgeNumber"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#getDeliveredNotifications:member(1)",
              "docComment": "/**\n * Provides you with a list of the app’s notifications that are still displayed in Notification Center.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDeliveredNotifications(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(notifications: "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getDeliveredNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#getInitialNotification:member(1)",
              "docComment": "/**\n * This method returns a promise that resolves to either the notification object if the app was launched by a push notification, or `null` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInitialNotification(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PushNotification",
                  "canonicalReference": "react-native!PushNotification:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getInitialNotification"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#getScheduledLocalNotifications:member(1)",
              "docComment": "/**\n * Gets the local notifications that are currently scheduled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScheduledLocalNotifications(\n    callback: "
                },
                {
                  "kind": "Content",
                  "text": "(notifications: "
                },
                {
                  "kind": "Reference",
                  "text": "ScheduleLocalNotificationDetails",
                  "canonicalReference": "react-native!ScheduleLocalNotificationDetails:type"
                },
                {
                  "kind": "Content",
                  "text": "[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "getScheduledLocalNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#presentLocalNotification:member(1)",
              "docComment": "/**\n * Schedules the localNotification for immediate presentation. details is an object containing: alertBody : The message displayed in the notification alert. alertAction : The \"action\" displayed beneath an actionable notification. Defaults to \"view\"; soundName : The sound played when the notification is fired (optional). category : The category of this notification, required for actionable notifications (optional). userInfo : An optional object containing additional notification data. applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presentLocalNotification(details: "
                },
                {
                  "kind": "Reference",
                  "text": "PresentLocalNotificationDetails",
                  "canonicalReference": "react-native!PresentLocalNotificationDetails:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "details",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "presentLocalNotification"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#removeAllDeliveredNotifications:member(1)",
              "docComment": "/**\n * Remove all delivered notifications from Notification Center.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllDeliveredNotifications(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "removeAllDeliveredNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#removeDeliveredNotifications:member(1)",
              "docComment": "/**\n * Removes the specified notifications from Notification Center\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeDeliveredNotifications(identifiers: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "identifiers",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "removeDeliveredNotifications"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#removeEventListener:member(1)",
              "docComment": "/**\n * Removes the event listener. Do this in `componentWillUnmount` to prevent memory leaks\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeEventListener(\n    type: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotificationEventName",
                  "canonicalReference": "react-native!PushNotificationEventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    handler:\n      "
                },
                {
                  "kind": "Content",
                  "text": "| ((notification: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotification",
                  "canonicalReference": "react-native!PushNotification:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void)\n      | ((deviceToken: string) => void)\n      | ((error: {message: string; code: number; details: any}) => void)"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "removeEventListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#requestPermissions:member(1)",
              "docComment": "/**\n * Requests all notification permissions from iOS, prompting the user's dialog box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestPermissions(permissions?: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotificationPermissions",
                  "canonicalReference": "react-native!PushNotificationPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "name": "requestPermissions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#requestPermissions:member(2)",
              "docComment": "/**\n * Requests all notification permissions from iOS, prompting the user's dialog box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestPermissions(\n    permissions?: "
                },
                {
                  "kind": "Reference",
                  "text": "PushNotificationPermissions",
                  "canonicalReference": "react-native!PushNotificationPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PushNotificationPermissions",
                  "canonicalReference": "react-native!PushNotificationPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "requestPermissions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#scheduleLocalNotification:member(1)",
              "docComment": "/**\n * Schedules the localNotification for future presentation. details is an object containing: fireDate : The date and time when the system should deliver the notification. alertBody : The message displayed in the notification alert. alertAction : The \"action\" displayed beneath an actionable notification. Defaults to \"view\"; soundName : The sound played when the notification is fired (optional). category : The category of this notification, required for actionable notifications (optional). userInfo : An optional object containing additional notification data. applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scheduleLocalNotification(details: "
                },
                {
                  "kind": "Reference",
                  "text": "ScheduleLocalNotificationDetails",
                  "canonicalReference": "react-native!ScheduleLocalNotificationDetails:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "details",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scheduleLocalNotification"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!PushNotificationIOSStatic#setApplicationIconBadgeNumber:member(1)",
              "docComment": "/**\n * Sets the badge number for the app icon on the home screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setApplicationIconBadgeNumber(number: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "number",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setApplicationIconBadgeNumber"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!PushNotificationPermissions:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PushNotificationPermissions "
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "PushNotificationPermissions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PushNotificationPermissions#alert:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alert?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alert",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PushNotificationPermissions#badge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "badge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "badge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!PushNotificationPermissions#sound:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sound?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!Rationale:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Rationale "
            }
          ],
          "fileUrlPath": "Libraries/PermissionsAndroid/PermissionsAndroid.d.ts",
          "releaseTag": "Public",
          "name": "Rationale",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Rationale#buttonNegative:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonNegative?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "buttonNegative",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Rationale#buttonNeutral:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonNeutral?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "buttonNeutral",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Rationale#buttonPositive:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonPositive: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "buttonPositive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Rationale#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Rationale#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RCTNativeAppEventEmitter:type",
          "docComment": "/**\n * Receive events from native-code Deprecated - subclass NativeEventEmitter to create granular event modules instead of adding all event listeners directly to RCTNativeAppEventEmitter.\n *\n * @see\n *\n * https://github.com/facebook/react-native/blob/0.34-stable\\Libraries\\EventEmitter\\RCTNativeAppEventEmitter.js\n *\n * @see\n *\n * https://reactnative.dev/docs/native-modules-ios#sending-events-to-javascript\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type RCTNativeAppEventEmitter = "
            },
            {
              "kind": "Reference",
              "text": "DeviceEventEmitterStatic",
              "canonicalReference": "react-native!DeviceEventEmitterStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/EventEmitter/RCTNativeAppEventEmitter.d.ts",
          "releaseTag": "Public",
          "name": "RCTNativeAppEventEmitter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RecursiveArray:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RecursiveArray<T>\n  extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "react-native!RecursiveArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "RecursiveArray",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!RefreshControl:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class RefreshControl extends "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlBase",
              "canonicalReference": "react-native!RefreshControlBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RefreshControl",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "react-native!RefreshControl.SIZE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SIZE: "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "SIZE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!RefreshControlBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RefreshControlBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlComponent",
              "canonicalReference": "react-native!RefreshControlComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RefreshControlBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!RefreshControlComponent:class",
          "docComment": "/**\n * This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at `scrollY: 0`, swiping down triggers an `onRefresh` event.\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class RefreshControlComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RefreshControlProps",
              "canonicalReference": "react-native!RefreshControlProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RefreshControlComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RefreshControlProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use RefreshControlProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RefreshControlProperties = "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlProps",
              "canonicalReference": "react-native!RefreshControlProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RefreshControlPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use RefreshControlPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RefreshControlPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlPropsAndroid",
              "canonicalReference": "react-native!RefreshControlPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RefreshControlPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use RefreshControlPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RefreshControlPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlPropsIOS",
              "canonicalReference": "react-native!RefreshControlPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RefreshControlProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RefreshControlProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlPropsIOS",
              "canonicalReference": "react-native!RefreshControlPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "RefreshControlPropsAndroid",
              "canonicalReference": "react-native!RefreshControlPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlProps#onRefresh:member",
              "docComment": "/**\n * Called when the view starts refreshing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRefresh?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRefresh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlProps#progressViewOffset:member",
              "docComment": "/**\n * Progress view top offset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressViewOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "progressViewOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlProps#refreshing:member",
              "docComment": "/**\n * Whether the view should be indicating an active refresh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshing: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refreshing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RefreshControlPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RefreshControlPropsAndroid extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsAndroid#colors:member",
              "docComment": "/**\n * The colors (at least one) that will be used to draw the refresh indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colors?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "colors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsAndroid#enabled:member",
              "docComment": "/**\n * Whether the pull to refresh functionality is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsAndroid#progressBackgroundColor:member",
              "docComment": "/**\n * The background color of the refresh indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressBackgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "progressBackgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsAndroid#size:member",
              "docComment": "/**\n * Size of the refresh indicator, see RefreshControl.SIZE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RefreshControlPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RefreshControlPropsIOS extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/RefreshControl/RefreshControl.d.ts",
          "releaseTag": "Public",
          "name": "RefreshControlPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsIOS#tintColor:member",
              "docComment": "/**\n * The color of the refresh indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsIOS#title:member",
              "docComment": "/**\n * The title displayed under the refresh indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RefreshControlPropsIOS#titleColor:member",
              "docComment": "/**\n * Title color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titleColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "titleColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RegisterCallableModule:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type RegisterCallableModule = "
            },
            {
              "kind": "Content",
              "text": "(\n  name: string,\n  moduleOrFactory: "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "react-native!Module:type"
            },
            {
              "kind": "Content",
              "text": " | (() => "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "react-native!Module:type"
            },
            {
              "kind": "Content",
              "text": "),\n) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Core/registerCallableModule.d.ts",
          "releaseTag": "Public",
          "name": "RegisterCallableModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!registerCallableModule:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "registerCallableModule: "
            },
            {
              "kind": "Reference",
              "text": "RegisterCallableModule",
              "canonicalReference": "react-native!RegisterCallableModule:type"
            }
          ],
          "fileUrlPath": "Libraries/Core/registerCallableModule.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "registerCallableModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RegisteredStyle:type",
          "docComment": "/**\n * Keep a brand of 'T' so that calls to `StyleSheet.flatten` can take `RegisteredStyle<T>` and return `T`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type RegisteredStyle<T> = "
            },
            {
              "kind": "Content",
              "text": "number & {__registeredStyleBrand: T}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "RegisteredStyle",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!requireNativeComponent:function(1)",
          "docComment": "/**\n * Creates values that can be used like React components which represent native view managers. You should create JavaScript modules that wrap these values so that the results are memoized. Example:\n *\n * const View = requireNativeComponent('RCTView');\n *\n * The concrete return type of `requireNativeComponent` is a string, but the declared type is `HostComponent` because TypeScript assumes anonymous JSX intrinsics (e.g. a `string`) not to have any props.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function requireNativeComponent<T>(viewName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "HostComponent",
              "canonicalReference": "react-native!HostComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/requireNativeComponent.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "viewName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "requireNativeComponent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ReturnKeyType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReturnKeyType = "
            },
            {
              "kind": "Content",
              "text": "'done' | 'go' | 'next' | 'search' | 'send'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "ReturnKeyType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ReturnKeyTypeAndroid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReturnKeyTypeAndroid = "
            },
            {
              "kind": "Content",
              "text": "'none' | 'previous'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "ReturnKeyTypeAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ReturnKeyTypeIOS:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReturnKeyTypeIOS =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'default'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo'\n  | 'emergency-call'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "ReturnKeyTypeIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ReturnKeyTypeOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReturnKeyTypeOptions =\n  "
            },
            {
              "kind": "Content",
              "text": "| "
            },
            {
              "kind": "Reference",
              "text": "ReturnKeyType",
              "canonicalReference": "react-native!ReturnKeyType:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "ReturnKeyTypeAndroid",
              "canonicalReference": "react-native!ReturnKeyTypeAndroid:type"
            },
            {
              "kind": "Content",
              "text": "\n  | "
            },
            {
              "kind": "Reference",
              "text": "ReturnKeyTypeIOS",
              "canonicalReference": "react-native!ReturnKeyTypeIOS:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "ReturnKeyTypeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RippleBackgroundPropType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RippleBackgroundPropType extends "
            },
            {
              "kind": "Reference",
              "text": "BaseBackgroundPropType",
              "canonicalReference": "react-native!BaseBackgroundPropType:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "name": "RippleBackgroundPropType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RippleBackgroundPropType#borderless:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderless: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "borderless",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RippleBackgroundPropType#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RippleBackgroundPropType#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'RippleAndroid'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Role:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Role =\n  "
            },
            {
              "kind": "Content",
              "text": "| 'alert'\n  | 'alertdialog'\n  | 'application'\n  | 'article'\n  | 'banner'\n  | 'button'\n  | 'cell'\n  | 'checkbox'\n  | 'columnheader'\n  | 'combobox'\n  | 'complementary'\n  | 'contentinfo'\n  | 'definition'\n  | 'dialog'\n  | 'directory'\n  | 'document'\n  | 'feed'\n  | 'figure'\n  | 'form'\n  | 'grid'\n  | 'group'\n  | 'heading'\n  | 'img'\n  | 'link'\n  | 'list'\n  | 'listitem'\n  | 'log'\n  | 'main'\n  | 'marquee'\n  | 'math'\n  | 'menu'\n  | 'menubar'\n  | 'menuitem'\n  | 'meter'\n  | 'navigation'\n  | 'none'\n  | 'note'\n  | 'option'\n  | 'presentation'\n  | 'progressbar'\n  | 'radio'\n  | 'radiogroup'\n  | 'region'\n  | 'row'\n  | 'rowgroup'\n  | 'rowheader'\n  | 'scrollbar'\n  | 'searchbox'\n  | 'separator'\n  | 'slider'\n  | 'spinbutton'\n  | 'status'\n  | 'summary'\n  | 'switch'\n  | 'tab'\n  | 'table'\n  | 'tablist'\n  | 'tabpanel'\n  | 'term'\n  | 'timer'\n  | 'toolbar'\n  | 'tooltip'\n  | 'tree'\n  | 'treegrid'\n  | 'treeitem'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewAccessibility.d.ts",
          "releaseTag": "Public",
          "name": "Role",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RootTag:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RootTag = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/RootTag.d.ts",
          "releaseTag": "Public",
          "name": "RootTag",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!RootTagContext:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RootTagContext: "
            },
            {
              "kind": "Reference",
              "text": "React.Context",
              "canonicalReference": "@types/react!React.Context:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RootTag",
              "canonicalReference": "react-native!RootTag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/RootTag.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RootTagContext",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!RootViewStyleProvider:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RootViewStyleProvider = "
            },
            {
              "kind": "Content",
              "text": "(appParameters: any) => "
            },
            {
              "kind": "Reference",
              "text": "ViewStyle",
              "canonicalReference": "react-native!ViewStyle:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "RootViewStyleProvider",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RotateTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RotateTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "RotateTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RotateTransform#rotate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotate: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rotate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RotateXTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RotateXTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "RotateXTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RotateXTransform#rotateX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotateX: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rotateX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RotateYTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RotateYTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "RotateYTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RotateYTransform#rotateY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotateY: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rotateY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!RotateZTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RotateZTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "RotateZTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!RotateZTransform#rotateZ:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotateZ: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rotateZ",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Runnable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Runnable = "
            },
            {
              "kind": "Content",
              "text": "(appParameters: any) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "Runnable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!SafeAreaView:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class SafeAreaView extends "
            },
            {
              "kind": "Reference",
              "text": "SafeAreaViewBase",
              "canonicalReference": "react-native!SafeAreaViewBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/SafeAreaView/SafeAreaView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SafeAreaView",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!SafeAreaViewBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SafeAreaViewBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "SafeAreaViewComponent",
              "canonicalReference": "react-native!SafeAreaViewComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/SafeAreaView/SafeAreaView.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SafeAreaViewBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!SafeAreaViewComponent:class",
          "docComment": "/**\n * Renders nested content and automatically applies paddings reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect physical limitation of the screen, such as rounded corners or camera notches (aka sensor housing area on iPhone X).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SafeAreaViewComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/SafeAreaView/SafeAreaView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SafeAreaViewComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScaledSize:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScaledSize "
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Dimensions.d.ts",
          "releaseTag": "Public",
          "name": "ScaledSize",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaledSize#fontScale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontScale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fontScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaledSize#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaledSize#scale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaledSize#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScaleTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ScaleTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ScaleTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaleTransform#scale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScaleXTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ScaleXTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ScaleXTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaleXTransform#scaleX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleX: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scaleX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScaleYTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ScaleYTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ScaleYTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScaleYTransform#scaleY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleY: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scaleY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ScheduleLocalNotificationDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ScheduleLocalNotificationDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n  alertAction?: string | undefined;\n  alertBody?: string | undefined;\n  alertTitle?: string | undefined;\n  applicationIconBadgeNumber?: number | undefined;\n  category?: string | undefined;\n  fireDate?: number | string | undefined;\n  isSilent?: boolean | undefined;\n  repeatInterval?:\n    | 'year'\n    | 'month'\n    | 'week'\n    | 'day'\n    | 'hour'\n    | 'minute'\n    | undefined;\n  soundName?: string | undefined;\n  userInfo?: "
            },
            {
              "kind": "Reference",
              "text": "Object",
              "canonicalReference": "!Object:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/PushNotificationIOS/PushNotificationIOS.d.ts",
          "releaseTag": "Public",
          "name": "ScheduleLocalNotificationDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScrollResponderEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScrollResponderEvent\n  extends "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeTouchEvent",
              "canonicalReference": "react-native!NativeTouchEvent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "ScrollResponderEvent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScrollResponderMixin:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ScrollResponderMixin extends "
            },
            {
              "kind": "Reference",
              "text": "SubscribableMixin",
              "canonicalReference": "react-native!SubscribableMixin:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "ScrollResponderMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#componentWillMount:member(1)",
              "docComment": "/**\n * `componentWillMount` is the closest thing to a standard \"constructor\" for React components.\n *\n * The `keyboardWillShow` is called before input focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillMount"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderGetScrollableNode:member(1)",
              "docComment": "/**\n * Returns the node that represents native view that can be scrolled. Components can pass what node to use by defining a `getScrollableNode` function otherwise `this` is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderGetScrollableNode(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderGetScrollableNode"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleMomentumScrollBegin:member(1)",
              "docComment": "/**\n * Invoke this from an `onMomentumScrollBegin` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleMomentumScrollBegin(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleMomentumScrollBegin"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleMomentumScrollEnd:member(1)",
              "docComment": "/**\n * Invoke this from an `onMomentumScrollEnd` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleMomentumScrollEnd(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleMomentumScrollEnd"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleResponderGrant:member(1)",
              "docComment": "/**\n * Invoke this from an `onResponderGrant` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleResponderGrant(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleResponderGrant"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleResponderReject:member(1)",
              "docComment": "/**\n * Invoke this from an `onResponderReject` event.\n *\n * Some other element is not yielding its role as responder. Normally, we'd just disable the `UIScrollView`, but a touch has already began on it, the `UIScrollView` will not accept being disabled after that. The easiest solution for now is to accept the limitation of disallowing this altogether. To improve this, find a way to disable the `UIScrollView` after a touch has already started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleResponderReject(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderHandleResponderReject"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleResponderRelease:member(1)",
              "docComment": "/**\n * Invoke this from an `onResponderRelease` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleResponderRelease(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleResponderRelease"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleScroll:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleScroll(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleScroll"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleScrollBeginDrag:member(1)",
              "docComment": "/**\n * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll animation, and there's not an easy way to distinguish a drag vs. stopping momentum.\n *\n * Invoke this from an `onScrollBeginDrag` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleScrollBeginDrag(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleScrollBeginDrag"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleScrollEndDrag:member(1)",
              "docComment": "/**\n * Invoke this from an `onScrollEndDrag` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleScrollEndDrag(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleScrollEndDrag"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleScrollShouldSetResponder:member(1)",
              "docComment": "/**\n * Invoke this from an `onScroll` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleScrollShouldSetResponder(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderHandleScrollShouldSetResponder"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleStartShouldSetResponder:member(1)",
              "docComment": "/**\n * Merely touch starting is not sufficient for a scroll view to become the responder. Being the \"responder\" means that the very next touch move/end event will result in an action/movement.\n *\n * Invoke this from an `onStartShouldSetResponder` event.\n *\n * `onStartShouldSetResponder` is used when the next move/end will trigger some UI movement/action, but when you want to yield priority to views nested inside of the view.\n *\n * There may be some cases where scroll views actually should return `true` from `onStartShouldSetResponder`: Any time we are detecting a standard tap that gives priority to nested views.\n *\n * - If a single tap on the scroll view triggers an action such as recentering a map style view yet wants to give priority to interaction views inside (such as dropped pins or labels), then we would return true from this method when there is a single touch.\n *\n * - Similar to the previous case, if a two finger \"tap\" should trigger a zoom, we would check the `touches` count, and if `>= 2`, we would return true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleStartShouldSetResponder(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderHandleStartShouldSetResponder"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleStartShouldSetResponderCapture:member(1)",
              "docComment": "/**\n * There are times when the scroll view wants to become the responder (meaning respond to the next immediate `touchStart/touchEnd`), in a way that *doesn't* give priority to nested views (hence the capture phase):\n *\n * - Currently animating. - Tapping anywhere that is not the focused input, while the keyboard is up (which should dismiss the keyboard).\n *\n * Invoke this from an `onStartShouldSetResponderCapture` event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleStartShouldSetResponderCapture(\n    e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleStartShouldSetResponderCapture"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleTerminationRequest:member(1)",
              "docComment": "/**\n * We will allow the scroll view to give up its lock iff it acquired the lock during an animation. This is a very useful default that happens to satisfy many common user experiences.\n *\n * - Stop a scroll on the left edge, then turn that into an outer view's backswipe. - Stop a scroll mid-bounce at the top, continue pulling to have the outer view dismiss. - However, without catching the scroll view mid-bounce (while it is motionless), if you drag far enough for the scroll view to become responder (and therefore drag the scroll view a bit), any backswipe navigation of a swipe gesture higher in the view hierarchy, should be rejected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleTerminationRequest(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderHandleTerminationRequest"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleTouchEnd:member(1)",
              "docComment": "/**\n * Invoke this from an `onTouchEnd` event.\n *\n * @param e - Event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleTouchEnd(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleTouchEnd"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleTouchMove:member(1)",
              "docComment": "/**\n * Invoke this from an `onTouchMove` event.\n *\n * Since we know that the `SimpleEventPlugin` occurs later in the plugin order, after `ResponderEventPlugin`, we can detect that we were *not* permitted to be the responder (presumably because a contained view became responder). The `onResponderReject` won't fire in that case - it only fires when a *current* responder rejects our request.\n *\n * @param e - Touch Start event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleTouchMove(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleTouchMove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderHandleTouchStart:member(1)",
              "docComment": "/**\n * Invoke this from an `onTouchStart` event.\n *\n * Since we know that the `SimpleEventPlugin` occurs later in the plugin order, after `ResponderEventPlugin`, we can detect that we were *not* permitted to be the responder (presumably because a contained view became responder). The `onResponderReject` won't fire in that case - it only fires when a *current* responder rejects our request.\n *\n * @param e - Touch Start event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderHandleTouchStart(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderHandleTouchStart"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderInputMeasureAndScrollToKeyboard:member(1)",
              "docComment": "/**\n * The calculations performed here assume the scroll view takes up the entire screen - even if has some content inset. We then measure the offsets of the keyboard, and compensate both for the scroll view's \"contentInset\".\n *\n * @param left - Position of input w.r.t. table view.\n *\n * @param top - Position of input w.r.t. table view.\n *\n * @param width - Width of the text input.\n *\n * @param height - Height of the text input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderInputMeasureAndScrollToKeyboard(\n    left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderInputMeasureAndScrollToKeyboard"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderIsAnimating:member(1)",
              "docComment": "/**\n * A helper function for this class that lets us quickly determine if the view is currently animating. This is particularly useful to know when a touch has just started or ended.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderIsAnimating(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollResponderIsAnimating"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderKeyboardDidHide:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderKeyboardDidHide(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderKeyboardDidHide"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderKeyboardDidShow:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderKeyboardDidShow(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderKeyboardDidShow"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderKeyboardWillHide:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderKeyboardWillHide(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderKeyboardWillHide"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderKeyboardWillShow:member(1)",
              "docComment": "/**\n * Warning, this may be called several times for a single keyboard opening. It's best to store the information in this method and then take any action at a later point (either in `keyboardDidShow` or other).\n *\n * Here's the order that events occur in: - focus - willShow {startCoordinates, endCoordinates} several times - didShow several times - blur - willHide {startCoordinates, endCoordinates} several times - didHide several times\n *\n * The `ScrollResponder` providesModule callbacks for each of these events. Even though any user could have easily listened to keyboard events themselves, using these `props` callbacks ensures that ordering of events is consistent - and not dependent on the order that the keyboard events are subscribed to. This matters when telling the scroll view to scroll to where the keyboard is headed - the scroll responder better have been notified of the keyboard destination before being instructed to scroll to where the keyboard will be. Stick to the `ScrollResponder` callbacks, and everything will work.\n *\n * WARNING: These callbacks will fire even if a keyboard is displayed in a different navigation pane. Filter out the events to determine if they are relevant to you. (For example, only if you receive these callbacks after you had explicitly focused a node etc).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderKeyboardWillShow(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderKeyboardWillShow"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderScrollNativeHandleToKeyboard:member(1)",
              "docComment": "/**\n * This method should be used as the callback to onFocus in a TextInputs' parent view. Note that any module using this mixin needs to return the parent view's ref in getScrollViewRef() in order to use this method.\n *\n * @param nodeHandle - The TextInput node handle\n *\n * @param additionalOffset - The scroll view's top \"contentInset\". Default is 0.\n *\n * @param preventNegativeScrolling - Whether to allow pulling the content down to make it meet the keyboard's top. Default is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderScrollNativeHandleToKeyboard(\n    nodeHandle: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    additionalOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    preventNegativeScrollOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodeHandle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "additionalOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "preventNegativeScrollOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "scrollResponderScrollNativeHandleToKeyboard"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderScrollTo:member(1)",
              "docComment": "/**\n * A helper function to scroll to a specific point in the scrollview. This is currently used to help focus on child textviews, but can also be used to quickly scroll to any element we want to focus. Syntax:\n *\n * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n *\n * Note: The weird argument signature is due to the fact that, for historical reasons, the function also accepts separate arguments as an alternative to the options object. This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderScrollTo(\n    x?:\n      "
                },
                {
                  "kind": "Content",
                  "text": "| number\n      | {\n          x?: number | undefined;\n          y?: number | undefined;\n          animated?: boolean | undefined;\n        }"
                },
                {
                  "kind": "Content",
                  "text": ",\n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    animated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "animated",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "scrollResponderScrollTo"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderTextInputFocusError:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderTextInputFocusError(e: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderEvent",
                  "canonicalReference": "react-native!ScrollResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollResponderTextInputFocusError"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ScrollResponderMixin#scrollResponderZoomTo:member(1)",
              "docComment": "/**\n * A helper function to zoom to a specific rect in the scrollview. The argument has the shape {x: number; y: number; width: number; height: number; animated: boolean = true}\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollResponderZoomTo(\n    rect: "
                },
                {
                  "kind": "Content",
                  "text": "{\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      animated?: boolean | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ",\n    animated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", // deprecated, put this inside the rect argument instead\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rect",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "animated",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "scrollResponderZoomTo"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ScrollView:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class ScrollView extends "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewBase",
              "canonicalReference": "react-native!ScrollViewBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ScrollView",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#flashScrollIndicators:member(1)",
              "docComment": "/**\n * Displays the scroll indicators momentarily.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flashScrollIndicators(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "flashScrollIndicators"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#getInnerViewNode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInnerViewNode(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getInnerViewNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#getScrollableNode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollableNode(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScrollableNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#getScrollResponder:member(1)",
              "docComment": "/**\n * Returns a reference to the underlying scroll responder, which supports operations like `scrollTo`. All ScrollView-like components should implement this method so that they can be composed while providing access to the underlying scroll responder's methods.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollResponder(): "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollResponderMixin",
                  "canonicalReference": "react-native!ScrollResponderMixin:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScrollResponder"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#scrollTo:member(1)",
              "docComment": "/**\n * Scrolls to a given x, y offset, either immediately or with a smooth animation. Syntax:\n *\n * scrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n *\n * Note: The weird argument signature is due to the fact that, for historical reasons, the function also accepts separate arguments as an alternative to the options object. This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollTo(\n    y?:\n      "
                },
                {
                  "kind": "Content",
                  "text": "| number\n      | {\n          x?: number | undefined;\n          y?: number | undefined;\n          animated?: boolean | undefined;\n        }"
                },
                {
                  "kind": "Content",
                  "text": ",\n    deprecatedX?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    deprecatedAnimated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "deprecatedX",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "deprecatedAnimated",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "scrollTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#scrollToEnd:member(1)",
              "docComment": "/**\n * A helper function that scrolls to the end of the scrollview; If this is a vertical ScrollView, it scrolls to the bottom. If this is a horizontal ScrollView scrolls to the right.\n *\n * The options object has an animated prop, that enables the scrolling animation or not. The animated prop defaults to true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToEnd(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{animated?: boolean | undefined}"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "scrollToEnd"
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!ScrollView#scrollWithoutAnimationTo:member",
              "docComment": "/**\n * @deprecated\n *\n * Use scrollTo instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollWithoutAnimationTo?: "
                },
                {
                  "kind": "Content",
                  "text": "((y: number, x: number) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollWithoutAnimationTo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!ScrollView#setNativeProps:member(1)",
              "docComment": "/**\n * This function sends props straight to native. They will not participate in future diff process - this means that if you do not include them in the next render, they will remain active (see [Direct Manipulation](https://reactnative.dev/docs/direct-manipulation)).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNativeProps(nativeProps: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nativeProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNativeProps"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ScrollViewBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScrollViewBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ScrollResponderMixin",
              "canonicalReference": "react-native!ScrollResponderMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewComponent",
              "canonicalReference": "react-native!ScrollViewComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ScrollViewBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ScrollViewComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ScrollViewComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ScrollViewProps",
              "canonicalReference": "react-native!ScrollViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ScrollViewComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ScrollViewProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ScrollViewProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ScrollViewProperties = "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewProps",
              "canonicalReference": "react-native!ScrollViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ScrollViewPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ScrollViewPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ScrollViewPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewPropsAndroid",
              "canonicalReference": "react-native!ScrollViewPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ScrollViewPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ScrollViewPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ScrollViewPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewPropsIOS",
              "canonicalReference": "react-native!ScrollViewPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScrollViewProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScrollViewProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewPropsIOS",
              "canonicalReference": "react-native!ScrollViewPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "ScrollViewPropsAndroid",
              "canonicalReference": "react-native!ScrollViewPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "Touchable",
              "canonicalReference": "react-native!Touchable:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#contentContainerStyle:member",
              "docComment": "/**\n * These styles will be applied to the scroll view content container which wraps all of the child views. Example:\n *\n * return ( <ScrollView contentContainerStyle={styles.contentContainer}> </ScrollView> ); ... const styles = StyleSheet.create({ contentContainer: { paddingVertical: 20 } });\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentContainerStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentContainerStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#decelerationRate:member",
              "docComment": "/**\n * A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings for `UIScrollViewDecelerationRateNormal` and `UIScrollViewDecelerationRateFast` respectively.\n *\n * - `'normal'`: 0.998 on iOS, 0.985 on Android (the default) - `'fast'`: 0.99 on iOS, 0.9 on Android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decelerationRate?: "
                },
                {
                  "kind": "Content",
                  "text": "'fast' | 'normal' | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "decelerationRate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#disableIntervalMomentum:member",
              "docComment": "/**\n * When true, the scroll view stops on the next index (in relation to scroll position at release) regardless of how fast the gesture is. This can be used for horizontal pagination when the page is less than the width of the ScrollView. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableIntervalMomentum?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableIntervalMomentum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#disableScrollViewPanResponder:member",
              "docComment": "/**\n * When true, the default JS pan responder on the ScrollView is disabled, and full control over touches inside the ScrollView is left to its child components. This is particularly useful if `snapToInterval` is enabled, since it does not follow typical touch patterns. Do not use this on regular ScrollView use cases without `snapToInterval` as it may cause unexpected touches to occur while scrolling. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableScrollViewPanResponder?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableScrollViewPanResponder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#horizontal:member",
              "docComment": "/**\n * When true the scroll view's children are arranged horizontally in a row instead of vertically in a column. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "horizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#invertStickyHeaders:member",
              "docComment": "/**\n * If sticky headers should stick at the bottom instead of the top of the ScrollView. This is usually used with inverted ScrollViews.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invertStickyHeaders?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "invertStickyHeaders",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#keyboardDismissMode:member",
              "docComment": "/**\n * Determines whether the keyboard gets dismissed in response to a drag. - 'none' (the default) drags do not dismiss the keyboard. - 'onDrag' the keyboard is dismissed when a drag begins. - 'interactive' the keyboard is dismissed interactively with the drag and moves in synchrony with the touch; dragging upwards cancels the dismissal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardDismissMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'interactive' | 'on-drag' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardDismissMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#keyboardShouldPersistTaps:member",
              "docComment": "/**\n * Determines when the keyboard should stay visible after a tap. - 'never' (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won't receive the tap. - 'always', the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps. - 'handled', the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor). - false, deprecated, use 'never' instead - true, deprecated, use 'always' instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardShouldPersistTaps?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| boolean\n    | 'always'\n    | 'never'\n    | 'handled'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardShouldPersistTaps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onContentSizeChange:member",
              "docComment": "/**\n * Called when scrollable content view of the ScrollView changes. Handler function is passed the content width and content height as parameters: (contentWidth, contentHeight) It's implemented using onLayout handler attached to the content container which this ScrollView renders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onContentSizeChange?: "
                },
                {
                  "kind": "Content",
                  "text": "((w: number, h: number) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onContentSizeChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onMomentumScrollBegin:member",
              "docComment": "/**\n * Fires when scroll view has begun moving\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMomentumScrollBegin?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMomentumScrollBegin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onMomentumScrollEnd:member",
              "docComment": "/**\n * Fires when scroll view has finished moving\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMomentumScrollEnd?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMomentumScrollEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onScroll:member",
              "docComment": "/**\n * Fires at most once per frame during scrolling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScroll?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onScrollBeginDrag:member",
              "docComment": "/**\n * Fires if a user initiates a scroll gesture.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScrollBeginDrag?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScrollBeginDrag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#onScrollEndDrag:member",
              "docComment": "/**\n * Fires when a user has finished scrolling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScrollEndDrag?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScrollEndDrag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#pagingEnabled:member",
              "docComment": "/**\n * When true the scroll view stops on multiples of the scroll view's size when scrolling. This can be used for horizontal pagination. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pagingEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pagingEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#refreshControl:member",
              "docComment": "/**\n * A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshControl?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RefreshControlProps",
                  "canonicalReference": "react-native!RefreshControlProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "refreshControl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#removeClippedSubviews:member",
              "docComment": "/**\n * Experimental: When true offscreen child views (whose `overflow` value is `hidden`) are removed from their native backing superview when offscreen. This can improve scrolling performance on long lists. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeClippedSubviews?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removeClippedSubviews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#scrollEnabled:member",
              "docComment": "/**\n * When false, the content does not scroll. The default value is true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#showsHorizontalScrollIndicator:member",
              "docComment": "/**\n * When true, shows a horizontal scroll indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showsHorizontalScrollIndicator?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showsHorizontalScrollIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#showsVerticalScrollIndicator:member",
              "docComment": "/**\n * When true, shows a vertical scroll indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showsVerticalScrollIndicator?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showsVerticalScrollIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#snapToEnd:member",
              "docComment": "/**\n * Use in conjunction with `snapToOffsets`. By default, the end of the list counts as a snap offset. Set `snapToEnd` to false to disable this behavior and allow the list to scroll freely between its end and the last `snapToOffsets` offset. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapToEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "snapToEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#snapToInterval:member",
              "docComment": "/**\n * When set, causes the scroll view to stop at multiples of the value of `snapToInterval`. This can be used for paginating through children that have lengths smaller than the scroll view. Used in combination with `snapToAlignment` and `decelerationRate=\"fast\"`. Overrides less configurable `pagingEnabled` prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapToInterval?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "snapToInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#snapToOffsets:member",
              "docComment": "/**\n * When set, causes the scroll view to stop at the defined offsets. This can be used for paginating through variously sized children that have lengths smaller than the scroll view. Typically used in combination with `decelerationRate=\"fast\"`. Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapToOffsets?: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "snapToOffsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#snapToStart:member",
              "docComment": "/**\n * Use in conjunction with `snapToOffsets`. By default, the beginning of the list counts as a snap offset. Set `snapToStart` to false to disable this behavior and allow the list to scroll freely between its start and the first `snapToOffsets` offset. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapToStart?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "snapToStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#StickyHeaderComponent:member",
              "docComment": "/**\n * A React Component that will be used to render sticky headers, should be used together with stickyHeaderIndices. You may need to set this component if your sticky header uses custom transforms, for example, when you want your list to have an animated and hidable header. If component have not been provided, the default ScrollViewStickyHeader component will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StickyHeaderComponent?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<any> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "StickyHeaderComponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#stickyHeaderHiddenOnScroll:member",
              "docComment": "/**\n * When true, Sticky header is hidden when scrolling down, and dock at the top when scrolling up.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyHeaderHiddenOnScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stickyHeaderHiddenOnScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#stickyHeaderIndices:member",
              "docComment": "/**\n * An array of child indices determining which children get docked to the top of the screen when scrolling. For example passing `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with `horizontal={true}`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyHeaderIndices?: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stickyHeaderIndices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewProps#style:member",
              "docComment": "/**\n * Style\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            },
            {
              "startIndex": 7,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScrollViewPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScrollViewPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#endFillColor:member",
              "docComment": "/**\n * Sometimes a scrollview takes up more space than its content fills. When this is the case, this prop will fill the rest of the scrollview with a color to avoid setting a background and creating unnecessary overdraw. This is an advanced optimization that is not needed in the general case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endFillColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "endFillColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#fadingEdgeLength:member",
              "docComment": "/**\n * Fades out the edges of the scroll content.\n *\n * If the value is greater than 0, the fading edges will be set accordingly to the current scroll direction and position, indicating if there is more content to show.\n *\n * The default value is 0.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadingEdgeLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fadingEdgeLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#nestedScrollEnabled:member",
              "docComment": "/**\n * Enables nested scrolling for Android API level 21+. Nested scrolling is supported by default on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nestedScrollEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nestedScrollEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#overScrollMode:member",
              "docComment": "/**\n * Used to override default value of overScroll mode.\n *\n * Possible values: - 'auto' - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll. - 'always' - Always allow a user to over-scroll this view. - 'never' - Never allow a user to over-scroll this view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overScrollMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'always' | 'never' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overScrollMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#persistentScrollbar:member",
              "docComment": "/**\n * Causes the scrollbars not to turn transparent when they are not in use. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persistentScrollbar?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "persistentScrollbar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsAndroid#scrollPerfTag:member",
              "docComment": "/**\n * Tag used to log scroll performance on this scroll view. Will force momentum events to be turned on (see sendMomentumEvents). This doesn't do anything out of the box and you need to implement a custom native FpsListener for it to be useful.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollPerfTag?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollPerfTag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ScrollViewPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScrollViewPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "ScrollViewPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#alwaysBounceHorizontal:member",
              "docComment": "/**\n * When true the scroll view bounces horizontally when it reaches the end even if the content is smaller than the scroll view itself. The default value is true when `horizontal={true}` and false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysBounceHorizontal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alwaysBounceHorizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#alwaysBounceVertical:member",
              "docComment": "/**\n * When true the scroll view bounces vertically when it reaches the end even if the content is smaller than the scroll view itself. The default value is false when `horizontal={true}` and true otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysBounceVertical?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alwaysBounceVertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#automaticallyAdjustContentInsets:member",
              "docComment": "/**\n * Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "automaticallyAdjustContentInsets?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "automaticallyAdjustContentInsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#automaticallyAdjustKeyboardInsets:member",
              "docComment": "/**\n * Controls whether the ScrollView should automatically adjust its contentInset and scrollViewInsets when the Keyboard changes its size. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "automaticallyAdjustKeyboardInsets?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "automaticallyAdjustKeyboardInsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#automaticallyAdjustsScrollIndicatorInsets:member",
              "docComment": "/**\n * Controls whether iOS should automatically adjust the scroll indicator insets. The default value is true. Available on iOS 13 and later.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "automaticallyAdjustsScrollIndicatorInsets?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "automaticallyAdjustsScrollIndicatorInsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#bounces:member",
              "docComment": "/**\n * When true the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false it disables all bouncing even if the `alwaysBounce*` props are true. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounces?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bounces",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#bouncesZoom:member",
              "docComment": "/**\n * When true gestures can drive zoom past min/max and the zoom will animate to the min/max value at gesture end otherwise the zoom will not exceed the limits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bouncesZoom?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bouncesZoom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#canCancelContentTouches:member",
              "docComment": "/**\n * When false once tracking starts won't try to drag if the touch moves. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canCancelContentTouches?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "canCancelContentTouches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#centerContent:member",
              "docComment": "/**\n * When true the scroll view automatically centers the content when the content is smaller than the scroll view bounds; when the content is larger than the scroll view this property has no effect. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "centerContent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "centerContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#contentInset:member",
              "docComment": "/**\n * The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {0, 0, 0, 0}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentInset?: "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#contentInsetAdjustmentBehavior:member",
              "docComment": "/**\n * This property specifies how the safe area insets are used to modify the content area of the scroll view. The default value of this property must be 'automatic'. But the default value is 'never' until RN@0.51.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentInsetAdjustmentBehavior?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentInsetAdjustmentBehavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#contentOffset:member",
              "docComment": "/**\n * Used to manually set the starting scroll offset. The default value is {x: 0, y: 0}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "PointProp",
                  "canonicalReference": "react-native!PointProp:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#directionalLockEnabled:member",
              "docComment": "/**\n * When true the ScrollView will try to lock to only vertical or horizontal scrolling while dragging. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalLockEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "directionalLockEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#indicatorStyle:member",
              "docComment": "/**\n * The style of the scroll indicators. - default (the default), same as black. - black, scroll indicator is black. This style is good against a white content background. - white, scroll indicator is white. This style is good against a black content background.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indicatorStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'default' | 'black' | 'white' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "indicatorStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#maintainVisibleContentPosition:member",
              "docComment": "/**\n * When set, the scroll view will adjust the scroll position so that the first child that is currently visible and at or beyond minIndexForVisible will not change position. This is useful for lists that are loading content in both directions, e.g. a chat thread, where new messages coming in might otherwise cause the scroll position to jump. A value of 0 is common, but other values such as 1 can be used to skip loading spinners or other content that should not maintain position.\n *\n * The optional autoscrollToTopThreshold can be used to make the content automatically scroll to the top after making the adjustment if the user was within the threshold of the top before the adjustment was made. This is also useful for chat-like applications where you want to see new messages scroll into place, but not if the user has scrolled up a ways and it would be disruptive to scroll a bunch.\n *\n * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now, don't re-order the content of any ScrollViews or Lists that use this feature.\n *\n * Caveat 2: This uses contentOffset and frame.origin in native code to compute visibility. Occlusion, transforms, and other complexity won't be taken into account as to whether content is \"visible\" or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maintainVisibleContentPosition?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| null\n    | {\n        autoscrollToTopThreshold?: number | null | undefined;\n        minIndexForVisible: number;\n      }\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maintainVisibleContentPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#maximumZoomScale:member",
              "docComment": "/**\n * The maximum allowed zoom scale. The default value is 1.0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximumZoomScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maximumZoomScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#minimumZoomScale:member",
              "docComment": "/**\n * The minimum allowed zoom scale. The default value is 1.0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumZoomScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minimumZoomScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#onScrollAnimationEnd:member",
              "docComment": "/**\n * Called when a scrolling animation ends.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScrollAnimationEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScrollAnimationEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#onScrollToTop:member",
              "docComment": "/**\n * Fires when the scroll view scrolls to top after the status bar has been tapped  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScrollToTop?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeScrollEvent",
                  "canonicalReference": "react-native!NativeScrollEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScrollToTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#pinchGestureEnabled:member",
              "docComment": "/**\n * When true, ScrollView allows use of pinch gestures to zoom in and out. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pinchGestureEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pinchGestureEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#scrollEventThrottle:member",
              "docComment": "/**\n * Limits how often scroll events will be fired while scrolling, specified as a time interval in ms. This may be useful when expensive work is performed in response to scrolling. Values <= `16` will disable throttling, regardless of the refresh rate of the device.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollEventThrottle?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollEventThrottle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#scrollIndicatorInsets:member",
              "docComment": "/**\n * The amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the contentInset. Defaults to {0, 0, 0, 0}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollIndicatorInsets?: "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollIndicatorInsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#scrollsToTop:member",
              "docComment": "/**\n * When true the scroll view scrolls to top when the status bar is tapped. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollsToTop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollsToTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#scrollToOverflowEnabled:member",
              "docComment": "/**\n * When true, the scroll view can be programmatically scrolled beyond its content size. The default value is false.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToOverflowEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollToOverflowEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#snapToAlignment:member",
              "docComment": "/**\n * When `snapToInterval` is set, `snapToAlignment` will define the relationship of the snapping to the scroll view. - `start` (the default) will align the snap at the left (horizontal) or top (vertical) - `center` will align the snap in the center - `end` will align the snap at the right (horizontal) or bottom (vertical)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapToAlignment?: "
                },
                {
                  "kind": "Content",
                  "text": "'start' | 'center' | 'end' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "snapToAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ScrollViewPropsIOS#zoomScale:member",
              "docComment": "/**\n * The current scale of the scroll view content. The default value is 1.0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "zoomScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SectionBase:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SectionBase<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "SectionBase",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionBase#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionBase#ItemSeparatorComponent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ItemSeparatorComponent?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<any> | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ItemSeparatorComponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionBase#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionBase#keyExtractor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyExtractor?: "
                },
                {
                  "kind": "Content",
                  "text": "((item: ItemT, index: number) => string) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyExtractor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionBase#renderItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItem?: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListRenderItem",
                  "canonicalReference": "react-native!SectionListRenderItem:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!SectionList:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class SectionList<\n  ItemT = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ",\n  SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": ",\n> extends "
            },
            {
              "kind": "Reference",
              "text": "SectionListComponent",
              "canonicalReference": "react-native!SectionListComponent:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SectionListProps",
              "canonicalReference": "react-native!SectionListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT, SectionT>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "isAbstract": false,
          "name": "SectionList",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!SectionListComponent:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export abstract class SectionListComponent<\n  Props,\n> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<Props>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Props",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": true,
          "name": "SectionListComponent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "react-native!SectionListComponent#flashScrollIndicators:member(1)",
              "docComment": "/**\n * Displays the scroll indicators momentarily.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flashScrollIndicators(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "flashScrollIndicators"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!SectionListComponent#getScrollableNode:member(1)",
              "docComment": "/**\n * Provides a handle to the underlying scroll node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollableNode(): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeHandle",
                  "canonicalReference": "react-native!NodeHandle:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScrollableNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!SectionListComponent#getScrollResponder:member(1)",
              "docComment": "/**\n * Provides a handle to the underlying scroll responder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollResponder(): "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollView",
                  "canonicalReference": "react-native!ScrollView:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScrollResponder"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!SectionListComponent#recordInteraction:member(1)",
              "docComment": "/**\n * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g. if `waitForInteractions` is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recordInteraction(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "recordInteraction"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!SectionListComponent#scrollToLocation:member(1)",
              "docComment": "/**\n * Scrolls to the item at the specified sectionIndex and itemIndex (within the section) positioned in the viewable area such that viewPosition 0 places it at the top (and may be covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToLocation(params: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListScrollParams",
                  "canonicalReference": "react-native!SectionListScrollParams:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "scrollToLocation"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SectionListData:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SectionListData<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "SectionBase",
              "canonicalReference": "react-native!SectionBase:interface"
            },
            {
              "kind": "Content",
              "text": "<\n  ItemT,\n  SectionT\n> &\n  SectionT"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "name": "SectionListData",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SectionListProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use SectionListProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SectionListProperties<ItemT> = "
            },
            {
              "kind": "Reference",
              "text": "SectionListProps",
              "canonicalReference": "react-native!SectionListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "SectionListProperties",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SectionListProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SectionListProps<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": ">\n  extends "
            },
            {
              "kind": "Reference",
              "text": "VirtualizedListWithoutPreConfiguredProps",
              "canonicalReference": "react-native!VirtualizedListWithoutPreConfiguredProps:type"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "SectionListProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#extraData:member",
              "docComment": "/**\n * A marker property for telling the list to re-render (since it implements PureComponent). If any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the `data` prop, stick it here and treat it immutably.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraData?: "
                },
                {
                  "kind": "Content",
                  "text": "any | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extraData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#getItemLayout:member",
              "docComment": "/**\n * `getItemLayout` is an optional optimization that lets us skip measurement of dynamic content if you know the height of items a priori. getItemLayout is the most efficient, and is easy to use if you have fixed height items, for example:\n * ```\n * getItemLayout={(data, index) => (\n *   {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n * )}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getItemLayout?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((\n        data: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListData",
                  "canonicalReference": "react-native!SectionListData:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>[] | null,\n        index: number,\n      ) => {length: number; offset: number; index: number})\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "getItemLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#initialNumToRender:member",
              "docComment": "/**\n * How many items to render in the initial batch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialNumToRender?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "initialNumToRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#inverted:member",
              "docComment": "/**\n * Reverses the direction of scroll. Uses scale transforms of -1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inverted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inverted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#keyExtractor:member",
              "docComment": "/**\n * Used to extract a unique key for a given item at the specified index. Key is used for caching and as the react key to track item re-ordering. The default extractor checks `item.key`, then falls back to using the index, like React does.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyExtractor?: "
                },
                {
                  "kind": "Content",
                  "text": "((item: ItemT, index: number) => string) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyExtractor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#legacyImplementation:member",
              "docComment": "/**\n * Uses legacy MetroListView instead of default VirtualizedSectionList\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "legacyImplementation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "legacyImplementation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#onEndReached:member",
              "docComment": "/**\n * Called once when the scroll position gets within onEndReachedThreshold of the rendered content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEndReached?: "
                },
                {
                  "kind": "Content",
                  "text": "((info: {distanceFromEnd: number}) => void) | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onEndReached",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#onEndReachedThreshold:member",
              "docComment": "/**\n * How far from the end (in units of visible length of the list) the bottom edge of the list must be from the end of the content to trigger the `onEndReached` callback. Thus a value of 0.5 will trigger `onEndReached` when the end of the content is within half the visible length of the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEndReachedThreshold?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onEndReachedThreshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#onRefresh:member",
              "docComment": "/**\n * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRefresh?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRefresh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#onScrollToIndexFailed:member",
              "docComment": "/**\n * Used to handle failures when scrolling to an index that has not been measured yet. Recommended action is to either compute your own offset and `scrollTo` it, or scroll as far as possible and then try again after more items have been rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScrollToIndexFailed?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((info: {\n        index: number;\n        highestMeasuredFrameIndex: number;\n        averageItemLength: number;\n      }) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScrollToIndexFailed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#refreshing:member",
              "docComment": "/**\n * Set this true while waiting for new data from a refresh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "refreshing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#removeClippedSubviews:member",
              "docComment": "/**\n * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n *\n * This may improve scroll performance for large lists.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeClippedSubviews?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removeClippedSubviews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#renderItem:member",
              "docComment": "/**\n * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItem?: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListRenderItem",
                  "canonicalReference": "react-native!SectionListRenderItem:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#renderScrollComponent:member",
              "docComment": "/**\n * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderScrollComponent?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((props: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollViewProps",
                  "canonicalReference": "react-native!ScrollViewProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ScrollViewProps",
                  "canonicalReference": "react-native!ScrollViewProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderScrollComponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#renderSectionFooter:member",
              "docComment": "/**\n * Rendered at the bottom of each section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderSectionFooter?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((info: {\n        section: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListData",
                  "canonicalReference": "react-native!SectionListData:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>;\n      }) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderSectionFooter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#renderSectionHeader:member",
              "docComment": "/**\n * Rendered at the top of each section. Sticky headers are not yet supported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderSectionHeader?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((info: {\n        section: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListData",
                  "canonicalReference": "react-native!SectionListData:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>;\n      }) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderSectionHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#sections:member",
              "docComment": "/**\n * An array of objects with data for each section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sections: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SectionListData",
                  "canonicalReference": "react-native!SectionListData:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sections",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#SectionSeparatorComponent:member",
              "docComment": "/**\n * Rendered in between each section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SectionSeparatorComponent?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>\n    | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "\n    | null\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "SectionSeparatorComponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListProps#stickySectionHeadersEnabled:member",
              "docComment": "/**\n * Makes section headers stick to the top of the screen until the next one pushes it off. Only enabled by default on iOS because that is the platform standard there.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickySectionHeadersEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stickySectionHeadersEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SectionListRenderItem:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SectionListRenderItem<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(\n  info: "
            },
            {
              "kind": "Reference",
              "text": "SectionListRenderItemInfo",
              "canonicalReference": "react-native!SectionListRenderItemInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT, SectionT>,\n) => "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "name": "SectionListRenderItem",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SectionListRenderItemInfo:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/sectionlist.html#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SectionListRenderItemInfo<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": ">\n  extends "
            },
            {
              "kind": "Reference",
              "text": "ListRenderItemInfo",
              "canonicalReference": "@react-native/virtualized-lists!ListRenderItemInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "SectionListRenderItemInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListRenderItemInfo#section:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "section: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListData",
                  "canonicalReference": "react-native!SectionListData:type"
                },
                {
                  "kind": "Content",
                  "text": "<ItemT, SectionT>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "section",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SectionListScrollParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SectionListScrollParams "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "name": "SectionListScrollParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListScrollParams#animated:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListScrollParams#itemIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "itemIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListScrollParams#sectionIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sectionIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sectionIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListScrollParams#viewOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "viewOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "viewOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SectionListScrollParams#viewPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "viewPosition?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "viewPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SectionListStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SectionListStatic<ItemT, SectionT = "
            },
            {
              "kind": "Reference",
              "text": "DefaultSectionT",
              "canonicalReference": "react-native!DefaultSectionT:type"
            },
            {
              "kind": "Content",
              "text": ">\n  extends "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentClass",
              "canonicalReference": "@types/react!React.ComponentClass:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SectionListProps",
              "canonicalReference": "react-native!SectionListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT, SectionT>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SectionT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "SectionListStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SectionListStatic#scrollToLocation:member(1)",
              "docComment": "/**\n * Scrolls to the item at the specified sectionIndex and itemIndex (within the section) positioned in the viewable area such that viewPosition 0 places it at the top (and may be covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToLocation?(params: "
                },
                {
                  "kind": "Reference",
                  "text": "SectionListScrollParams",
                  "canonicalReference": "react-native!SectionListScrollParams:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "scrollToLocation"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!~setEnabled:function(1)",
          "docComment": "/**\n * @deprecated\n *\n * This function is now a no-op but it's left for backwards compatibility. `isEnabled` will now synchronously check if we're actively profiling or not. This is necessary because we don't have callbacks to know when profiling has started/stopped on Android APIs.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function setEnabled(_doEnable: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_doEnable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setEnabled"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Settings:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Settings = "
            },
            {
              "kind": "Reference",
              "text": "SettingsStatic",
              "canonicalReference": "react-native!SettingsStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Settings/Settings.d.ts",
          "releaseTag": "Public",
          "name": "Settings",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Settings:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Settings: "
            },
            {
              "kind": "Reference",
              "text": "SettingsStatic",
              "canonicalReference": "react-native!SettingsStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Settings/Settings.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Settings",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SettingsStatic:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SettingsStatic "
            }
          ],
          "fileUrlPath": "Libraries/Settings/Settings.d.ts",
          "releaseTag": "Public",
          "name": "SettingsStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SettingsStatic#clearWatch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearWatch(watchId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "watchId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "clearWatch"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SettingsStatic#get:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SettingsStatic#set:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(settings: "
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "settings",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SettingsStatic#watchKeys:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchKeys(keys: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keys",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "watchKeys"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ShadowStyleIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShadowStyleIOS "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ShadowStyleIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShadowStyleIOS#shadowColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShadowStyleIOS#shadowOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<{width: number; height: number}> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShadowStyleIOS#shadowOpacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowOpacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShadowStyleIOS#shadowRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shadowRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Share:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Share = "
            },
            {
              "kind": "Reference",
              "text": "ShareStatic",
              "canonicalReference": "react-native!ShareStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "releaseTag": "Public",
          "name": "Share",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Share:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Share: "
            },
            {
              "kind": "Reference",
              "text": "ShareStatic",
              "canonicalReference": "react-native!ShareStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Share",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ShareAction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ShareAction = "
            },
            {
              "kind": "Content",
              "text": "{\n  action: 'sharedAction' | 'dismissedAction';\n  activityType?: string | null | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "releaseTag": "Public",
          "name": "ShareAction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ShareActionSheetIOSOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShareActionSheetIOSOptions "
            }
          ],
          "fileUrlPath": "Libraries/ActionSheetIOS/ActionSheetIOS.d.ts",
          "releaseTag": "Public",
          "name": "ShareActionSheetIOSOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareActionSheetIOSOptions#anchor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anchor?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anchor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareActionSheetIOSOptions#excludedActivityTypes:member",
              "docComment": "/**\n * The activities to exclude from the ActionSheet. For example: ['com.apple.UIKit.activity.PostToTwitter']\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludedActivityTypes?: "
                },
                {
                  "kind": "Content",
                  "text": "string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "excludedActivityTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareActionSheetIOSOptions#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareActionSheetIOSOptions#subject:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subject?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareActionSheetIOSOptions#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ShareContent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ShareContent =\n  "
            },
            {
              "kind": "Content",
              "text": "| {\n      title?: string | undefined;\n      url: string;\n      message?: string | undefined;\n    }\n  | {\n      title?: string | undefined;\n      url?: string | undefined;\n      message: string;\n    }"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "releaseTag": "Public",
          "name": "ShareContent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ShareOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ShareOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n  dialogTitle?: string | undefined;\n  excludedActivityTypes?: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string> | undefined;\n  tintColor?: "
            },
            {
              "kind": "Reference",
              "text": "ColorValue",
              "canonicalReference": "react-native!ColorValue:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  subject?: string | undefined;\n  anchor?: number | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "releaseTag": "Public",
          "name": "ShareOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ShareStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShareStatic "
            }
          ],
          "fileUrlPath": "Libraries/Share/Share.d.ts",
          "releaseTag": "Public",
          "name": "ShareStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareStatic#dismissedAction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissedAction: "
                },
                {
                  "kind": "Content",
                  "text": "'dismissedAction'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dismissedAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ShareStatic#share:member(1)",
              "docComment": "/**\n * Open a dialog to share text content.\n *\n * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined.\n *\n * In Android, Returns a Promise which always resolves with action being `Share.sharedAction`.\n *\n * ### Content\n *\n * #### iOS\n *\n * - `url` - a URL to share - `message` - a message to share\n *\n * At least one of `URL` or `message` is required.\n *\n * #### Android\n *\n * - `title` - title of the message (optional) - `message` - a message to share (often will include a URL).\n *\n * ### Options\n *\n * #### iOS\n *\n * - `subject` - a subject to share via email - `excludedActivityTypes` - `tintColor`\n *\n * #### Android\n *\n * - `dialogTitle`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "share(content: "
                },
                {
                  "kind": "Reference",
                  "text": "ShareContent",
                  "canonicalReference": "react-native!ShareContent:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ShareOptions",
                  "canonicalReference": "react-native!ShareOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ShareAction",
                  "canonicalReference": "react-native!ShareAction:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "share"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ShareStatic#sharedAction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sharedAction: "
                },
                {
                  "kind": "Content",
                  "text": "'sharedAction'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sharedAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SimpleTask:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SimpleTask = "
            },
            {
              "kind": "Content",
              "text": "{\n  name: string;\n  gen: () => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Interaction/InteractionManager.d.ts",
          "releaseTag": "Public",
          "name": "SimpleTask",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SkewXTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface SkewXTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "SkewXTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SkewXTransform#skewX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skewX: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "skewX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SkewYTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface SkewYTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "SkewYTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SkewYTransform#skewY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skewY: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableStringValue",
                  "canonicalReference": "react-native!AnimatableStringValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "skewY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!StatusBar:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class StatusBar extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StatusBarProps",
              "canonicalReference": "react-native!StatusBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StatusBar",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.currentHeight:member",
              "docComment": "/**\n * The current height of the status bar on the device.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static currentHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "currentHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.popStackEntry:member",
              "docComment": "/**\n * Pop a StatusBar entry from the stack.\n *\n * @param entry - Entry returned from `pushStackEntry`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static popStackEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(entry: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "popStackEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.pushStackEntry:member",
              "docComment": "/**\n * Push a StatusBar entry onto the stack. The return value should be passed to `popStackEntry` when complete.\n *\n * @param props - Object containing the StatusBar props to use in the stack entry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static pushStackEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pushStackEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.replaceStackEntry:member",
              "docComment": "/**\n * Replace an existing StatusBar stack entry with new props.\n *\n * @param entry - Entry returned from `pushStackEntry` to replace.\n *\n * @param props - Object containing the StatusBar props to use in the replacement stack entry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static replaceStackEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    entry: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    props: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ) => "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarProps",
                  "canonicalReference": "react-native!StatusBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "replaceStackEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.setBackgroundColor:member",
              "docComment": "/**\n * Set the background color for the status bar\n *\n * @param color - Background color.\n *\n * @param animated - Animate the style change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setBackgroundColor: "
                },
                {
                  "kind": "Content",
                  "text": "(color: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": ", animated?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setBackgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.setBarStyle:member",
              "docComment": "/**\n * Set the status bar style\n *\n * @param style - Status bar style to set\n *\n * @param animated - Animate the style change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setBarStyle: "
                },
                {
                  "kind": "Content",
                  "text": "(style: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarStyle",
                  "canonicalReference": "react-native!StatusBarStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ", animated?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setBarStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.setHidden:member",
              "docComment": "/**\n * Show or hide the status bar\n *\n * @param hidden - The dialog's title.\n *\n * @param animation - Optional animation when changing the status bar hidden property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setHidden: "
                },
                {
                  "kind": "Content",
                  "text": "(hidden: boolean, animation?: "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarAnimation",
                  "canonicalReference": "react-native!StatusBarAnimation:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.setNetworkActivityIndicatorVisible:member",
              "docComment": "/**\n * Control the visibility of the network activity indicator\n *\n * @param visible - Show the indicator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setNetworkActivityIndicatorVisible: "
                },
                {
                  "kind": "Content",
                  "text": "(visible: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setNetworkActivityIndicatorVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!StatusBar.setTranslucent:member",
              "docComment": "/**\n * Control the translucency of the status bar\n *\n * @param translucent - Set as translucent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setTranslucent: "
                },
                {
                  "kind": "Content",
                  "text": "(translucent: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTranslucent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StatusBarAnimation:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StatusBarAnimation = "
            },
            {
              "kind": "Content",
              "text": "'none' | 'fade' | 'slide'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarAnimation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StatusBarProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use StatusBarProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StatusBarProperties = "
            },
            {
              "kind": "Reference",
              "text": "StatusBarProps",
              "canonicalReference": "react-native!StatusBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StatusBarPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use StatusBarPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StatusBarPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "StatusBarPropsAndroid",
              "canonicalReference": "react-native!StatusBarPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StatusBarPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use StatusBarPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StatusBarPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "StatusBarPropsIOS",
              "canonicalReference": "react-native!StatusBarPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!StatusBarProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatusBarProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "StatusBarPropsIOS",
              "canonicalReference": "react-native!StatusBarPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "StatusBarPropsAndroid",
              "canonicalReference": "react-native!StatusBarPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarProps#animated:member",
              "docComment": "/**\n * If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "animated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarProps#barStyle:member",
              "docComment": "/**\n * Sets the color of the status bar text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "barStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "StatusBarStyle",
                  "canonicalReference": "react-native!StatusBarStyle:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "barStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarProps#hidden:member",
              "docComment": "/**\n * If the status bar is hidden.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!StatusBarPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatusBarPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarPropsAndroid#backgroundColor:member",
              "docComment": "/**\n * The background color of the status bar.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarPropsAndroid#translucent:member",
              "docComment": "/**\n * If the status bar is translucent. When translucent is set to true, the app will draw under the status bar. This is useful when using a semi transparent status bar color.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translucent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "translucent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!StatusBarPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatusBarPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarPropsIOS#networkActivityIndicatorVisible:member",
              "docComment": "/**\n * If the network activity indicator should be visible.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "networkActivityIndicatorVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "networkActivityIndicatorVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StatusBarPropsIOS#showHideTransition:member",
              "docComment": "/**\n * The transition effect when showing and hiding the status bar using the hidden prop. Defaults to 'fade'.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showHideTransition?: "
                },
                {
                  "kind": "Content",
                  "text": "null | 'fade' | 'slide' | 'none' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showHideTransition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StatusBarStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StatusBarStyle = "
            },
            {
              "kind": "Content",
              "text": "'default' | 'light-content' | 'dark-content'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/StatusBar/StatusBar.d.ts",
          "releaseTag": "Public",
          "name": "StatusBarStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!StyleProp:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StyleProp<T> =\n  "
            },
            {
              "kind": "Content",
              "text": "| T\n  | "
            },
            {
              "kind": "Reference",
              "text": "RegisteredStyle",
              "canonicalReference": "react-native!RegisteredStyle:type"
            },
            {
              "kind": "Content",
              "text": "<T>\n  | "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "react-native!RecursiveArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T | "
            },
            {
              "kind": "Reference",
              "text": "RegisteredStyle",
              "canonicalReference": "react-native!RegisteredStyle:type"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "Falsy",
              "canonicalReference": "react-native!Falsy:type"
            },
            {
              "kind": "Content",
              "text": ">\n  | "
            },
            {
              "kind": "Reference",
              "text": "Falsy",
              "canonicalReference": "react-native!Falsy:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "StyleProp",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!StyleSheet:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export namespace StyleSheet "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "StyleSheet",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "react-native!StyleSheet.absoluteFill:var",
              "docComment": "/**\n * A very common pattern is to create overlays with position absolute and zero positioning, so `absoluteFill` can be used for convenience and to reduce duplication of these repeated styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "absoluteFill: "
                },
                {
                  "kind": "Reference",
                  "text": "RegisteredStyle",
                  "canonicalReference": "react-native!RegisteredStyle:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AbsoluteFillStyle",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "absoluteFill",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!StyleSheet.absoluteFillObject:var",
              "docComment": "/**\n * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be used to create a customized entry in a `StyleSheet`, e.g.:\n *\n * const styles = StyleSheet.create({ wrapper: { ...StyleSheet.absoluteFillObject, top: 10, backgroundColor: 'transparent', }, });\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "absoluteFillObject: "
                },
                {
                  "kind": "Reference",
                  "text": "AbsoluteFillStyle",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle:interface"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "absoluteFillObject",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface AbsoluteFillStyle "
                }
              ],
              "releaseTag": "Public",
              "name": "AbsoluteFillStyle",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle#bottom:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "bottom: "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "bottom",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle#left:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "left: "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "left",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Content",
                      "text": "'absolute'"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle#right:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "right: "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "right",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "react-native!StyleSheet.AbsoluteFillStyle#top:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "top: "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "top",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!StyleSheet.compose:function(1)",
              "docComment": "/**\n * Combines two styles such that style2 will override any styles in style1. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function compose<\n    T extends "
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextStyle",
                  "canonicalReference": "react-native!TextStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageStyle",
                  "canonicalReference": "react-native!ImageStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ",\n    U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ",\n    V extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ",\n  >(\n    style1: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": ",\n    style2: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<V> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<V>>"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 27
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style1",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 17
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "style2",
                  "parameterTypeTokenRange": {
                    "startIndex": 18,
                    "endIndex": 24
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "compose"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!StyleSheet.create:function(1)",
              "docComment": "/**\n * An identity function for creating style sheets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function create<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "NamedStyles",
                  "canonicalReference": "react-native!StyleSheet.NamedStyles:type"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "NamedStyles",
                  "canonicalReference": "react-native!StyleSheet.NamedStyles:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ">(\n    // The extra & NamedStyles<any> here helps Typescript catch typos: e.g.,\n    // the following code would not error with `styles: T | NamedStyles<T>`,\n    // but would error with `styles: T & NamedStyles<any>`\n    //\n    // ```ts\n    // StyleSheet.create({\n    //   someComponent: { marginLeft: 1, magrinRight: 1 },\n    // });\n    // ```\n    styles: "
                },
                {
                  "kind": "Content",
                  "text": "T & "
                },
                {
                  "kind": "Reference",
                  "text": "NamedStyles",
                  "canonicalReference": "react-native!StyleSheet.NamedStyles:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styles",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!StyleSheet.flatten:function(1)",
              "docComment": "/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * Example:\n * ```\n * const styles = StyleSheet.create({\n *   listItem: {\n *     flex: 1,\n *     fontSize: 16,\n *     color: 'white'\n *   },\n *   selectedListItem: {\n *     color: 'green'\n *   }\n * });\n *\n * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n * // returns { flex: 1, fontSize: 16, color: 'green' }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function flatten<T>(\n    style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "T extends (infer U)[] ? U : T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatten"
            },
            {
              "kind": "Variable",
              "canonicalReference": "react-native!StyleSheet.hairlineWidth:var",
              "docComment": "/**\n * This is defined as the width of a thin line on the platform. It can be used as the thickness of a border or division between two elements. Example:\n * ```\n *   {\n *     borderBottomColor: '#bbb',\n *     borderBottomWidth: StyleSheet.hairlineWidth\n *   }\n * ```\n *\n * This constant will always be a round number of pixels (so a line defined by it look crisp) and will try to match the standard width of a thin line on the underlying platform. However, you should not rely on it being a constant size, because on different platforms and screen densities its value may be calculated differently.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hairlineWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "hairlineWidth",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!StyleSheet.NamedStyles:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type NamedStyles<T> = "
                },
                {
                  "kind": "Content",
                  "text": "{[P in keyof T]: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextStyle",
                  "canonicalReference": "react-native!TextStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageStyle",
                  "canonicalReference": "react-native!ImageStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NamedStyles",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!StyleSheet.setStyleAttributePreprocessor:function(1)",
              "docComment": "/**\n * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.\n *\n * Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setStyleAttributePreprocessor(\n    property: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    process: "
                },
                {
                  "kind": "Content",
                  "text": "(nextProp: any) => any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "property",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "process",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "setStyleAttributePreprocessor"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!StyleSheetProperties:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StyleSheetProperties "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheet.d.ts",
          "releaseTag": "Public",
          "name": "StyleSheetProperties",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!StyleSheetProperties#flatten:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flatten<T extends "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ">(style: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatten"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!StyleSheetProperties#hairlineWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hairlineWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hairlineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SubmitBehavior:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SubmitBehavior = "
            },
            {
              "kind": "Content",
              "text": "'submit' | 'blurAndSubmit' | 'newline'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "SubmitBehavior",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SubscribableMixin:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface SubscribableMixin "
            }
          ],
          "fileUrlPath": "Libraries/Components/ScrollView/ScrollView.d.ts",
          "releaseTag": "Public",
          "name": "SubscribableMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!SubscribableMixin#addListenerOn:member(1)",
              "docComment": "/**\n * Special form of calling `addListener` that *guarantees* that a subscription *must* be tied to a component instance, and therefore will be cleaned up when the component is unmounted. It is impossible to create the subscription and pass it in - this method must be the one to create the subscription and therefore can guarantee it is retained in a way that will be cleaned up.\n *\n * @param eventEmitter - emitter to subscribe to.\n *\n * @param eventType - Type of event to listen to.\n *\n * @param listener - Function to invoke when event occurs.\n *\n * @param context - Object to use as listener context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListenerOn(\n    eventEmitter: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    eventType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    listener: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ",\n    context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventEmitter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "eventType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "addListenerOn"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!Switch:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class Switch extends "
            },
            {
              "kind": "Reference",
              "text": "SwitchBase",
              "canonicalReference": "react-native!SwitchBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Switch",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!SwitchBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SwitchBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> & typeof "
            },
            {
              "kind": "Reference",
              "text": "SwitchComponent",
              "canonicalReference": "react-native!SwitchComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SwitchBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SwitchChangeEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SwitchChangeEvent\n  extends "
            },
            {
              "kind": "Reference",
              "text": "NativeSyntheticEvent",
              "canonicalReference": "react-native!NativeSyntheticEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SwitchChangeEventData",
              "canonicalReference": "react-native!SwitchChangeEventData:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "name": "SwitchChangeEvent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SwitchChangeEventData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SwitchChangeEventData extends "
            },
            {
              "kind": "Reference",
              "text": "TargetedEvent",
              "canonicalReference": "react-native!TargetedEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "name": "SwitchChangeEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchChangeEventData#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!SwitchComponent:class",
          "docComment": "/**\n * Renders a boolean input.\n *\n * This is a controlled component that requires an `onValueChange` callback that updates the `value` prop in order for the component to reflect user actions. If the `value` prop is not updated, the component will continue to render the supplied `value` prop instead of the expected result of any user actions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SwitchComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SwitchProps",
              "canonicalReference": "react-native!SwitchProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SwitchComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SwitchProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use SwitchProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SwitchProperties = "
            },
            {
              "kind": "Reference",
              "text": "SwitchProps",
              "canonicalReference": "react-native!SwitchProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "SwitchProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!SwitchPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use SwitchPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SwitchPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "SwitchPropsIOS",
              "canonicalReference": "react-native!SwitchPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "SwitchPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SwitchProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SwitchProps extends "
            },
            {
              "kind": "Reference",
              "text": "SwitchPropsIOS",
              "canonicalReference": "react-native!SwitchPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "name": "SwitchProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#disabled:member",
              "docComment": "/**\n * If true the user won't be able to toggle the switch. Default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#ios_backgroundColor:member",
              "docComment": "/**\n * On iOS, custom color for the background. Can be seen when the switch value is false or when the switch is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ios_backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ios_backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#onChange:member",
              "docComment": "/**\n * Invoked with the change event as an argument when the value changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "SwitchChangeEvent",
                  "canonicalReference": "react-native!SwitchChangeEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void)\n    | null\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#onValueChange:member",
              "docComment": "/**\n * Invoked with the new value when the value changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onValueChange?: "
                },
                {
                  "kind": "Content",
                  "text": "((value: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void) | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onValueChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#thumbColor:member",
              "docComment": "/**\n * Color of the foreground switch grip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thumbColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "thumbColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#trackColor:member",
              "docComment": "/**\n * Custom colors for the switch track\n *\n * Color when false and color when true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trackColor?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| {\n        false?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined;\n        true?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined;\n      }\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "trackColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchProps#value:member",
              "docComment": "/**\n * The value of the switch. If true the switch will be turned on. Default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!SwitchPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SwitchPropsIOS extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Switch/Switch.d.ts",
          "releaseTag": "Public",
          "name": "SwitchPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchPropsIOS#onTintColor:member",
              "docComment": "/**\n * Background color when the switch is turned on.\n *\n * @deprecated\n *\n * use trackColor instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchPropsIOS#thumbTintColor:member",
              "docComment": "/**\n * Color of the foreground switch grip.\n *\n * @deprecated\n *\n * use thumbColor instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thumbTintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "thumbTintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!SwitchPropsIOS#tintColor:member",
              "docComment": "/**\n * Background color when the switch is turned off.\n *\n * @deprecated\n *\n * use trackColor instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tintColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tintColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!Systrace:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "types/index.d.ts",
          "releaseTag": "None",
          "name": "Systrace",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.beginAsyncEvent:function(1)",
              "docComment": "/**\n * Marks the start of a potentially asynchronous event. The end of this event should be marked calling the `endAsyncEvent` function with the cookie returned by this function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function beginAsyncEvent(eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "EventName",
                  "canonicalReference": "react-native!Systrace.EventName:type"
                },
                {
                  "kind": "Content",
                  "text": ", args?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventArgs",
                  "canonicalReference": "react-native!Systrace.EventArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "beginAsyncEvent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.beginEvent:function(1)",
              "docComment": "/**\n * Marks the start of a synchronous event that should end in the same stack frame. The end of this event should be marked using the `endEvent` function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function beginEvent(eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "EventName",
                  "canonicalReference": "react-native!Systrace.EventName:type"
                },
                {
                  "kind": "Content",
                  "text": ", args?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventArgs",
                  "canonicalReference": "react-native!Systrace.EventArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "beginEvent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.counterEvent:function(1)",
              "docComment": "/**\n * counterEvent registers the value to the eventName on the systrace timeline\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function counterEvent(eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "EventName",
                  "canonicalReference": "react-native!Systrace.EventName:type"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "counterEvent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.endAsyncEvent:function(1)",
              "docComment": "/**\n * Registers a new value for a counter event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function endAsyncEvent(\n  eventName: "
                },
                {
                  "kind": "Reference",
                  "text": "EventName",
                  "canonicalReference": "react-native!Systrace.EventName:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  cookie: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  args?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventArgs",
                  "canonicalReference": "react-native!Systrace.EventArgs:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "cookie",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "endAsyncEvent"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.endEvent:function(1)",
              "docComment": "/**\n * Marks the end of a synchronous event started in the same stack frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function endEvent(args?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventArgs",
                  "canonicalReference": "react-native!Systrace.EventArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "endEvent"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Systrace.EventArgs:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type EventArgs = "
                },
                {
                  "kind": "Content",
                  "text": "{[key: string]: string} | void | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "releaseTag": "Public",
              "name": "EventArgs",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "react-native!Systrace.EventName:type",
              "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type EventName = "
                },
                {
                  "kind": "Content",
                  "text": "string | (() => string)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "releaseTag": "Public",
              "name": "EventName",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.isEnabled:function(1)",
              "docComment": "/**\n * Indicates if the application is currently being traced.\n *\n * Calling methods on this module when the application isn't being traced is cheap, but this method can be used to avoid computing expensive values for those functions.\n *\n * @example\n *\n * if (Systrace.isEnabled()) { const expensiveArgs = computeExpensiveArgs(); Systrace.beginEvent('myEvent', expensiveArgs); }\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function isEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isEnabled"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!Systrace.setEnabled:function(1)",
              "docComment": "/**\n * @deprecated\n *\n * This function is now a no-op but it's left for backwards compatibility. `isEnabled` will now synchronously check if we're actively profiling or not. This is necessary because we don't have callbacks to know when profiling has started/stopped on Android APIs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function setEnabled(_doEnable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/Performance/Systrace.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_doEnable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setEnabled"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TargetedEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TargetedEvent "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "TargetedEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TargetedEvent#target:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Task:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Task = "
            },
            {
              "kind": "Content",
              "text": "(taskData: any) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "Task",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TaskCanceller:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TaskCanceller = "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "TaskCanceller",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TaskCancelProvider:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TaskCancelProvider = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "TaskCanceller",
              "canonicalReference": "react-native!TaskCanceller:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "TaskCancelProvider",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TaskProvider:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TaskProvider = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Task",
              "canonicalReference": "react-native!Task:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "TaskProvider",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!Text_2:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class Text extends "
            },
            {
              "kind": "Reference",
              "text": "TextBase",
              "canonicalReference": "react-native!TextBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Text_2",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TextBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> & typeof "
            },
            {
              "kind": "Reference",
              "text": "TextComponent",
              "canonicalReference": "react-native!TextComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TextBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TextComponent:class",
          "docComment": "/**\n * A React component for displaying text which supports nesting, styling, and touch handling.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class TextComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TextProps",
              "canonicalReference": "react-native!TextProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TextComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TextInput:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class TextInput extends "
            },
            {
              "kind": "Reference",
              "text": "TextInputBase",
              "canonicalReference": "react-native!TextInputBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TextInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "react-native!TextInput#clear:member",
              "docComment": "/**\n * Removes all text from the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!TextInput#isFocused:member",
              "docComment": "/**\n * Returns if the input is currently focused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFocused: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isFocused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!TextInput#setSelection:member",
              "docComment": "/**\n * Sets the start and end positions of text selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelection: "
                },
                {
                  "kind": "Content",
                  "text": "(start: number, end: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "react-native!TextInput.State:member",
              "docComment": "/**\n * Access the current focus state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static State: "
                },
                {
                  "kind": "Reference",
                  "text": "TextInputState",
                  "canonicalReference": "react-native!TextInputState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "State",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextInputAndroidProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextInputAndroidProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextInputAndroidProperties = "
            },
            {
              "kind": "Reference",
              "text": "TextInputAndroidProps",
              "canonicalReference": "react-native!TextInputAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextInputAndroidProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputAndroidProps:interface",
          "docComment": "/**\n * Android Specific properties for TextInput\n *\n * @see\n *\n * https://reactnative.dev/docs/textinput#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputAndroidProps "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputAndroidProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#cursorColor:member",
              "docComment": "/**\n * When provided it will set the color of the cursor (or \"caret\") in the component. Unlike the behavior of `selectionColor` the cursor color will be set independently from the color of the text selection box.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cursorColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cursorColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#disableFullscreenUI:member",
              "docComment": "/**\n * When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone), the OS may choose to have the user edit the text inside of a full screen text input mode. When true, this feature is disabled and users will always edit the text directly inside of the text input. Defaults to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableFullscreenUI?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableFullscreenUI",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#importantForAutofill:member",
              "docComment": "/**\n * Determines whether the individual fields in your app should be included in a view structure for autofill purposes on Android API Level 26+. Defaults to auto. To disable auto complete, use `off`.\n *\n * *Android Only*\n *\n * The following values work on Android only:\n *\n * - `auto` - let Android decide - `no` - not important for autofill - `noExcludeDescendants` - this view and its children aren't important for autofill - `yes` - is important for autofill - `yesExcludeDescendants` - this view is important for autofill but its children aren't\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "importantForAutofill?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "importantForAutofill",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#inlineImageLeft:member",
              "docComment": "/**\n * If defined, the provided image resource will be rendered on the left.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineImageLeft?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineImageLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#inlineImagePadding:member",
              "docComment": "/**\n * Padding between the inline image, if any, and the text input itself.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineImagePadding?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineImagePadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#numberOfLines:member",
              "docComment": "/**\n * Sets the number of lines for a TextInput. Use it with multiline set to true to be able to fill the lines.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numberOfLines?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "numberOfLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#returnKeyLabel:member",
              "docComment": "/**\n * Sets the return key to the label. Use it instead of `returnKeyType`.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnKeyLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "returnKeyLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#selectionHandleColor:member",
              "docComment": "/**\n * When provided it will set the color of the selection handles when highlighting text. Unlike the behavior of `selectionColor` the handle color will be set independently from the color of the text selection box.  @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionHandleColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectionHandleColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#showSoftInputOnFocus:member",
              "docComment": "/**\n * When false, it will prevent the soft keyboard from showing when the field is focused. The default value is true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showSoftInputOnFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showSoftInputOnFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#textAlignVertical:member",
              "docComment": "/**\n * Vertically align text when `multiline` is set to true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlignVertical?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'top' | 'bottom' | 'center' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlignVertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#textBreakStrategy:member",
              "docComment": "/**\n * Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced The default value is simple.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textBreakStrategy?: "
                },
                {
                  "kind": "Content",
                  "text": "'simple' | 'highQuality' | 'balanced' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textBreakStrategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#underlineColorAndroid:member",
              "docComment": "/**\n * The color of the textInput underline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "underlineColorAndroid?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "underlineColorAndroid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputAndroidProps#verticalAlign:member",
              "docComment": "/**\n * Vertically align text when `multiline` is set to true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalAlign?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'top' | 'bottom' | 'middle' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "verticalAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TextInputBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextInputBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TimerMixin",
              "canonicalReference": "react-native!~TimerMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "TextInputComponent",
              "canonicalReference": "react-native!TextInputComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TextInputBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputChangeEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onChange\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputChangeEventData extends "
            },
            {
              "kind": "Reference",
              "text": "TargetedEvent",
              "canonicalReference": "react-native!TargetedEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputChangeEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputChangeEventData#eventCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputChangeEventData#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TextInputComponent:class",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/textinput#methods\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class TextInputComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TextInputProps",
              "canonicalReference": "react-native!TextInputProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TextInputComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputContentSizeChangeEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onContentSizeChange\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputContentSizeChangeEventData "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputContentSizeChangeEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputContentSizeChangeEventData#contentSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentSize: "
                },
                {
                  "kind": "Content",
                  "text": "{width: number; height: number}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputEndEditingEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onEndEditing\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputEndEditingEventData "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputEndEditingEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputEndEditingEventData#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputFocusEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onFocus\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputFocusEventData extends "
            },
            {
              "kind": "Reference",
              "text": "TargetedEvent",
              "canonicalReference": "react-native!TargetedEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputFocusEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputFocusEventData#eventCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputFocusEventData#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextInputIOSProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextInputIOSProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextInputIOSProperties = "
            },
            {
              "kind": "Reference",
              "text": "TextInputIOSProps",
              "canonicalReference": "react-native!TextInputIOSProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextInputIOSProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputIOSProps:interface",
          "docComment": "/**\n * IOS Specific properties for TextInput\n *\n * @see\n *\n * https://reactnative.dev/docs/textinput#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputIOSProps "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputIOSProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#clearButtonMode:member",
              "docComment": "/**\n * enum('never', 'while-editing', 'unless-editing', 'always') When the clear button should appear on the right side of the text view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearButtonMode?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'never'\n    | 'while-editing'\n    | 'unless-editing'\n    | 'always'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clearButtonMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#clearTextOnFocus:member",
              "docComment": "/**\n * If true, clears the text field automatically when editing begins\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTextOnFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clearTextOnFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#dataDetectorTypes:member",
              "docComment": "/**\n * Determines the types of data converted to clickable URLs in the text input. Only valid if `multiline={true}` and `editable={false}`. By default no data types are detected.\n *\n * You can provide one type or an array of many types.\n *\n * Possible values for `dataDetectorTypes` are:\n *\n * - `'phoneNumber'` - `'link'` - `'address'` - `'calendarEvent'` - `'none'` - `'all'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataDetectorTypes?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataDetectorTypes",
                  "canonicalReference": "react-native!DataDetectorTypes:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DataDetectorTypes",
                  "canonicalReference": "react-native!DataDetectorTypes:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dataDetectorTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#enablesReturnKeyAutomatically:member",
              "docComment": "/**\n * If true, the keyboard disables the return key when there is no text and automatically enables it when there is text. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enablesReturnKeyAutomatically?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enablesReturnKeyAutomatically",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#keyboardAppearance:member",
              "docComment": "/**\n * Determines the color of the keyboard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardAppearance?: "
                },
                {
                  "kind": "Content",
                  "text": "'default' | 'light' | 'dark' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardAppearance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#lineBreakStrategyIOS:member",
              "docComment": "/**\n * Set line break strategy on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineBreakStrategyIOS?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'none'\n    | 'standard'\n    | 'hangul-word'\n    | 'push-out'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineBreakStrategyIOS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#passwordRules:member",
              "docComment": "/**\n * Provide rules for your password. For example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters. \"required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "passwordRules?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "passwordRules",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#rejectResponderTermination:member",
              "docComment": "/**\n * If `true`, allows TextInput to pass touch events to the parent component. This allows components to be swipeable from the TextInput on iOS, as is the case on Android by default. If `false`, TextInput always asks to handle the input (except when disabled).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejectResponderTermination?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rejectResponderTermination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#scrollEnabled:member",
              "docComment": "/**\n * If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scrollEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#selectionState:member",
              "docComment": "/**\n * See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionState?: "
                },
                {
                  "kind": "Reference",
                  "text": "DocumentSelectionState",
                  "canonicalReference": "react-native!DocumentSelectionState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectionState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#smartInsertDelete:member",
              "docComment": "/**\n * If `false`, the iOS system will not insert an extra space after a paste operation neither delete one or two spaces after a cut or delete operation.\n *\n * The default value is `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "smartInsertDelete?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "smartInsertDelete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#spellCheck:member",
              "docComment": "/**\n * If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spellCheck?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "spellCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputIOSProps#textContentType:member",
              "docComment": "/**\n * Give the keyboard and the system information about the expected semantic meaning for the content that users enter.\n *\n * To disable autofill, set textContentType to `none`.\n *\n * Possible values for `textContentType` are:\n *\n * - `'none'` - `'URL'` - `'addressCity'` - `'addressCityAndState'` - `'addressState'` - `'countryName'` - `'creditCardNumber'` - `'creditCardExpiration'` (iOS 17+) - `'creditCardExpirationMonth'` (iOS 17+) - `'creditCardExpirationYear'` (iOS 17+) - `'creditCardSecurityCode'` (iOS 17+) - `'creditCardType'` (iOS 17+) - `'creditCardName'` (iOS 17+) - `'creditCardGivenName'` (iOS 17+) - `'creditCardMiddleName'` (iOS 17+) - `'creditCardFamilyName'` (iOS 17+) - `'emailAddress'` - `'familyName'` - `'fullStreetAddress'` - `'givenName'` - `'jobTitle'` - `'location'` - `'middleName'` - `'name'` - `'namePrefix'` - `'nameSuffix'` - `'nickname'` - `'organizationName'` - `'postalCode'` - `'streetAddressLine1'` - `'streetAddressLine2'` - `'sublocality'` - `'telephoneNumber'` - `'username'` - `'password'` - `'newPassword'` - `'oneTimeCode'` - `'birthdate'` (iOS 17+) - `'birthdateDay'` (iOS 17+) - `'birthdateMonth'` (iOS 17+) - `'birthdateYear'` (iOS 17+)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentType?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'creditCardExpiration'\n    | 'creditCardExpirationMonth'\n    | 'creditCardExpirationYear'\n    | 'creditCardSecurityCode'\n    | 'creditCardType'\n    | 'creditCardName'\n    | 'creditCardGivenName'\n    | 'creditCardMiddleName'\n    | 'creditCardFamilyName'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n    | 'newPassword'\n    | 'oneTimeCode'\n    | 'birthdate'\n    | 'birthdateDay'\n    | 'birthdateMonth'\n    | 'birthdateYear'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textContentType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputKeyPressEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onKeyPress\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputKeyPressEventData "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputKeyPressEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputKeyPressEventData#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextInputProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextInputProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextInputProperties = "
            },
            {
              "kind": "Reference",
              "text": "TextInputProps",
              "canonicalReference": "react-native!TextInputProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextInputProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/textinput#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TextInputIOSProps",
              "canonicalReference": "react-native!TextInputIOSProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TextInputAndroidProps",
              "canonicalReference": "react-native!TextInputAndroidProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#allowFontScaling:member",
              "docComment": "/**\n * Specifies whether fonts should scale to respect Text Size accessibility settings. The default is `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowFontScaling?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowFontScaling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#autoCapitalize:member",
              "docComment": "/**\n * Can tell TextInput to automatically capitalize certain characters. characters: all characters, words: first letter of each word sentences: first letter of each sentence (default) none: don't auto capitalize anything\n *\n * https://reactnative.dev/docs/textinput#autocapitalize\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoCapitalize?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'sentences' | 'words' | 'characters' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoCapitalize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#autoComplete:member",
              "docComment": "/**\n * Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content. To disable autocomplete, set autoComplete to off.\n *\n * The following values work across platforms:\n *\n * - `additional-name` - `address-line1` - `address-line2` - `cc-number` - `country` - `current-password` - `email` - `family-name` - `given-name` - `honorific-prefix` - `honorific-suffix` - `name` - `new-password` - `off` - `one-time-code` - `postal-code` - `street-address` - `tel` - `username`\n *\n * The following values work on iOS only:\n *\n * - `nickname` - `organization` - `organization-title` - `url`\n *\n * The following values work on Android only:\n *\n * - `birthdate-day` - `birthdate-full` - `birthdate-month` - `birthdate-year` - `cc-csc` - `cc-exp` - `cc-exp-day` - `cc-exp-month` - `cc-exp-year` - `gender` - `name-family` - `name-given` - `name-middle` - `name-middle-initial` - `name-prefix` - `name-suffix` - `password` - `password-new` - `postal-address` - `postal-address-country` - `postal-address-extended` - `postal-address-extended-postal-code` - `postal-address-locality` - `postal-address-region` - `sms-otp` - `tel-country-code` - `tel-national` - `tel-device` - `username-new`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoComplete?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'additional-name'\n    | 'address-line1'\n    | 'address-line2'\n    | 'birthdate-day'\n    | 'birthdate-full'\n    | 'birthdate-month'\n    | 'birthdate-year'\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-day'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'cc-name'\n    | 'cc-given-name'\n    | 'cc-middle-name'\n    | 'cc-family-name'\n    | 'cc-type'\n    | 'country'\n    | 'current-password'\n    | 'email'\n    | 'family-name'\n    | 'gender'\n    | 'given-name'\n    | 'honorific-prefix'\n    | 'honorific-suffix'\n    | 'name'\n    | 'name-family'\n    | 'name-given'\n    | 'name-middle'\n    | 'name-middle-initial'\n    | 'name-prefix'\n    | 'name-suffix'\n    | 'new-password'\n    | 'nickname'\n    | 'one-time-code'\n    | 'organization'\n    | 'organization-title'\n    | 'password'\n    | 'password-new'\n    | 'postal-address'\n    | 'postal-address-country'\n    | 'postal-address-extended'\n    | 'postal-address-extended-postal-code'\n    | 'postal-address-locality'\n    | 'postal-address-region'\n    | 'postal-code'\n    | 'street-address'\n    | 'sms-otp'\n    | 'tel'\n    | 'tel-country-code'\n    | 'tel-national'\n    | 'tel-device'\n    | 'url'\n    | 'username'\n    | 'username-new'\n    | 'off'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoComplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#autoCorrect:member",
              "docComment": "/**\n * If false, disables auto-correct. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoCorrect?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoCorrect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#autoFocus:member",
              "docComment": "/**\n * If true, focuses the input on componentDidMount. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#blurOnSubmit:member",
              "docComment": "/**\n * If `true`, the text field will blur when submitted. The default value is true for single-line fields and false for multiline fields. Note that for multiline fields, setting `blurOnSubmit` to `true` means that pressing return will blur the field and trigger the `onSubmitEditing` event instead of inserting a newline into the field.\n *\n * @deprecated\n *\n * Note that `submitBehavior` now takes the place of `blurOnSubmit` and will override any behavior defined by `blurOnSubmit`.\n *\n * @see\n *\n * submitBehavior\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blurOnSubmit?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "blurOnSubmit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#caretHidden:member",
              "docComment": "/**\n * If true, caret is hidden. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caretHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "caretHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#contextMenuHidden:member",
              "docComment": "/**\n * If true, context menu is hidden. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contextMenuHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contextMenuHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#defaultValue:member",
              "docComment": "/**\n * Provides an initial value that will change when the user starts typing. Useful for simple use-cases where you don't want to deal with listening to events and updating the value prop to keep the controlled state in sync.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "defaultValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#editable:member",
              "docComment": "/**\n * If false, text is not editable. The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "editable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#enterKeyHint:member",
              "docComment": "/**\n * Determines what text should be shown to the return key on virtual keyboards. Has precedence over the returnKeyType prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enterKeyHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "EnterKeyHintTypeOptions",
                  "canonicalReference": "react-native!EnterKeyHintTypeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enterKeyHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#inputAccessoryViewID:member",
              "docComment": "/**\n * Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and code. See https://reactnative.dev/docs/inputaccessoryview for more information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputAccessoryViewID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputAccessoryViewID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#inputMode:member",
              "docComment": "/**\n * Works like the inputmode attribute in HTML, it determines which keyboard to open, e.g. numeric and has precedence over keyboardType.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "InputModeOptions",
                  "canonicalReference": "react-native!InputModeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#keyboardType:member",
              "docComment": "/**\n * enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password') Determines which keyboard to open, e.g.numeric. The following values work across platforms: - default - numeric - email-address - phone-pad The following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search The following values work on Android: - visible-password\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardType?: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardTypeOptions",
                  "canonicalReference": "react-native!KeyboardTypeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyboardType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#maxFontSizeMultiplier:member",
              "docComment": "/**\n * Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values: - null/undefined (default): inherit from the parent node or the global default (0) - 0: no max, ignore parent/global default - >= 1: sets the maxFontSizeMultiplier of this node to this value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxFontSizeMultiplier?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxFontSizeMultiplier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#maxLength:member",
              "docComment": "/**\n * Limits the maximum number of characters that can be entered. Use this instead of implementing the logic in JS to avoid flicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#multiline:member",
              "docComment": "/**\n * If true, the text input can be multiple lines. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onBlur:member",
              "docComment": "/**\n * Callback that is called when the text input is blurred\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputFocusEventData",
                  "canonicalReference": "react-native!TextInputFocusEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onChange:member",
              "docComment": "/**\n * Callback that is called when the text input's text changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputChangeEventData",
                  "canonicalReference": "react-native!TextInputChangeEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onChangeText:member",
              "docComment": "/**\n * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChangeText?: "
                },
                {
                  "kind": "Content",
                  "text": "((text: string) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onChangeText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onContentSizeChange:member",
              "docComment": "/**\n * Callback that is called when the text input's content size changes. This will be called with `{ nativeEvent: { contentSize: { width, height } } }`.\n *\n * Only called for multiline text inputs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onContentSizeChange?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputContentSizeChangeEventData",
                  "canonicalReference": "react-native!TextInputContentSizeChangeEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onContentSizeChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onEndEditing:member",
              "docComment": "/**\n * Callback that is called when text input ends.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEndEditing?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputEndEditingEventData",
                  "canonicalReference": "react-native!TextInputEndEditingEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onEndEditing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onFocus:member",
              "docComment": "/**\n * Callback that is called when the text input is focused\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputFocusEventData",
                  "canonicalReference": "react-native!TextInputFocusEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onKeyPress:member",
              "docComment": "/**\n * Callback that is called when a key is pressed. This will be called with `{ nativeEvent: { key: keyValue } }` where keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\n *\n * Fires before onChange callbacks. Note: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onKeyPress?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputKeyPressEventData",
                  "canonicalReference": "react-native!TextInputKeyPressEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onKeyPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onPress:member",
              "docComment": "/**\n * Called when a single tap gesture is detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeTouchEvent",
                  "canonicalReference": "react-native!NativeTouchEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onPressIn:member",
              "docComment": "/**\n * Callback that is called when a touch is engaged.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressIn?: "
                },
                {
                  "kind": "Content",
                  "text": "((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeTouchEvent",
                  "canonicalReference": "react-native!NativeTouchEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onPressOut:member",
              "docComment": "/**\n * Callback that is called when a touch is released.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressOut?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NativeTouchEvent",
                  "canonicalReference": "react-native!NativeTouchEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onScroll:member",
              "docComment": "/**\n * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n *\n * May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScroll?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputScrollEventData",
                  "canonicalReference": "react-native!TextInputScrollEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onSelectionChange:member",
              "docComment": "/**\n * Callback that is called when the text input selection is changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectionChange?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputSelectionChangeEventData",
                  "canonicalReference": "react-native!TextInputSelectionChangeEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectionChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#onSubmitEditing:member",
              "docComment": "/**\n * Callback that is called when the text input's submit button is pressed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSubmitEditing?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextInputSubmitEditingEventData",
                  "canonicalReference": "react-native!TextInputSubmitEditingEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSubmitEditing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#placeholder:member",
              "docComment": "/**\n * The string that will be rendered before text input has been entered\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholder?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#placeholderTextColor:member",
              "docComment": "/**\n * The text color of the placeholder string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholderTextColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "placeholderTextColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#readOnly:member",
              "docComment": "/**\n * If `true`, text is not editable. The default value is `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#returnKeyType:member",
              "docComment": "/**\n * enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call') Determines how the return key should look.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnKeyType?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReturnKeyTypeOptions",
                  "canonicalReference": "react-native!ReturnKeyTypeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "returnKeyType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#secureTextEntry:member",
              "docComment": "/**\n * If true, the text input obscures the text entered so that sensitive text like passwords stay secure. The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secureTextEntry?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "secureTextEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#selection:member",
              "docComment": "/**\n * The start and end of the text input's selection. Set start and end to the same value to position the cursor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection?: "
                },
                {
                  "kind": "Content",
                  "text": "{start: number; end?: number | undefined} | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#selectionColor:member",
              "docComment": "/**\n * The highlight (and cursor on ios) color of the text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectionColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#selectTextOnFocus:member",
              "docComment": "/**\n * If true, all text will automatically be selected on focus\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectTextOnFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectTextOnFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#style:member",
              "docComment": "/**\n * Styles\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextStyle",
                  "canonicalReference": "react-native!TextStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#submitBehavior:member",
              "docComment": "/**\n * When the return key is pressed,\n *\n * For single line inputs:\n *\n * - `'newline`' defaults to `'blurAndSubmit'` - `undefined` defaults to `'blurAndSubmit'`\n *\n * For multiline inputs:\n *\n * - `'newline'` adds a newline - `undefined` defaults to `'newline'`\n *\n * For both single line and multiline inputs:\n *\n * - `'submit'` will only send a submit event and not blur the input - `'blurAndSubmit`' will both blur the input and send a submit event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "submitBehavior?: "
                },
                {
                  "kind": "Reference",
                  "text": "SubmitBehavior",
                  "canonicalReference": "react-native!SubmitBehavior:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "submitBehavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#textAlign:member",
              "docComment": "/**\n * Align the input text to the left, center, or right sides of the input field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlign?: "
                },
                {
                  "kind": "Content",
                  "text": "'left' | 'center' | 'right' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputProps#value:member",
              "docComment": "/**\n * The value to show for the text input. TextInput is a controlled component, which means the native value will be forced to match this value prop if provided. For most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same. In addition to simply setting the same value, either set editable={false}, or set/update maxLength to prevent unwanted edits without flicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            },
            {
              "startIndex": 7,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputScrollEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onScroll\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputScrollEventData "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputScrollEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputScrollEventData#contentOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentOffset: "
                },
                {
                  "kind": "Content",
                  "text": "{x: number; y: number}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputSelectionChangeEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onSelectionChange\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputSelectionChangeEventData extends "
            },
            {
              "kind": "Reference",
              "text": "TargetedEvent",
              "canonicalReference": "react-native!TargetedEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputSelectionChangeEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputSelectionChangeEventData#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    start: number;\n    end: number;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputState:interface",
          "docComment": "/**\n * This class is responsible for coordinating the \"focused\" state for TextInputs. All calls relating to the keyboard should be funneled through here\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TextInputState "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TextInputState#blurTextInput:member(1)",
              "docComment": "/**\n * @param textField - ref of the text field to focus Unfocuses the specified text field noop if it wasn't focused\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blurTextInput(textField?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textField",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "blurTextInput"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TextInputState#currentlyFocusedField:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Use currentlyFocusedInput Returns the ID of the currently focused text field, if one exists If no text field is focused it returns null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentlyFocusedField(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "currentlyFocusedField"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TextInputState#currentlyFocusedInput:member(1)",
              "docComment": "/**\n * Returns the ref of the currently focused text field, if one exists If no text field is focused it returns null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentlyFocusedInput(): "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "currentlyFocusedInput"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TextInputState#focusTextInput:member(1)",
              "docComment": "/**\n * @param textField - ref of the text field to focus Focuses the specified text field noop if the text field was already focused\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTextInput(textField?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementRef",
                  "canonicalReference": "@types/react!React.ElementRef:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HostComponent",
                  "canonicalReference": "react-native!HostComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textField",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "focusTextInput"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextInputSubmitEditingEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextInputProps.onSubmitEditing\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextInputSubmitEditingEventData "
            }
          ],
          "fileUrlPath": "Libraries/Components/TextInput/TextInput.d.ts",
          "releaseTag": "Public",
          "name": "TextInputSubmitEditingEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextInputSubmitEditingEventData#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextLayoutEventData:interface",
          "docComment": "/**\n * @see\n *\n * TextProps.onTextLayout\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextLayoutEventData extends "
            },
            {
              "kind": "Reference",
              "text": "TargetedEvent",
              "canonicalReference": "react-native!TargetedEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "TextLayoutEventData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutEventData#lines:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lines: "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutLine",
                  "canonicalReference": "react-native!TextLayoutLine:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextLayoutLine:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TextLayoutLine "
            }
          ],
          "fileUrlPath": "Libraries/Types/CoreEventTypes.d.ts",
          "releaseTag": "Public",
          "name": "TextLayoutLine",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#ascender:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ascender: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ascender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#capHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "capHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "capHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#descender:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descender: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "descender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#xHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "xHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextLayoutLine#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextProperties = "
            },
            {
              "kind": "Reference",
              "text": "TextProps",
              "canonicalReference": "react-native!TextProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "TextPropsAndroid",
              "canonicalReference": "react-native!TextPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TextPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TextPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TextPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "TextPropsIOS",
              "canonicalReference": "react-native!TextPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TextPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "TextPropsIOS",
              "canonicalReference": "react-native!TextPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TextPropsAndroid",
              "canonicalReference": "react-native!TextPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "releaseTag": "Public",
          "name": "TextProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#allowFontScaling:member",
              "docComment": "/**\n * Specifies whether fonts should scale to respect Text Size accessibility settings. The default is `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowFontScaling?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowFontScaling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#ellipsizeMode:member",
              "docComment": "/**\n * This can be one of the following values:\n *\n * - `head` - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\" - `middle` - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\" - `tail` - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\" - `clip` - Lines are not drawn past the edge of the text container.\n *\n * The default is `tail`.\n *\n * `numberOfLines` must be set in conjunction with this prop.\n *\n * > `clip` is working only for iOS\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ellipsizeMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'head' | 'middle' | 'tail' | 'clip' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ellipsizeMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#id:member",
              "docComment": "/**\n * Used to reference react managed views from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#lineBreakMode:member",
              "docComment": "/**\n * Line Break mode. Works only with numberOfLines. clip is working only for iOS\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineBreakMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'head' | 'middle' | 'tail' | 'clip' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineBreakMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#maxFontSizeMultiplier:member",
              "docComment": "/**\n * Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values: - null/undefined (default): inherit from the parent node or the global default (0) - 0: no max, ignore parent/global default - >= 1: sets the maxFontSizeMultiplier of this node to this value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxFontSizeMultiplier?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxFontSizeMultiplier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#minimumFontScale:member",
              "docComment": "/**\n * Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumFontScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minimumFontScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#nativeID:member",
              "docComment": "/**\n * Used to reference react managed views from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nativeID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nativeID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#numberOfLines:member",
              "docComment": "/**\n * Used to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.\n *\n * This prop is commonly used with `ellipsizeMode`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numberOfLines?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "numberOfLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onLayout:member",
              "docComment": "/**\n * Invoked on mount and layout changes with\n *\n * {nativeEvent: { layout: {x, y, width, height}}}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayout?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutChangeEvent",
                  "canonicalReference": "react-native!LayoutChangeEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onLongPress:member",
              "docComment": "/**\n * This function is called on long press. e.g., `onLongPress={this.increaseSize}>``\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLongPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLongPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onPress:member",
              "docComment": "/**\n * This function is called on press. Text intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onPressIn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressIn?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onPressOut:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressOut?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#onTextLayout:member",
              "docComment": "/**\n * Invoked on Text layout\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTextLayout?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((event: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutEventData",
                  "canonicalReference": "react-native!TextLayoutEventData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTextLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#style:member",
              "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/text#style\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextStyle",
                  "canonicalReference": "react-native!TextStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "releaseTag": "Public",
          "name": "TextPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#android_hyphenationFrequency:member",
              "docComment": "/**\n * Hyphenation strategy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "android_hyphenationFrequency?: "
                },
                {
                  "kind": "Content",
                  "text": "'normal' | 'none' | 'full' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "android_hyphenationFrequency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#dataDetectorType:member",
              "docComment": "/**\n * Determines the types of data converted to clickable URLs in the text element. By default no data types are detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataDetectorType?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| null\n    | 'phoneNumber'\n    | 'link'\n    | 'email'\n    | 'none'\n    | 'all'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dataDetectorType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#disabled:member",
              "docComment": "/**\n * Specifies the disabled state of the text view for testing purposes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#selectable:member",
              "docComment": "/**\n * Lets the user select text, to use the native copy and paste functionality.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#selectionColor:member",
              "docComment": "/**\n * The highlight color of the text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectionColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsAndroid#textBreakStrategy:member",
              "docComment": "/**\n * Set text break strategy on Android API Level 23+ default is `highQuality`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textBreakStrategy?: "
                },
                {
                  "kind": "Content",
                  "text": "'simple' | 'highQuality' | 'balanced' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textBreakStrategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Text/Text.d.ts",
          "releaseTag": "Public",
          "name": "TextPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsIOS#adjustsFontSizeToFit:member",
              "docComment": "/**\n * Specifies whether font should be scaled down automatically to fit given style constraints.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjustsFontSizeToFit?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "adjustsFontSizeToFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsIOS#dynamicTypeRamp:member",
              "docComment": "/**\n * The Dynamic Type scale ramp to apply to this element on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dynamicTypeRamp?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'caption2'\n    | 'caption1'\n    | 'footnote'\n    | 'subheadline'\n    | 'callout'\n    | 'body'\n    | 'headline'\n    | 'title3'\n    | 'title2'\n    | 'title1'\n    | 'largeTitle'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dynamicTypeRamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsIOS#lineBreakStrategyIOS:member",
              "docComment": "/**\n * Set line break strategy on iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineBreakStrategyIOS?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'none'\n    | 'standard'\n    | 'hangul-word'\n    | 'push-out'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineBreakStrategyIOS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextPropsIOS#suppressHighlighting:member",
              "docComment": "/**\n * When `true`, no visual change is made when text is pressed down. By default, a gray oval highlights the text on press down.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suppressHighlighting?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "suppressHighlighting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextStyle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextStyle extends "
            },
            {
              "kind": "Reference",
              "text": "TextStyleIOS",
              "canonicalReference": "react-native!TextStyleIOS:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TextStyleAndroid",
              "canonicalReference": "react-native!TextStyleAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ViewStyle",
              "canonicalReference": "react-native!~ViewStyle:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TextStyle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#fontFamily:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontFamily?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontFamily",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#fontSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#fontStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'normal' | 'italic' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#fontWeight:member",
              "docComment": "/**\n * Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the closest one is chosen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontWeight?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'normal'\n    | 'bold'\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 100\n    | 200\n    | 300\n    | 400\n    | 500\n    | 600\n    | 700\n    | 800\n    | 900\n    | 'ultralight'\n    | 'thin'\n    | 'light'\n    | 'medium'\n    | 'regular'\n    | 'semibold'\n    | 'condensedBold'\n    | 'condensed'\n    | 'heavy'\n    | 'black'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontWeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#letterSpacing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "letterSpacing?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "letterSpacing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#lineHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textAlign:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlign?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'left' | 'right' | 'center' | 'justify' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textDecorationColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDecorationColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDecorationColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textDecorationLine:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDecorationLine?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| 'none'\n    | 'underline'\n    | 'line-through'\n    | 'underline line-through'\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDecorationLine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textDecorationStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDecorationStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'solid' | 'double' | 'dotted' | 'dashed' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDecorationStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textShadowColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textShadowColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textShadowColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textShadowOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textShadowOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "{width: number; height: number} | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textShadowOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textShadowRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textShadowRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textShadowRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#textTransform:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textTransform?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'capitalize' | 'uppercase' | 'lowercase' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textTransform",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyle#userSelect:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userSelect?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'none' | 'text' | 'contain' | 'all' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userSelect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextStyleAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextStyleAndroid extends "
            },
            {
              "kind": "Reference",
              "text": "ViewStyle",
              "canonicalReference": "react-native!~ViewStyle:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TextStyleAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleAndroid#includeFontPadding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includeFontPadding?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "includeFontPadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleAndroid#textAlignVertical:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAlignVertical?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'top' | 'bottom' | 'center' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textAlignVertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleAndroid#verticalAlign:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalAlign?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'top' | 'bottom' | 'middle' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "verticalAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TextStyleIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextStyleIOS extends "
            },
            {
              "kind": "Reference",
              "text": "ViewStyle",
              "canonicalReference": "react-native!~ViewStyle:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TextStyleIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleIOS#fontVariant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontVariant?: "
                },
                {
                  "kind": "Reference",
                  "text": "FontVariant",
                  "canonicalReference": "react-native!FontVariant:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fontVariant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleIOS#textDecorationColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDecorationColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDecorationColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleIOS#textDecorationStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDecorationStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'solid' | 'double' | 'dotted' | 'dashed' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDecorationStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TextStyleIOS#writingDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writingDirection?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'ltr' | 'rtl' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "writingDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ThemeAttributeBackgroundPropType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ThemeAttributeBackgroundPropType extends "
            },
            {
              "kind": "Reference",
              "text": "BaseBackgroundPropType",
              "canonicalReference": "react-native!BaseBackgroundPropType:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "name": "ThemeAttributeBackgroundPropType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ThemeAttributeBackgroundPropType#attribute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attribute: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attribute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ThemeAttributeBackgroundPropType#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'ThemeAttrAndroid'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!~TimerMixin:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TimerMixin "
            }
          ],
          "fileUrlPath": "types/private/TimerMixin.d.ts",
          "releaseTag": "Public",
          "name": "TimerMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#cancelAnimationFrame:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancelAnimationFrame: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "cancelAnimationFrame",
                  "canonicalReference": "!cancelAnimationFrame:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cancelAnimationFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#clearImmediate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearImmediate: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "clearImmediate",
                  "canonicalReference": "!clearImmediate:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clearImmediate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#clearInterval:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearInterval: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "clearInterval",
                  "canonicalReference": "!clearInterval:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clearInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#clearTimeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "clearTimeout",
                  "canonicalReference": "!clearTimeout:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clearTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#requestAnimationFrame:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestAnimationFrame: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "requestAnimationFrame",
                  "canonicalReference": "!requestAnimationFrame:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestAnimationFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#setImmediate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setImmediate: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "setImmediate",
                  "canonicalReference": "!setImmediate:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setImmediate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#setInterval:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInterval: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "setInterval",
                  "canonicalReference": "!setInterval:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!~TimerMixin#setTimeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "setTimeout",
                  "canonicalReference": "!setTimeout:function"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!~Timespan:type",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Timespan = "
            },
            {
              "kind": "Content",
              "text": "{\n  startTime: number;\n  endTime?: number | undefined;\n  totalTime?: number | undefined;\n  startExtras?: "
            },
            {
              "kind": "Reference",
              "text": "Extras",
              "canonicalReference": "react-native!~Extras:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  endExtras?: "
            },
            {
              "kind": "Reference",
              "text": "Extras",
              "canonicalReference": "react-native!~Extras:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/IPerformanceLogger.d.ts",
          "releaseTag": "Public",
          "name": "Timespan",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ToastAndroid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ToastAndroid = "
            },
            {
              "kind": "Reference",
              "text": "ToastAndroidStatic",
              "canonicalReference": "react-native!ToastAndroidStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Components/ToastAndroid/ToastAndroid.d.ts",
          "releaseTag": "Public",
          "name": "ToastAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ToastAndroid:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToastAndroid: "
            },
            {
              "kind": "Reference",
              "text": "ToastAndroidStatic",
              "canonicalReference": "react-native!ToastAndroidStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Components/ToastAndroid/ToastAndroid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ToastAndroid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ToastAndroidStatic:interface",
          "docComment": "/**\n * This exposes the native ToastAndroid module as a JS module. This has a function 'show' which takes the following parameters:\n *\n * 1. String message: A string with the text to toast 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG\n *\n * There is also a function `showWithGravity` to specify the layout gravity. May be ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ToastAndroidStatic "
            }
          ],
          "fileUrlPath": "Libraries/Components/ToastAndroid/ToastAndroid.d.ts",
          "releaseTag": "Public",
          "name": "ToastAndroidStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ToastAndroidStatic#BOTTOM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BOTTOM: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "BOTTOM",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ToastAndroidStatic#CENTER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CENTER: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CENTER",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ToastAndroidStatic#LONG:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LONG: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "LONG",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ToastAndroidStatic#SHORT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SHORT: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "SHORT",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ToastAndroidStatic#show:member(1)",
              "docComment": "/**\n * String message: A string with the text to toast int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "show(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "duration",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "show"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ToastAndroidStatic#showWithGravity:member(1)",
              "docComment": "/**\n * `gravity` may be ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showWithGravity(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", gravity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "duration",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gravity",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "showWithGravity"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!ToastAndroidStatic#showWithGravityAndOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showWithGravityAndOffset(\n    message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ",\n    duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    gravity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    xOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    yOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "duration",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "gravity",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "xOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "yOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "showWithGravityAndOffset"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ToastAndroidStatic#TOP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TOP: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "TOP",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!Touchable:interface",
          "docComment": "/**\n * //FIXME: need to find documentation on which component is a TTouchable and can implement that interface\n *\n * @see\n *\n * React.DOMAttributes\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Touchable "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/Touchable.d.ts",
          "releaseTag": "Public",
          "name": "Touchable",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Touchable#onTouchCancel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTouchCancel?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTouchCancel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Touchable#onTouchEnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTouchEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTouchEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Touchable#onTouchEndCapture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTouchEndCapture?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTouchEndCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Touchable#onTouchMove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTouchMove?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTouchMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!Touchable#onTouchStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTouchStart?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTouchStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Touchable:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Touchable: "
            },
            {
              "kind": "Content",
              "text": "{\n  TOUCH_TARGET_DEBUG: boolean;\n  renderDebugView: (config: {\n    color: string | number;\n    hitSlop?: "
            },
            {
              "kind": "Reference",
              "text": "Insets",
              "canonicalReference": "react-native!Insets:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n  }) => "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/Touchable.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Touchable",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TouchableHighlight:var",
          "docComment": "/**\n * A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, which allows the underlay color to show through, darkening or tinting the view. The underlay comes from adding a view to the view hierarchy, which can sometimes cause unwanted visual artifacts if not used correctly, for example if the backgroundColor of the wrapped view isn't explicitly set to an opaque color.\n *\n * NOTE: TouchableHighlight supports only one child If you wish to have several child components, wrap them in a View.\n *\n * @see\n *\n * https://reactnative.dev/docs/touchablehighlight\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TouchableHighlight: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardRefExoticComponent",
              "canonicalReference": "@types/react!React.ForwardRefExoticComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\n  "
            },
            {
              "kind": "Reference",
              "text": "React.PropsWithoutRef",
              "canonicalReference": "@types/react!React.PropsWithoutRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableHighlightProps",
              "canonicalReference": "react-native!TouchableHighlightProps:interface"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "View",
              "canonicalReference": "react-native!View:class"
            },
            {
              "kind": "Content",
              "text": ">\n>"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableHighlight.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TouchableHighlight",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TouchableHighlightProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TouchableHighlightProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TouchableHighlightProperties = "
            },
            {
              "kind": "Reference",
              "text": "TouchableHighlightProps",
              "canonicalReference": "react-native!TouchableHighlightProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TouchableHighlightProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableHighlightProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/touchablehighlight#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableHighlightProps extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackProps",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableHighlight.d.ts",
          "releaseTag": "Public",
          "name": "TouchableHighlightProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableHighlightProps#activeOpacity:member",
              "docComment": "/**\n * Determines what the opacity of the wrapped view should be when touch is active.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeOpacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "activeOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableHighlightProps#onHideUnderlay:member",
              "docComment": "/**\n * Called immediately after the underlay is hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHideUnderlay?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onHideUnderlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableHighlightProps#onShowUnderlay:member",
              "docComment": "/**\n * Called immediately after the underlay is shown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onShowUnderlay?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onShowUnderlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableHighlightProps#style:member",
              "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/view#style\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableHighlightProps#underlayColor:member",
              "docComment": "/**\n * The color of the underlay that will show through when the touch is active.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "underlayColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "underlayColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableMixin:interface",
          "docComment": "/**\n * @see\n *\n * https://github.com/facebook/react-native/blob/0.34-stable\\Libraries\\Components\\Touchable\\Touchable.js\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TouchableMixin "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/Touchable.d.ts",
          "releaseTag": "Public",
          "name": "TouchableMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableGetHighlightDelayMS:member(1)",
              "docComment": "/**\n * Returns the number of millis to wait before triggering a highlight.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableGetHighlightDelayMS(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "touchableGetHighlightDelayMS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableGetHitSlop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableGetHitSlop(): "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "touchableGetHitSlop"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableGetLongPressDelayMS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableGetLongPressDelayMS(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "touchableGetLongPressDelayMS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableGetPressOutDelayMS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableGetPressOutDelayMS(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "touchableGetPressOutDelayMS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableGetPressRectOffset:member(1)",
              "docComment": "/**\n * Returns the amount to extend the `HitRect` into the `PressRect`. Positive numbers mean the size expands outwards.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableGetPressRectOffset(): "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "touchableGetPressRectOffset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableHandleActivePressIn:member(1)",
              "docComment": "/**\n * Invoked when the item should be highlighted. Mixers should implement this to visually distinguish the `VisualRect` so that the user knows that releasing a touch will result in a \"selection\" (analog to click).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableHandleActivePressIn(e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "touchableHandleActivePressIn"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableHandleActivePressOut:member(1)",
              "docComment": "/**\n * Invoked when the item is \"active\" (in that it is still eligible to become a \"select\") but the touch has left the `PressRect`. Usually the mixer will want to unhighlight the `VisualRect`. If the user (while pressing) moves back into the `PressRect` `touchableHandleActivePressIn` will be invoked again and the mixer should probably highlight the `VisualRect` again. This event will not fire on an `touchEnd/mouseUp` event, only move events while the user is depressing the mouse/touch.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableHandleActivePressOut(e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "touchableHandleActivePressOut"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableHandleLongPress:member(1)",
              "docComment": "/**\n * Invoked when the item is long pressed - meaning the interaction ended by letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will be called as it normally is. If `touchableHandleLongPress` is provided, by default any `touchableHandlePress` callback will not be invoked. To override this default behavior, override `touchableLongPressCancelsPress` to return false. As a result, `touchableHandlePress` will be called when lifting up, even if `touchableHandleLongPress` has also been called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableHandleLongPress(e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "touchableHandleLongPress"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TouchableMixin#touchableHandlePress:member(1)",
              "docComment": "/**\n * Invoked when the item is \"selected\" - meaning the interaction ended by letting up while the item was either in the state `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchableHandlePress(e: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "touchableHandlePress"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TouchableNativeFeedback:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class TouchableNativeFeedback extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableNativeFeedbackBase",
              "canonicalReference": "react-native!TouchableNativeFeedbackBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TouchableNativeFeedback",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "react-native!TouchableNativeFeedback.canUseNativeForeground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static canUseNativeForeground(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "canUseNativeForeground"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!TouchableNativeFeedback.Ripple:member(1)",
              "docComment": "/**\n * Creates an object that represents ripple drawable with specified color (as a string). If property `borderless` evaluates to true the ripple will render outside of the view bounds (see native actionbar buttons as an example of that behavior). This background type is available on Android API level 21+.\n *\n * @param color - The ripple color\n *\n * @param borderless - If the ripple can render outside it's bounds\n *\n * @param rippleRadius - The radius of ripple effect\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Ripple(\n    color: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n    borderless: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ",\n    rippleRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "RippleBackgroundPropType",
                  "canonicalReference": "react-native!RippleBackgroundPropType:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "borderless",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rippleRadius",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "Ripple"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!TouchableNativeFeedback.SelectableBackground:member(1)",
              "docComment": "/**\n * Creates an object that represents android theme's default background for selectable elements (?android:attr/selectableItemBackground).\n *\n * @param rippleRadius - The radius of ripple effect\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SelectableBackground(\n    rippleRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "ThemeAttributeBackgroundPropType",
                  "canonicalReference": "react-native!ThemeAttributeBackgroundPropType:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rippleRadius",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "SelectableBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "react-native!TouchableNativeFeedback.SelectableBackgroundBorderless:member(1)",
              "docComment": "/**\n * Creates an object that represent android theme's default background for borderless selectable elements (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+.\n *\n * @param rippleRadius - The radius of ripple effect\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SelectableBackgroundBorderless(\n    rippleRadius?: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Reference",
                  "text": "ThemeAttributeBackgroundPropType",
                  "canonicalReference": "react-native!ThemeAttributeBackgroundPropType:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rippleRadius",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "SelectableBackgroundBorderless"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TouchableNativeFeedbackBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TouchableNativeFeedbackBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableMixin",
              "canonicalReference": "react-native!TouchableMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "TouchableNativeFeedbackComponent",
              "canonicalReference": "react-native!TouchableNativeFeedbackComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TouchableNativeFeedbackBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TouchableNativeFeedbackComponent:class",
          "docComment": "/**\n * A wrapper for making views respond properly to touches (Android only). On Android this component uses native state drawable to display touch feedback. At the moment it only supports having a single View instance as a child node, as it's implemented by replacing that View with another instance of RCTView node with some additional properties set.\n *\n * Background drawable of native feedback touchable can be customized with background property.\n *\n * @see\n *\n * https://reactnative.dev/docs/touchablenativefeedback#content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class TouchableNativeFeedbackComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableNativeFeedbackProps",
              "canonicalReference": "react-native!TouchableNativeFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TouchableNativeFeedbackComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TouchableNativeFeedbackProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TouchableNativeFeedbackProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TouchableNativeFeedbackProperties = "
            },
            {
              "kind": "Reference",
              "text": "TouchableNativeFeedbackProps",
              "canonicalReference": "react-native!TouchableNativeFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TouchableNativeFeedbackProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableNativeFeedbackProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/touchablenativefeedback#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableNativeFeedbackProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackProps",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TVProps",
              "canonicalReference": "react-native!TVProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableNativeFeedback.d.ts",
          "releaseTag": "Public",
          "name": "TouchableNativeFeedbackProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableNativeFeedbackProps#background:member",
              "docComment": "/**\n * Determines the type of background drawable that's going to be used to display feedback. It takes an object with type property and extra data depending on the type. It's recommended to use one of the following static methods to generate that dictionary: 1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's default background for selectable elements (?android:attr/selectableItemBackground) 2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android theme's default background for borderless selectable elements (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+ 3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable with specified color (as a string). If property borderless evaluates to true the ripple will render outside of the view bounds (see native actionbar buttons as an example of that behavior). This background type is available on Android API level 21+\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "background?: "
                },
                {
                  "kind": "Reference",
                  "text": "BackgroundPropType",
                  "canonicalReference": "react-native!BackgroundPropType:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "background",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableNativeFeedbackProps#useForeground:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useForeground?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "useForeground",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TouchableOpacity:var",
          "docComment": "/**\n * A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it. This is done without actually changing the view hierarchy, and in general is easy to add to an app without weird side-effects.\n *\n * @see\n *\n * https://reactnative.dev/docs/touchableopacity\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TouchableOpacity: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardRefExoticComponent",
              "canonicalReference": "@types/react!React.ForwardRefExoticComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\n  "
            },
            {
              "kind": "Reference",
              "text": "React.PropsWithoutRef",
              "canonicalReference": "@types/react!React.PropsWithoutRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableOpacityProps",
              "canonicalReference": "react-native!TouchableOpacityProps:interface"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "View",
              "canonicalReference": "react-native!View:class"
            },
            {
              "kind": "Content",
              "text": ">\n>"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableOpacity.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TouchableOpacity",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TouchableOpacityProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TouchableOpacityProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TouchableOpacityProperties = "
            },
            {
              "kind": "Reference",
              "text": "TouchableOpacityProps",
              "canonicalReference": "react-native!TouchableOpacityProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TouchableOpacityProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableOpacityProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/touchableopacity#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableOpacityProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackProps",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TVProps",
              "canonicalReference": "react-native!TVProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableOpacity.d.ts",
          "releaseTag": "Public",
          "name": "TouchableOpacityProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableOpacityProps#activeOpacity:member",
              "docComment": "/**\n * Determines what the opacity of the wrapped view should be when touch is active. Defaults to 0.2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeOpacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "activeOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TouchableWithoutFeedback:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class TouchableWithoutFeedback extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackBase",
              "canonicalReference": "react-native!TouchableWithoutFeedbackBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TouchableWithoutFeedback",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!TouchableWithoutFeedbackBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TouchableWithoutFeedbackBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TimerMixin",
              "canonicalReference": "react-native!~TimerMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableMixin",
              "canonicalReference": "react-native!TouchableMixin:interface"
            },
            {
              "kind": "Content",
              "text": "> &\n  typeof "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackComponent",
              "canonicalReference": "react-native!TouchableWithoutFeedbackComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TouchableWithoutFeedbackBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!TouchableWithoutFeedbackComponent:class",
          "docComment": "/**\n * Do not use unless you have a very good reason. All the elements that respond to press should have a visual feedback when touched. This is one of the primary reason a \"web\" app doesn't feel \"native\".\n *\n * @see\n *\n * https://reactnative.dev/docs/touchablewithoutfeedback\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class TouchableWithoutFeedbackComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackProps",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TouchableWithoutFeedbackComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!TouchableWithoutFeedbackProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use TouchableWithoutFeedbackProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TouchableWithoutFeedbackProperties = "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackProps",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "TouchableWithoutFeedbackProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableWithoutFeedbackProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableWithoutFeedbackProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackPropsIOS",
              "canonicalReference": "react-native!TouchableWithoutFeedbackPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "TouchableWithoutFeedbackPropsAndroid",
              "canonicalReference": "react-native!TouchableWithoutFeedbackPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "releaseTag": "Public",
          "name": "TouchableWithoutFeedbackProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#delayLongPress:member",
              "docComment": "/**\n * Delay in ms, from onPressIn, before onLongPress is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayLongPress?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayLongPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#delayPressIn:member",
              "docComment": "/**\n * Delay in ms, from the start of the touch, before onPressIn is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayPressIn?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayPressIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#delayPressOut:member",
              "docComment": "/**\n * Delay in ms, from the release of the touch, before onPressOut is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayPressOut?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delayPressOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#disabled:member",
              "docComment": "/**\n * If true, disable all interactions for this component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#focusable:member",
              "docComment": "/**\n * Whether this View should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard / TV remote.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "focusable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#hitSlop:member",
              "docComment": "/**\n * This defines how far your touch can start away from the button. This is added to pressRetentionOffset when moving off of the button. NOTE The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hitSlop?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hitSlop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#id:member",
              "docComment": "/**\n * Used to reference react managed views from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onBlur:member",
              "docComment": "/**\n * When `accessible` is true (which is the default) this may be called when the OS-specific concept of \"blur\" occurs, meaning the element lost focus. Some platforms may not have the concept of blur.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Content",
                  "text": "((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TargetedEvent",
                  "canonicalReference": "react-native!TargetedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onFocus:member",
              "docComment": "/**\n * When `accessible` is true (which is the default) this may be called when the OS-specific concept of \"focus\" occurs. Some platforms may not have the concept of focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "((e: "
                },
                {
                  "kind": "Reference",
                  "text": "NativeSyntheticEvent",
                  "canonicalReference": "react-native!NativeSyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TargetedEvent",
                  "canonicalReference": "react-native!TargetedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onLayout:member",
              "docComment": "/**\n * Invoked on mount and layout changes with {nativeEvent: {layout: {x, y, width, height}}}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayout?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutChangeEvent",
                  "canonicalReference": "react-native!LayoutChangeEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onLongPress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLongPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLongPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onPress:member",
              "docComment": "/**\n * Called when the touch is released, but not if cancelled (e.g. by a scroll that steals the responder lock).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPress?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onPressIn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressIn?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#onPressOut:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPressOut?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "GestureResponderEvent",
                  "canonicalReference": "react-native!GestureResponderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onPressOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#pressRetentionOffset:member",
              "docComment": "/**\n * When the scroll view is disabled, this defines how far your touch may move off of the button, before deactivating the button. Once deactivated, try moving it back and you'll see that the button is once again reactivated! Move it back and forth several times while the scroll view is disabled. Ensure you pass in a constant to reduce memory allocations.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressRetentionOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pressRetentionOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#rejectResponderTermination:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejectResponderTermination?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rejectResponderTermination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#style:member",
              "docComment": "/**\n * //FIXME: not in doc but available in examples\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableWithoutFeedbackPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableWithoutFeedbackPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "releaseTag": "Public",
          "name": "TouchableWithoutFeedbackPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TouchableWithoutFeedbackPropsAndroid#touchSoundDisabled:member",
              "docComment": "/**\n * If true, doesn't play a system sound on touch.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "touchSoundDisabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "touchSoundDisabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TouchableWithoutFeedbackPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TouchableWithoutFeedbackPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableWithoutFeedback.d.ts",
          "releaseTag": "Public",
          "name": "TouchableWithoutFeedbackPropsIOS",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TransformsStyle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransformsStyle "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TransformsStyle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#rotation:member",
              "docComment": "/**\n * @deprecated\n *\n * Use rotate in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#scaleX:member",
              "docComment": "/**\n * @deprecated\n *\n * Use scaleX in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleX?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scaleX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#scaleY:member",
              "docComment": "/**\n * @deprecated\n *\n * Use scaleY in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleY?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scaleY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#transform:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transform?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| "
                },
                {
                  "kind": "Reference",
                  "text": "MaximumOneOf",
                  "canonicalReference": "react-native!MaximumOneOf:type"
                },
                {
                  "kind": "Content",
                  "text": "<\n        "
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveTransform",
                  "canonicalReference": "react-native!PerspectiveTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "RotateTransform",
                  "canonicalReference": "react-native!RotateTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "RotateXTransform",
                  "canonicalReference": "react-native!RotateXTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "RotateYTransform",
                  "canonicalReference": "react-native!RotateYTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "RotateZTransform",
                  "canonicalReference": "react-native!RotateZTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "ScaleTransform",
                  "canonicalReference": "react-native!ScaleTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "ScaleXTransform",
                  "canonicalReference": "react-native!ScaleXTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "ScaleYTransform",
                  "canonicalReference": "react-native!ScaleYTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "TranslateXTransform",
                  "canonicalReference": "react-native!TranslateXTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "TranslateYTransform",
                  "canonicalReference": "react-native!TranslateYTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "SkewXTransform",
                  "canonicalReference": "react-native!SkewXTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "SkewYTransform",
                  "canonicalReference": "react-native!SkewYTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": " &\n          "
                },
                {
                  "kind": "Reference",
                  "text": "MatrixTransform",
                  "canonicalReference": "react-native!MatrixTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": "\n      >[]\n    | string\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transform",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 30
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#transformMatrix:member",
              "docComment": "/**\n * @deprecated\n *\n * Use matrix in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transformMatrix?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transformMatrix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#transformOrigin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transformOrigin?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | number> | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transformOrigin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#translateX:member",
              "docComment": "/**\n * @deprecated\n *\n * Use translateX in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translateX?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "translateX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TransformsStyle#translateY:member",
              "docComment": "/**\n * @deprecated\n *\n * Use translateY in transform prop instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translateY?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "translateY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TranslateXTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TranslateXTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TranslateXTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TranslateXTransform#translateX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translateX: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | `${number}%`"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "translateX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TranslateYTransform:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TranslateYTransform "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "TranslateYTransform",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TranslateYTransform#translateY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translateY: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | `${number}%`"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "translateY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TurboModule:interface",
          "docComment": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TurboModule "
            }
          ],
          "fileUrlPath": "Libraries/TurboModule/RCTExport.d.ts",
          "releaseTag": "Public",
          "name": "TurboModule",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!TurboModule#getConstants:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConstants?(): "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getConstants"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "react-native!TurboModuleRegistry:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "types/index.d.ts",
          "releaseTag": "None",
          "name": "TurboModuleRegistry",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "react-native!TurboModuleRegistry.get:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function get<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "TurboModule",
                  "canonicalReference": "react-native!TurboModule:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/TurboModule/TurboModuleRegistry.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Function",
              "canonicalReference": "react-native!TurboModuleRegistry.getEnforcing:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function getEnforcing<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "TurboModule",
                  "canonicalReference": "react-native!TurboModule:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "Libraries/TurboModule/TurboModuleRegistry.d.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "getEnforcing"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TVProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TVProps "
            }
          ],
          "fileUrlPath": "Libraries/Components/Touchable/TouchableOpacity.d.ts",
          "releaseTag": "Public",
          "name": "TVProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#hasTVPreferredFocus:member",
              "docComment": "/**\n * *(Apple TV only)* TV preferred focus (see documentation for the View component).\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTVPreferredFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hasTVPreferredFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#nextFocusDown:member",
              "docComment": "/**\n * Designates the next view to receive focus when the user navigates down. See the Android documentation.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextFocusDown?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextFocusDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#nextFocusForward:member",
              "docComment": "/**\n * Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextFocusForward?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextFocusForward",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#nextFocusLeft:member",
              "docComment": "/**\n * Designates the next view to receive focus when the user navigates left. See the Android documentation.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextFocusLeft?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextFocusLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#nextFocusRight:member",
              "docComment": "/**\n * Designates the next view to receive focus when the user navigates right. See the Android documentation.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextFocusRight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextFocusRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVProps#nextFocusUp:member",
              "docComment": "/**\n * Designates the next view to receive focus when the user navigates up. See the Android documentation.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextFocusUp?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextFocusUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!TVViewPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TVViewPropsIOS "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewPropTypes.d.ts",
          "releaseTag": "Public",
          "name": "TVViewPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#hasTVPreferredFocus:member",
              "docComment": "/**\n * *(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTVPreferredFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hasTVPreferredFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#isTVSelectable:member",
              "docComment": "/**\n * *(Apple TV only)* When set to true, this view will be focusable and navigable using the Apple TV remote.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTVSelectable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isTVSelectable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#tvParallaxMagnification:member",
              "docComment": "/**\n * *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 1.0.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tvParallaxMagnification?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tvParallaxMagnification",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#tvParallaxShiftDistanceX:member",
              "docComment": "/**\n * *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tvParallaxShiftDistanceX?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tvParallaxShiftDistanceX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#tvParallaxShiftDistanceY:member",
              "docComment": "/**\n * *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tvParallaxShiftDistanceY?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tvParallaxShiftDistanceY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!TVViewPropsIOS#tvParallaxTiltAngle:member",
              "docComment": "/**\n * *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 0.05.\n *\n * @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tvParallaxTiltAngle?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tvParallaxTiltAngle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!UIManager:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UIManager = "
            },
            {
              "kind": "Reference",
              "text": "UIManagerStatic",
              "canonicalReference": "react-native!UIManagerStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/UIManager.d.ts",
          "releaseTag": "Public",
          "name": "UIManager",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!UIManager:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UIManager: "
            },
            {
              "kind": "Reference",
              "text": "UIManagerStatic",
              "canonicalReference": "react-native!UIManagerStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/UIManager.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UIManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!UIManagerStatic:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UIManagerStatic "
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/UIManager.d.ts",
          "releaseTag": "Public",
          "name": "UIManagerStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!UIManagerStatic#dispatchViewManagerCommand:member",
              "docComment": "/**\n * Used to call a native view method from JavaScript\n *\n * reactTag - Id of react view. commandID - Id of the native method that should be called. commandArgs - Args of the native method that we can pass from JS to native.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatchViewManagerCommand: "
                },
                {
                  "kind": "Content",
                  "text": "(\n    reactTag: number | null,\n    commandID: number | string,\n    commandArgs?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>,\n  ) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dispatchViewManagerCommand",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!UIManagerStatic#getViewManagerConfig:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getViewManagerConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => {\n    Commands: {[key: string]: number};\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getViewManagerConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!UIManagerStatic#hasViewManagerConfig:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasViewManagerConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasViewManagerConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!UIManagerStatic#measure:member(1)",
              "docComment": "/**\n * Determines the location on screen, width, and height of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:\n *\n * - x - y - width - height - pageX - pageY\n *\n * Note that these measurements are not available until after the rendering has been completed in native. If you need the measurements as soon as possible, consider using the [`onLayout` prop](docs/view.html#onlayout) instead.\n *\n * @deprecated\n *\n * Use `ref.measure` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measure(node: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "measure"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!UIManagerStatic#measureInWindow:member(1)",
              "docComment": "/**\n * Determines the location of the given view in the window and returns the values via an async callback. If the React root view is embedded in another native view, this will give you the absolute coordinates. If successful, the callback will be called with the following arguments:\n *\n * - x - y - width - height\n *\n * Note that these measurements are not available until after the rendering has been completed in native.\n *\n * @deprecated\n *\n * Use `ref.measureInWindow` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureInWindow(\n    node: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    callback: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureInWindowOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureInWindowOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "measureInWindow"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!UIManagerStatic#measureLayout:member(1)",
              "docComment": "/**\n * Like [`measure()`](#measure), but measures the view relative an ancestor, specified as `relativeToNativeNode`. This means that the returned x, y are relative to the origin x, y of the ancestor view.\n *\n * As always, to obtain a native node handle for a component, you can use `React.findNodeHandle(component)`.\n *\n * @deprecated\n *\n * Use `ref.measureLayout` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureLayout(\n    node: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    relativeToNativeNode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ",\n    onFail: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": " /* currently unused */,\n    onSuccess: "
                },
                {
                  "kind": "Reference",
                  "text": "MeasureLayoutOnSuccessCallback",
                  "canonicalReference": "react-native!MeasureLayoutOnSuccessCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ",\n  ): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "relativeToNativeNode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "onFail",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "onSuccess",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "measureLayout"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!UIManagerStatic#setLayoutAnimationEnabledExperimental:member",
              "docComment": "/**\n * Automatically animates views to their new positions when the next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n * UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLayoutAnimationEnabledExperimental?:\n    "
                },
                {
                  "kind": "Content",
                  "text": "| ((value: boolean) => void)\n    | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "setLayoutAnimationEnabledExperimental",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!unstable_batchedUpdates:function(1)",
          "docComment": "/**\n * React Native also implements unstable_batchedUpdates\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function unstable_batchedUpdates<A, R>(callback: "
            },
            {
              "kind": "Content",
              "text": "(a: A) => R"
            },
            {
              "kind": "Content",
              "text": ", a: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeRenderer.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "unstable_batchedUpdates"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!unstable_batchedUpdates:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function unstable_batchedUpdates<R>(callback: "
            },
            {
              "kind": "Content",
              "text": "() => R"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/ReactNativeRenderer.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "unstable_batchedUpdates"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!useAnimatedValue:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function useAnimatedValue(\n  initialValue: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ",\n  config?: "
            },
            {
              "kind": "Reference",
              "text": "Animated.AnimatedConfig",
              "canonicalReference": "react-native!Animated.AnimatedConfig:type"
            },
            {
              "kind": "Content",
              "text": ",\n): "
            },
            {
              "kind": "Reference",
              "text": "Animated.Value",
              "canonicalReference": "react-native!Animated.Value:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Animated/useAnimatedValue.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "useAnimatedValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!useColorScheme:function(1)",
          "docComment": "/**\n * A new useColorScheme hook is provided as the preferred way of accessing the user's preferred color scheme (e.g. Dark Mode).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function useColorScheme(): "
            },
            {
              "kind": "Reference",
              "text": "ColorSchemeName",
              "canonicalReference": "react-native!ColorSchemeName:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Appearance.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useColorScheme"
        },
        {
          "kind": "Function",
          "canonicalReference": "react-native!useWindowDimensions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function useWindowDimensions(): "
            },
            {
              "kind": "Reference",
              "text": "ScaledSize",
              "canonicalReference": "react-native!ScaledSize:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Utilities/Dimensions.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useWindowDimensions"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!Vibration:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Vibration = "
            },
            {
              "kind": "Reference",
              "text": "VibrationStatic",
              "canonicalReference": "react-native!VibrationStatic:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Vibration/Vibration.d.ts",
          "releaseTag": "Public",
          "name": "Vibration",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!Vibration:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Vibration: "
            },
            {
              "kind": "Reference",
              "text": "VibrationStatic",
              "canonicalReference": "react-native!VibrationStatic:interface"
            }
          ],
          "fileUrlPath": "Libraries/Vibration/Vibration.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Vibration",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!VibrationStatic:interface",
          "docComment": "/**\n * The Vibration API is exposed at `Vibration.vibrate()`. The vibration is asynchronous so this method will return immediately.\n *\n * There will be no effect on devices that do not support Vibration, eg. the simulator.\n *\n * **Note for android** add `<uses-permission android:name=\"android.permission.VIBRATE\"/>` to `AndroidManifest.xml`\n *\n * **Android Usage:**\n *\n * [0, 500, 200, 500] V(0.5s) --wait(0.2s)--> V(0.5s)\n *\n * [300, 500, 200, 500] --wait(0.3s)--> V(0.5s) --wait(0.2s)--> V(0.5s)\n *\n * **iOS Usage:** if first argument is 0, it will not be included in pattern array.\n *\n * [0, 1000, 2000, 3000] V(fixed) --wait(1s)--> V(fixed) --wait(2s)--> V(fixed) --wait(3s)--> V(fixed)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VibrationStatic "
            }
          ],
          "fileUrlPath": "Libraries/Vibration/Vibration.d.ts",
          "releaseTag": "Public",
          "name": "VibrationStatic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!VibrationStatic#cancel:member(1)",
              "docComment": "/**\n * Stop vibration\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancel(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cancel"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "react-native!VibrationStatic#vibrate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vibrate(pattern?: "
                },
                {
                  "kind": "Content",
                  "text": "number | number[]"
                },
                {
                  "kind": "Content",
                  "text": ", repeat?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pattern",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "repeat",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "vibrate"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!View:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export class View extends "
            },
            {
              "kind": "Reference",
              "text": "ViewBase",
              "canonicalReference": "react-native!ViewBase"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/View.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "View",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "react-native!View.forceTouchAvailable:member",
              "docComment": "/**\n * Is 3D Touch / Force Touch available (i.e. will touch events include `force`)  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static forceTouchAvailable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "forceTouchAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!ViewBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ViewBase: "
            },
            {
              "kind": "Reference",
              "text": "Constructor",
              "canonicalReference": "react-native!~Constructor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NativeMethods",
              "canonicalReference": "react-native!NativeMethods:interface"
            },
            {
              "kind": "Content",
              "text": "> & typeof "
            },
            {
              "kind": "Reference",
              "text": "ViewComponent",
              "canonicalReference": "react-native!ViewComponent:class"
            }
          ],
          "fileUrlPath": "Libraries/Components/View/View.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ViewBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "react-native!ViewComponent:class",
          "docComment": "/**\n * The most fundamental component for building UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls, and is designed to be nested inside other views and to have 0 to many children of any type. View maps directly to the native view equivalent on whatever platform React is running on, whether that is a UIView, <div>, android.view, etc.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ViewComponent extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/View.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ViewComponent",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ViewProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ViewProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ViewProperties = "
            },
            {
              "kind": "Reference",
              "text": "ViewProps",
              "canonicalReference": "react-native!~ViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ViewProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ViewPropertiesAndroid:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ViewPropsAndroid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ViewPropertiesAndroid = "
            },
            {
              "kind": "Reference",
              "text": "ViewPropsAndroid",
              "canonicalReference": "react-native!ViewPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ViewPropertiesAndroid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!ViewPropertiesIOS:type",
          "docComment": "/**\n * @deprecated\n *\n * Use ViewPropsIOS\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ViewPropertiesIOS = "
            },
            {
              "kind": "Reference",
              "text": "ViewPropsIOS",
              "canonicalReference": "react-native!ViewPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "ViewPropertiesIOS",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ViewProps:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/view#props\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ViewProps\n  extends "
            },
            {
              "kind": "Reference",
              "text": "ViewPropsAndroid",
              "canonicalReference": "react-native!ViewPropsAndroid:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "ViewPropsIOS",
              "canonicalReference": "react-native!ViewPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "GestureResponderHandlers",
              "canonicalReference": "react-native!GestureResponderHandlers:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "Touchable",
              "canonicalReference": "react-native!Touchable:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "PointerEvents",
              "canonicalReference": "react-native!PointerEvents:interface"
            },
            {
              "kind": "Content",
              "text": ",\n    "
            },
            {
              "kind": "Reference",
              "text": "AccessibilityProps",
              "canonicalReference": "react-native!AccessibilityProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewPropTypes.d.ts",
          "releaseTag": "Public",
          "name": "ViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#hitSlop:member",
              "docComment": "/**\n * This defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels. If a Touchable view has a height of 20 the touchable height can be extended to 40 with hitSlop={{top: 10, bottom: 10, left: 0, right: 0}} NOTE The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hitSlop?: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "Insets",
                  "canonicalReference": "react-native!Insets:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hitSlop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#id:member",
              "docComment": "/**\n * Used to reference react managed views from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#nativeID:member",
              "docComment": "/**\n * Used to reference react managed views from native code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nativeID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nativeID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#needsOffscreenAlphaCompositing:member",
              "docComment": "/**\n * Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior. The default (false) falls back to drawing the component and its children with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value. This default may be noticeable and undesired in the case where the View you are setting an opacity on has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n *\n * Rendering offscreen to preserve correct alpha behavior is extremely expensive and hard to debug for non-native developers, which is why it is not turned on by default. If you do need to enable this property for an animation, consider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame). If that property is enabled, this View will be rendered off-screen once, saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "needsOffscreenAlphaCompositing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "needsOffscreenAlphaCompositing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#onLayout:member",
              "docComment": "/**\n * Invoked on mount and layout changes with\n *\n * {nativeEvent: { layout: {x, y, width, height}}}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayout?: "
                },
                {
                  "kind": "Content",
                  "text": "((event: "
                },
                {
                  "kind": "Reference",
                  "text": "LayoutChangeEvent",
                  "canonicalReference": "react-native!LayoutChangeEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#pointerEvents:member",
              "docComment": "/**\n * In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n *\n * .box-none { pointer-events: none; } .box-none * { pointer-events: all; }\n *\n * box-only is the equivalent of\n *\n * .box-only { pointer-events: all; } .box-only * { pointer-events: none; }\n *\n * But since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes, we opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pointerEvents?: "
                },
                {
                  "kind": "Content",
                  "text": "'box-none' | 'none' | 'box-only' | 'auto' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pointerEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#removeClippedSubviews:member",
              "docComment": "/**\n * This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews, most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound. The subviews must also have overflow: hidden, as should the containing view (or one of its superviews).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeClippedSubviews?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removeClippedSubviews",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleProp",
                  "canonicalReference": "react-native!StyleProp:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ViewStyle",
                  "canonicalReference": "react-native!ViewStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewProps#testID:member",
              "docComment": "/**\n * Used to locate this view in end-to-end tests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testID?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "testID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            },
            {
              "startIndex": 7,
              "endIndex": 8
            },
            {
              "startIndex": 9,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ViewPropsAndroid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ViewPropsAndroid "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewPropTypes.d.ts",
          "releaseTag": "Public",
          "name": "ViewPropsAndroid",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsAndroid#collapsable:member",
              "docComment": "/**\n * Views that are only used to layout their children or otherwise don't draw anything may be automatically removed from the native hierarchy as an optimization. Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapsable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "collapsable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsAndroid#collapsableChildren:member",
              "docComment": "/**\n * Setting to false prevents direct children of the view from being removed from the native view hierarchy, similar to the effect of setting `collapsable={false}` on each child.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapsableChildren?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "collapsableChildren",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsAndroid#focusable:member",
              "docComment": "/**\n * Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "focusable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsAndroid#renderToHardwareTextureAndroid:member",
              "docComment": "/**\n * Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n *\n * On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale: in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderToHardwareTextureAndroid?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderToHardwareTextureAndroid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsAndroid#tabIndex:member",
              "docComment": "/**\n * Indicates whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard. See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex for more details.\n *\n * Supports the following values: - 0 (View is focusable) - -1 (View is not focusable)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tabIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "0 | -1 | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tabIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ViewPropsIOS:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ViewPropsIOS extends "
            },
            {
              "kind": "Reference",
              "text": "TVViewPropsIOS",
              "canonicalReference": "react-native!TVViewPropsIOS:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/Components/View/ViewPropTypes.d.ts",
          "releaseTag": "Public",
          "name": "ViewPropsIOS",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewPropsIOS#shouldRasterizeIOS:member",
              "docComment": "/**\n * Whether this view should be rendered as a bitmap before compositing.\n *\n * On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children; for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view and quickly composite it during each frame.\n *\n * Rasterization incurs an off-screen drawing pass and the bitmap consumes memory. Test and measure when using this property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldRasterizeIOS?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shouldRasterizeIOS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "react-native!ViewStyle:interface",
          "docComment": "/**\n * @see\n *\n * https://reactnative.dev/docs/view#style\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ViewStyle extends "
            },
            {
              "kind": "Reference",
              "text": "FlexStyle",
              "canonicalReference": "react-native!~FlexStyle:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ShadowStyleIOS",
              "canonicalReference": "react-native!ShadowStyleIOS:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TransformsStyle",
              "canonicalReference": "react-native!TransformsStyle:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "Libraries/StyleSheet/StyleSheetTypes.d.ts",
          "releaseTag": "Public",
          "name": "ViewStyle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#backfaceVisibility:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backfaceVisibility?: "
                },
                {
                  "kind": "Content",
                  "text": "'visible' | 'hidden' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backfaceVisibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#backgroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBlockColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBlockColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBlockColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBlockEndColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBlockEndColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBlockEndColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBlockStartColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBlockStartColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBlockStartColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBottomColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBottomEndRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomEndRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomEndRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBottomLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomLeftRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBottomRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomRightRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderBottomStartRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderBottomStartRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderBottomStartRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderCurve:member",
              "docComment": "/**\n * On iOS 13+, it is possible to change the corner curve of borders.  @platform ios\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderCurve?: "
                },
                {
                  "kind": "Content",
                  "text": "'circular' | 'continuous' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderCurve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderEndColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderEndColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderEndColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderEndEndRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderEndEndRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderEndEndRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderEndStartRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderEndStartRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderEndStartRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderLeftColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderLeftColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderLeftColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderRightColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderRightColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderRightColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderStartColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStartColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderStartColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderStartEndRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStartEndRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderStartEndRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderStartStartRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStartStartRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderStartStartRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "'solid' | 'dotted' | 'dashed' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderTopColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "react-native!ColorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderTopEndRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopEndRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopEndRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderTopLeftRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopLeftRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopLeftRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderTopRightRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopRightRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopRightRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#borderTopStartRadius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderTopStartRadius?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "borderTopStartRadius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#cursor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cursor?: "
                },
                {
                  "kind": "Reference",
                  "text": "CursorValue",
                  "canonicalReference": "react-native!CursorValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cursor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#elevation:member",
              "docComment": "/**\n * Sets the elevation of a view, using Android's underlying [elevation API](https://developer.android.com/training/material/shadows-clipping.html#Elevation). This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.\n *\n * @platform android\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "elevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#opacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatableNumericValue",
                  "canonicalReference": "react-native!AnimatableNumericValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "react-native!ViewStyle#pointerEvents:member",
              "docComment": "/**\n * Controls whether the View can be the target of touch events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pointerEvents?: "
                },
                {
                  "kind": "Content",
                  "text": "'box-none' | 'none' | 'box-only' | 'auto' | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pointerEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!VirtualizedListProperties:type",
          "docComment": "/**\n * @deprecated\n *\n * Use VirtualizedListProps\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type VirtualizedListProperties<ItemT> = "
            },
            {
              "kind": "Reference",
              "text": "VirtualizedListProps",
              "canonicalReference": "@react-native/virtualized-lists!VirtualizedListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/public/DeprecatedPropertiesAlias.d.ts",
          "releaseTag": "Public",
          "name": "VirtualizedListProperties",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!VirtualizedListWithoutPreConfiguredProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type VirtualizedListWithoutPreConfiguredProps<ItemT> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<\n  "
            },
            {
              "kind": "Reference",
              "text": "VirtualizedListWithoutRenderItemProps",
              "canonicalReference": "@react-native/virtualized-lists!VirtualizedListWithoutRenderItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<ItemT>,\n  'stickyHeaderIndices'\n>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/Lists/SectionList.d.ts",
          "releaseTag": "Public",
          "name": "VirtualizedListWithoutPreConfiguredProps",
          "typeParameters": [
            {
              "typeParameterName": "ItemT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "react-native!WrapperComponentProvider:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WrapperComponentProvider = "
            },
            {
              "kind": "Content",
              "text": "(\n  appParameters: any,\n) => "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "Libraries/ReactNative/AppRegistry.d.ts",
          "releaseTag": "Public",
          "name": "WrapperComponentProvider",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "react-native!YellowBox:var",
          "docComment": "/**\n * YellowBox has been replaced with LogBox.\n *\n * @deprecated\n *\n * @see\n *\n * LogBox\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "YellowBox: "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentClass",
              "canonicalReference": "@types/react!React.ComponentClass:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any> & {\n  ignoreWarnings: (warnings: string[]) => void;\n}"
            }
          ],
          "fileUrlPath": "Libraries/YellowBox/YellowBoxDeprecated.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "YellowBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        }
      ]
    }
  ]
}
